<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springboot中的常用操作</title>
      <link href="/blog/2022/02/26/28.springboot-zhong-de-chang-yong-cao-zuo/"/>
      <url>/blog/2022/02/26/28.springboot-zhong-de-chang-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>本次记录spring boot中的常用操作，像邮件服务，统一异常处理之类的</p><h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><table><thead><tr><th><strong>@ControllerAdvice</strong></th><th>捕获 <code>Controller</code> 层抛出的异常，如果添加 <code>@ResponseBody</code> 返回信息则为<code>JSON</code> 格式</th></tr></thead><tbody><tr><td><strong>@RestControllerAdvice</strong></td><td>相当于 <code>@ControllerAdvice</code> 与 <code>@ResponseBody</code> 的结合体</td></tr><tr><td><strong>@ExceptionHandler</strong></td><td>统一处理一种类的异常，减少代码重复率，降低复杂度</td></tr></tbody></table><p>在上篇记录中<strong>AccessDeniedException</strong>没有被<strong>AjaxAccessDeniedHandler</strong>处理到，就以这个来作个示例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>AccessDeniedException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">accessDeniedExceptionHandler</span><span class="token punctuation">(</span>AccessDeniedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"捕获AccessDeniedException——————————————————————————"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{\"code\":403,\"msg\":\"权限不足，请与管理员联系!\"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://s6.jpg.cm/2022/02/28/LghE4G.png"></p><p>可以看到，对<strong>AccessDeniedException</strong>捕获成功，并且对客户端返回了响应；通常是会对响应结果做一个封装，不会像示例一样直接返回字符串，并且会添加信息到日志中，而不是直接打印到控制台</p><h2 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h2><ul><li><strong><em>邮件通讯协议</em></strong></li></ul><table><thead><tr><th>SMTP</th><th>简单邮件传输协议，用于发送电子邮件的传输协议</th></tr></thead><tbody><tr><td>POP3</td><td>用于接收电子邮件的标准协议</td></tr><tr><td>IMAP</td><td>互联网消息协议，是POP3的替代协议</td></tr></tbody></table><p>这三种协议都有对应SSL加密传输的协议，分别是<code>SMTPS</code>，<code>POP3S</code>和<code>IMAPS</code>。除<code>JavaMail</code>服务提供程序之外，<code>JavaMail</code>还需要<code>JAF(JavaBeans Activation Framework)</code>来处理不是纯文本的邮件内容，这包括MIME（多用途互联网邮件扩展）、URL页面和文件附件等内容</p><ul><li><strong><em>引入依赖</em></strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><strong><em>springboot配置文件</em></strong></li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># --邮件相关--</span><span class="token comment" spellcheck="true"># SMTP服务器地址</span><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">smtp.qq.com</span><span class="token comment" spellcheck="true"># SMTP服务器端口号 默认-1</span><span class="token attr-name">spring.mail.port</span><span class="token punctuation">=</span><span class="token attr-value">-1</span><span class="token comment" spellcheck="true"># 发送方帐号</span><span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">用户名  </span><span class="token comment" spellcheck="true"># 发送方密码（授权码）</span><span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span><span class="token comment" spellcheck="true"># --javaMailProperties配置--</span><span class="token comment" spellcheck="true"># 开启用户身份验证</span><span class="token attr-name">spring.mail.properties.mail.smtp.auth</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># STARTTLS：一种通信协议，具体可以搜索下</span><span class="token attr-name">spring.mail.properties.mail.smtp.starttls.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.mail.properties.mail.smtp.starttls.required</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><p>去注释版</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">smtp.qq.com</span><span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">用户名</span><span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span><span class="token attr-name">spring.mail.properties.mail.smtp.auth</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.mail.properties.mail.smtp.starttls.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.mail.properties.mail.smtp.starttls.required</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><ul><li><strong><em>获取授权码</em></strong></li></ul><p><img src="https://s6.jpg.cm/2022/02/28/LghFD4.png"></p><pre class=" language-txt"><code class="language-txt">我申请到的授权码btqkmcdaujvigbbg</code></pre><ul><li><strong><em>发送简单邮件</em></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JavaMailSender mailSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleMailMessage mail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mail<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"**********@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mail<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"**********@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mail<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"简单邮件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mail<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"测试邮件内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mail<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><em>发送带附件的邮件</em></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>    MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"**********@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"**********@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"附件测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"测试带附件的邮件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileSystemResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/test/java/com/haichao/1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"附件1"</span><span class="token punctuation">,</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"附件2"</span><span class="token punctuation">,</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong><em>发送嵌入静态资源的邮件</em></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>    MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"**********@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"**********@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"静态资源测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"&lt;html>&lt;body>&lt;h1 style='color:red;'>测试带静态资源的邮件&lt;/h1>&lt;img src='cid:image1' >&lt;/body>&lt;/html>"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileSystemResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/test/java/com/haichao/1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">addInline</span><span class="token punctuation">(</span><span class="token string">"image1"</span><span class="token punctuation">,</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong><em>模板邮件</em></strong></li></ul><p>我使用的是<strong>thymeleaf</strong>模板，先简单的创建emailTemplate.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>模板邮件测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cid:image1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://shiro.apache.org/images/ShiroFeatures.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>写个测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> TemplateEngine templateEngine<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>    MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"xxxxxxxxxx@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"xxxxxxxxxx@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"模板邮件测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Context是导这个包import org.thymeleaf.context.Context;</span>    Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义模板数据</span>    context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"haichao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取thymeleaf的html模板</span>    String emailContent <span class="token operator">=</span> templateEngine<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token string">"emailTemplate"</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指定模板路径</span>    helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>emailContent<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileSystemResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/test/java/com/haichao/1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    helper<span class="token punctuation">.</span><span class="token function">addInline</span><span class="token punctuation">(</span><span class="token string">"image1"</span><span class="token punctuation">,</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><p>JSR（Java Specification Requests），Java 规范提案；JSR-303 是JAVA EE 6 中的一项子规范，叫做Bean Validation</p><p><strong>hibernate validation是对这个规范的实现</strong>，并增加了校验注解如@Email、@Length等</p><p><strong>Spring Validation是对hibernate validation的二次封装</strong>，用于支持spring mvc参数自动校验</p><ul><li><strong><em>引入依赖</em></strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><strong><em>API</em></strong></li></ul><p><strong>JSR303定义的校验类型</strong></p><table><thead><tr><th>Constraint</th><th>详细信息</th></tr></thead><tbody><tr><td>@NotBlank</td><td>只能用于字符串不为 null ，并且字符串 #trim() 以后 length 要大于 0</td></tr><tr><td>@NotEmpty</td><td>集合对象的元素不为 0 ，即集合不为空，也可以用于字符串不为 null</td></tr><tr><td>@NotNull</td><td>不能为 null</td></tr><tr><td>@Null</td><td>必须为 null</td></tr><tr><td>@Min(value)</td><td>该字段的值只能大于或等于该值</td></tr><tr><td>@Max(value)</td><td>该字段的值只能小于或等于该值</td></tr><tr><td>@Digits(integer, fraction)</td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Positive</td><td>判断正数</td></tr><tr><td>@Negative</td><td>判断负数</td></tr><tr><td>@PositiveOrZero</td><td>判断正数或 0</td></tr><tr><td>@NegativeOrZero</td><td>判断负数或 0</td></tr><tr><td>@AssertFalse</td><td>被注释的元素必须为 false</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为 true</td></tr><tr><td>@Size(max, min)</td><td>检查该字段的 size 是否在 min 和 max 之间，可以是字符串、数组、集合、Map 等</td></tr><tr><td>@Future</td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td>@FutureOrPresent</td><td>判断日期是否是将来或现在日期</td></tr><tr><td>@Past</td><td>检查该字段的日期是在过去</td></tr><tr><td>@PastOrPresent</td><td>判断日期是否是过去或现在日期</td></tr><tr><td>@Email</td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td>@Pattern(value)</td><td>被注释的元素必须符合指定的正则表达式</td></tr></tbody></table><p><strong>Hibernate Validator 附加的 constraint</strong></p><table><thead><tr><th align="left"><strong>Constraint</strong></th><th align="left"><strong>详细信息</strong></th></tr></thead><tbody><tr><td align="left">@Range(min=, max=)</td><td align="left">被注释的元素必须在合适的范围内</td></tr><tr><td align="left">@Length(min=, max=)</td><td align="left">被注释的字符串的大小必须在指定的范围内</td></tr><tr><td align="left">@URL(protocol=,host=,port=,regexp=,flags=)</td><td align="left">被注释的字符串必须是一个有效的 URL</td></tr><tr><td align="left">@SafeHtml</td><td align="left">判断提交的 HTML 是否安全。例如说，不能包含 javascript 脚本等等</td></tr></tbody></table><ul><li><strong><em>使用</em></strong></li></ul><p>创建实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">"密码长度应为6~10位"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@AssertTrue</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"必需为true"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mustTrue<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMustTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mustTrue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMustTrue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mustTrue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mustTrue <span class="token operator">=</span> mustTrue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>统一异常</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>BindException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">validationExceptionHandler</span><span class="token punctuation">(</span>BindException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String msg <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"捕获ValidationException——————————————————————————"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"{\"code\":409,\"msg\":\""</span><span class="token operator">+</span> msg <span class="token operator">+</span><span class="token string">"\"}"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>controller测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/valid"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">validTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> UserDTO userDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"valid success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong><em>分组校验</em></strong></li></ul><p>分组校验的步骤：</p><ol><li>先定义分组</li><li>在注解中加入分组</li><li>controller中校验时用<code>@Validated</code>注解来使用分组</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">User1Group</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">User2Group</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空"</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> User2Group<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">"密码长度应为6~10位"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@AssertTrue</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"必定为true"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mustTrue<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMustTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mustTrue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMustTrue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mustTrue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mustTrue <span class="token operator">=</span> mustTrue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/valid"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">validTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>User1Group<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> UserDTO userDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"valid success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>简单的使用一下异步任务</p><ul><li><strong><em>启动类加注解 @EnableAsync</em></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>App<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><em>要异步的方法加注解 @Async</em></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTestService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Long start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个异步任务！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这个任务执行时间是："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><em>controller测试</em></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/async"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">asyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        asyncTestService<span class="token punctuation">.</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"asyncTest OK"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>目前只是简单的实现了异步任务，当然也可以用**@Async配置异步任务的线程池**，目前对此没多大的需求，故后续学习中记录</p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>每天定时清理无效数据、定时发送短信或邮件、爬虫定时抓取数据、支付系统中的定时对账等等这些需求的实现都离不开定时任务</p><p>定时任务的实现方式有很多种，如jdk中自带<strong>Timer</strong>和<strong>ScheduledExecutorService</strong>（这两个基本不用），<strong>Spring Task</strong>，<strong>Quartz</strong>，<strong>xxl-job</strong>，<strong>Elastic-job</strong>等等</p><h3 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring Task"></a>Spring Task</h3><ul><li><strong><em>使用</em></strong></li></ul><p>首先在启动类上加注解<code>@EnableScheduling</code>或是创建一个<code>ScheduleConfig</code>配置类在上面加<code>@EnableScheduling</code>注解</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式1</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>App<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式2</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>创建方法，在需要使用定时任务的方法上加注解<code>@Scheduled</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchedulerTask</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduled1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每隔3s输出一次当前时间:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span> counts<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"次执行:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以进行配置</p><pre class=" language-yml"><code class="language-yml">spring:  task:    # Spring Task 调度任务的配置，对应 TaskSchedulingProperties 配置类    scheduling:      thread-name-prefix: pikaqiu-demo- # 线程池的线程名的前缀。默认为 scheduling- ，建议根据自己应用来设置      pool:        size: 10 # 线程池大小。默认为 1 ，根据自己应用来设置      shutdown:        await-termination: true # 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true        await-termination-period: 60 # 等待任务完成的最大时长，单位为秒。默认为 0 ，根据自己应用来设置</code></pre><ul><li><strong><em>@Scheduled</em></strong></li></ul><p>该注解可设置的参数：</p><table><thead><tr><th>参数名</th><th>作用</th></tr></thead><tbody><tr><td>cron</td><td>cron表达式，指定任务在特定时间执行</td></tr><tr><td>fixedDelay</td><td>表示上一次任务执行完成后多久再次执行，参数类型为long，单位ms</td></tr><tr><td>fixedDelayString</td><td>与fixedDelay含义一样，只是参数类型变为String</td></tr><tr><td>fixedRate</td><td>表示按一定的频率执行任务，参数类型为long，单位ms</td></tr><tr><td>fixedRateString</td><td>与fixedRate的含义一样，只是将参数类型变为String</td></tr><tr><td>initialDelay</td><td>表示延迟多久再第一次执行任务，参数类型为long，单位ms</td></tr><tr><td>initialDelayString</td><td>与initialDelay的含义一样，只是将参数类型变为String</td></tr><tr><td>zone</td><td>时区，默认为当前时区，一般没有用到</td></tr></tbody></table><ul><li><strong><em>cron表达式</em></strong></li></ul><p>cron表达式是一个具有时间含义的字符串，字符串以5个空格隔开，分为6个域，格式为X X X X X X。其中X是一个域的占位符。单个域有多个取值时，使用半角逗号，隔开取值。每个域可以是确定的取值，也可以是具有逻辑意义的特殊字符</p><p>例子：0 0 12 * * ?  每天中午12点触发</p><p>cron表达式我目前先不进行深入学习，先使用生成器：<a href="https://cron.qqe2.com/">在线Cron表达式生成器 </a></p><h3 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h3><p>当项目中要使用的定时任务十分简单时，使用<strong>Spring Task</strong>就可以了，当<strong>Spring Task</strong>无法满足项目的需求时，这时可以使用<strong>Quartz</strong></p><ul><li><strong><em>介绍</em></strong></li></ul><p>Quartz 是一个开源的作业调度框架，它完全由 Java 写成，并设计用于 J2SE 和 J2EE 应用中。它提供了巨大的灵活性而不牺牲简单性。你能够用它来为执行一个作业而创建简单的或复杂的调度</p><p>其具有这些特征：数据库支持，<strong>集群</strong>，插件，EJB 作业预构建，JavaMail 及其它，支持 cron-like 表达式等等</p><ul><li><strong><em>核心组件</em></strong></li></ul><p><strong>Job</strong> 表示一个任务，要执行的具体内容</p><p><strong>JobDetail</strong> 表示一个具体的可执行的调度程序，Job 是这个可执行的调度程序所需要执行的内容，另外 JobDetail 还包含了这个任务调度的方案和策略</p><p><strong>Trigger</strong> 代表一个触发器，用来调度参数的配置以及什么时候去调</p><p><strong>Scheduler</strong> 代表一个调度器，一个调度器中可以注册多个 JobDetail 和 Trigger。当 Trigger 与 JobDetail 组合，就可以被 Scheduler 容器调度了</p><ul><li><strong><em>使用</em></strong></li></ul><p>引入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>定义 job，我做练习时定义了2个 <strong>Job</strong>，定义的 <strong>Job</strong> 类继承 <strong>QuartzJobBean</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJob1</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span>JobExecutionContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> JobExecutionException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestJob1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJob2</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span>JobExecutionContext jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> JobExecutionException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestJob2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置 <strong>Job</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JobDetail <span class="token function">testJob1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>TestJob1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"testJob1"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置名字为：testjob1</span>                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"hello quartz"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置 K-V 数据</span>                <span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 没有 Trigger 关联的时候任务是否被保留。因为创建 JobDetail 时，还没 Trigger 指向它，所以需要设置为 true ，表示保留</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Trigger <span class="token function">testJob1Trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleScheduleBuilder scheduleBuilder <span class="token operator">=</span> SimpleScheduleBuilder<span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 频率：间隙5s，及5s调度一次</span>                <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重复次数</span>        <span class="token keyword">return</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">testJob1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 该Trigger关联的Job</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"testJob1Trigger"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置名字为：testJob1Trigger</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>scheduleBuilder<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用scheduleBuilder作为调度</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JobDetail <span class="token function">testJob2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>TestJob2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"testJob2"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Trigger <span class="token function">testJob2Trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 基于 Quartz Cron 表达式的调度计划的构造器</span>        CronScheduleBuilder scheduleBuilder <span class="token operator">=</span> CronScheduleBuilder<span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/10 * * * * ? *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">testJob2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"testJob2Trigger"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>scheduleBuilder<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><em>配置文件</em></strong></li></ul><p>可以对<strong>Quartz</strong>进行配置</p><pre class=" language-yml"><code class="language-yml">spring:  # Quartz 的配置，对应 QuartzProperties 配置类  quartz:    job-store-type: memory # Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库。    auto-startup: true # Quartz 是否自动启动    startup-delay: 0 # 延迟 N 秒启动    wait-for-jobs-to-complete-on-shutdown: true # 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true    overwrite-existing-jobs: false # 是否覆盖已有 Job 的配置    properties: # 添加 Quartz Scheduler 附加属性，更多可以看 http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html 文档      org:        quartz:          threadPool:            threadCount: 25 # 线程池大小。默认为 10 。            threadPriority: 5 # 线程优先级            class: org.quartz.simpl.SimpleThreadPool # 线程池类型#    jdbc: # 这里暂时不说明，使用 JDBC 的 JobStore 的时候，才需要配置</code></pre><ul><li><strong><em>持久化</em></strong></li></ul><p>为什么要持久化？</p><p>当程序突然被中断时，如断电，内存超出时，很有可能造成任务的丢失。 可以将调度信息存储到数据库里面，进行持久化，当程序被中断后，再次启动，仍然会保留中断之前的数据，继续执行，而并不是重新开始</p><p>目前对于持久化先不深入，后续记录在进行学习</p><h3 id="xxl-job"><a href="#xxl-job" class="headerlink" title="xxl-job"></a>xxl-job</h3><h3 id="elastic-job"><a href="#elastic-job" class="headerlink" title="elastic-job"></a>elastic-job</h3><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>前端上传文件时，最常见的是利用<code>Form</code>表单来进行文件的上传功能，上传时设置<code>enctype</code>为<code>multipart/form-data</code>，在<code>SpringMvc</code>中提供了<code>MultipartFile</code>封装类来接收前端上传的文件，在<code>SpringBoot</code>中也使用这个封装类</p><p><code>Form</code>表单也可以设置<code>enctype</code>为<code>BASE64</code> ，这种方式在<code>Android/IOS/H5</code>等方面使用</p><p>默认情况下，不需要进行配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 是否支持批量上传   (默认值 true)</span><span class="token attr-name">spring.servlet.multipart.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 上传文件的临时目录 （一般情况下不用特意修改）</span><span class="token attr-name">spring.servlet.multipart.location</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># 上传文件最大为 1M （默认值 1M 根据自身业务自行控制即可）</span><span class="token attr-name">spring.servlet.multipart.max-file-size</span><span class="token punctuation">=</span><span class="token attr-value">1048576</span><span class="token comment" spellcheck="true"># 上传请求最大为 10M（默认值10M 根据自身业务自行控制即可）</span><span class="token attr-name">spring.servlet.multipart.max-request-size</span><span class="token punctuation">=</span><span class="token attr-value">10485760</span><span class="token comment" spellcheck="true"># 文件大小阈值，当大于这个阈值时将写入到磁盘，否则存在内存中，（默认值0 一般情况下不用特意修改）</span><span class="token attr-name">spring.servlet.multipart.file-size-threshold</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 判断是否要延迟解析文件（相当于懒加载，一般情况下不用特意修改）</span><span class="token attr-name">spring.servlet.multipart.resolve-lazily</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre><ul><li><strong><em>html测试页面</em></strong></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>单文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/file-upload/singleFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            文件1：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>批量文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/file-upload/multipleFiles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                文件1：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                文件2：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Base64文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/file-upload/base64File<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                BASE64编码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>base64<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li><strong><em>单文件上传</em></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/file-upload"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/singleFile"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">singleFile</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件类型:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名称:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件大小:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\file-upload-test\\"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"upload OK!!!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><em>多文件上传</em></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"multipleFiles"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">multipleFiles</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> MultipartFile<span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">==</span> null <span class="token operator">||</span> files<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"upload fail"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>MultipartFile file<span class="token operator">:</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\file-upload-test\\"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"upload OK!!!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong><em>base64文件上传</em></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"base64File"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">base64File</span><span class="token punctuation">(</span>String base64<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"base64,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> Base64Utils<span class="token punctuation">.</span><span class="token function">decodeFromString</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileCopyUtils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\file-upload-test\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"upload OK!!!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong>MultipartFile API</strong></li></ul><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getBytes() : byte[]</td><td>把文件的内容作为一个字节数组并返回</td></tr><tr><td>getContentType() : String</td><td>返回文件的内容类型</td></tr><tr><td>getInputStream() : InputStream</td><td>返回InputStream读取文件的内容</td></tr><tr><td>getName() : String</td><td>返回参数的名称多部分的形式</td></tr><tr><td>getOriginalFilename() : String</td><td>返回原来的文件名</td></tr><tr><td>getSize() : long</td><td>返回文件的大小,以字节为单位</td></tr><tr><td>isEmpty() : boolean</td><td>返回上传文件是否是空的,也就是说,上传文件时,并没有选择文件</td></tr><tr><td>transferTo(File dest) : void</td><td>接收到的文件转移到给定的目标文件</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot集成安全框架</title>
      <link href="/blog/2022/02/12/27.springboot-ji-cheng-an-quan-kuang-jia/"/>
      <url>/blog/2022/02/12/27.springboot-ji-cheng-an-quan-kuang-jia/</url>
      
        <content type="html"><![CDATA[<p>在java领域中有Spring Security和Apache Shiro等安全框架，本次记录中使用springboot来集成这两个框架</p><h2 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h2><p>shiro比spring security更轻量，功能更简单些</p><h3 id="能干啥"><a href="#能干啥" class="headerlink" title="能干啥"></a>能干啥</h3><p><img src="https://shiro.apache.org/images/ShiroFeatures.png"></p><ul><li><strong>Authentication</strong>：认证</li><li><strong>Authorization</strong>：授权</li><li><strong>Session Management</strong>：会话管理；特定于用户的会话管理，及shiro自带的session</li><li><strong>Cryptography</strong>：加密；对数据源使用加密算法加密</li></ul><hr><p>其他功能起支持和加强作用</p><ul><li>Web支持：很轻松保护web应用安全</li><li>缓存：能使shiro的安全操作快速和高效</li><li>并发：shiro支持多线程应用程序的并发特性</li><li>测试：支持单元测试和集成测试</li><li>“Run As”：允许用户切换身份(在许可的前提下)</li><li>Remember me：记住我功能；能使用户的登录状态不会因为浏览器的关闭而失效，直到Cookie过期</li></ul><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p><img src="https://shiro.apache.org/images/ShiroBasicArchitecture.png"></p><p>shiro中三个主要核心组件：</p><p><code>Subject</code>：表示主体，代表当前进行安全操作的对象，可以是用户，也可以是一个运行的程序</p><p><code>SecurityManager</code>：安全管理器，对所有Subject进行安全管理</p><p><code>Realm</code>：充当了应用与数据安全间的<strong>桥梁</strong>或<strong>连接器</strong>，本质为一个特定的安全 DAO</p><h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><ul><li><strong><u>引入依赖</u></strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><strong><u>自定义Realm类</u></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 授权操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 认证操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><u>配置shiro</u></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Realm <span class="token function">realm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyRealm realm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> realm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultSecurityManager <span class="token function">securityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">realm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">shiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShiroFilterFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">securityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置过滤器</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// filterMap.put("/toAdd","authc");</span>        bean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置URL</span>        bean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在shiroFilterFactoryBean方法中可以设置<strong>过滤器</strong>，实现对请求的拦截</p><p><code>filterMap.put(&quot;/toAdd&quot;,&quot;authc&quot;);</code>——对<code>/toAdd</code>请求，用户需要认证才能通过请求</p><p>shiro中<strong>常用</strong>的内置过滤器：</p><ul><li><code>anon</code> ：AnonymousFilter ：允许匿名访问，即不需要登录</li><li><code>authc</code>：FormAuthenticationFilter ：需要经过认证的用户才可以访问</li><li><code>logout</code> ：LogoutFilter ：被拦截的URL执行退出操作，退出完成后，<strong>重定向</strong>到 <code>GET loginUrl</code> 登录页面</li><li><code>roles</code> ：RolesAuthorizationFilter ：拥有指定角色的用户才能访问。</li><li><code>perms</code> ：PermissionsAuthorizationFilter ：拥有指定权限的用户才能访问</li></ul><p>在shiro中提供了5个注解对应上述5个过滤操作，这5个注解可以直接添加在 SpringMVC 的 URL 对应的方法上，实现权限配置</p><ul><li><code>@RequiresGuest</code>——&gt;<code>anon</code></li><li><code>@RequiresAuthentication</code> ——&gt;<code>authc</code></li><li><code>@RequiresUser</code>——&gt;<code>user</code></li><li><code>@RequiresRoles</code>——&gt;<code>roles</code></li><li><code>@RequiresPermissions</code>——&gt;<code>perms</code></li></ul><p>对其中的<code>@RequiresRoles</code>和<code>@RequiresPermissions</code>演示：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 属于 NORMAL 角色</span><span class="token annotation punctuation">@RequiresRoles</span><span class="token punctuation">(</span><span class="token string">"NORMAL"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 要同时拥有 ADMIN 和 NORMAL 角色</span><span class="token annotation punctuation">@RequiresRoles</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"ADMIN"</span><span class="token punctuation">,</span> <span class="token string">"NORMAL"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 拥有 ADMIN 或 NORMAL 任一角色即可</span><span class="token annotation punctuation">@RequiresRoles</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"ADMIN"</span><span class="token punctuation">,</span> <span class="token string">"NORMAL"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> logical <span class="token operator">=</span> Logical<span class="token punctuation">.</span>OR<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 拥有 user:add 权限</span><span class="token annotation punctuation">@RequiresPermissions</span><span class="token punctuation">(</span><span class="token string">"user:add"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 要同时拥有 user:add 和 user:update 权限</span><span class="token annotation punctuation">@RequiresPermissions</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"user:add"</span><span class="token punctuation">,</span> <span class="token string">"user:update"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 拥有 user:add 和 user:update 任一权限即可</span><span class="token annotation punctuation">@RequiresPermissions</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"user:add"</span><span class="token punctuation">,</span> <span class="token string">"user:update"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> logical <span class="token operator">=</span> Logical<span class="token punctuation">.</span>OR<span class="token punctuation">)</span></code></pre><hr><p>在shiroFilterFactoryBean方法中可以设置<strong>URL</strong></p><ul><li><code>setLoginUrl(String loginUrl)</code> 方法，设置登录 URL 。在 Shiro 中，约定 <code>GET loginUrl</code> 为登录页面，<code>POST loginUrl</code> 为登录请求</li><li><code>setSuccessUrl(String successUrl)</code> 方法，设置登录成功 URL 。在登录成功时，会<strong>重定向</strong>到该 URL 上</li><li><code>setUnauthorizedUrl(String unauthorizedUrl)</code> 方法，设置无权限的 URL 。在请求校验权限不通过时，会<strong>重定向</strong>到该 URL 上</li></ul><hr><ul><li><strong><u>实现认证和授权方法</u></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 授权操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*根据需要进行实现*/</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 认证操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*根据需要进行实现*/</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><u>在controller中调用shiro的login方法</u></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取subject</span>    Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用login方法，对用户进行认证</span>        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"账号不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>LockedAccountException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"帐号被锁定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>ExpiredCredentialsException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"帐号已过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="spring-security"><a href="#spring-security" class="headerlink" title="spring security"></a>spring security</h2><h3 id="能干啥-1"><a href="#能干啥-1" class="headerlink" title="能干啥"></a>能干啥</h3><ul><li>Comprehensive and extensible support for both Authentication and Authorization</li><li>Protection against attacks like session fixation, clickjacking, cross site request forgery, etc</li><li>Servlet API integration</li><li>Optional integration with Spring Web MVC</li><li>Much more…</li></ul><p>从官网介绍拷的，可以看出，能做认证、授权、防止会话固定、点击劫持、跨站点请求伪造等攻击，Servlet API的集成和可选择与springmvc集成等等</p><h3 id="集成-1"><a href="#集成-1" class="headerlink" title="集成"></a>集成</h3><ul><li><strong><u>引入依赖</u></strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><strong><u>启动应用</u></strong></li></ul><p>简单写个TestController后启动应用访问路径，会看到</p><p><img src="https://s6.jpg.cm/2022/02/12/L4AQ6e.png"></p><p>这是因为没有做配置，所以会被Spring Security拦截所有的请求，并跳转到登录界面，这个登录界面是<code>DefaultLoginPageGeneratingFilter</code>类生成的</p><ul><li><strong><u>springboot配置文件</u></strong></li></ul><p>可以在<code>application.yml</code>中添加Spring Security配置，对<code>spring.security.user</code>进行配置将会使<code>UserDetailsServiceAutoConfiguration</code>类基于配置的信息在内存中创建一个用户<code>User</code>；不对<code>spring.security.user</code>配置时，<code>UserDetailsServiceAutoConfiguration</code>类会自动在内存中创建一个用户名为 <code>&quot;user&quot;</code> ，密码为 UUID 随机的用户<code>User</code></p><pre class=" language-yml"><code class="language-yml">spring:  # Spring Security 配置项，对应 SecurityProperties 配置类  security:    # 配置默认的 InMemoryUserDetailsManager 的用户账号与密码。    user:      name: user # 账号      password: user # 密码      roles: ADMIN # 拥有角色</code></pre><ul><li><strong><u>SecurityConfig</u></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在内存中添加用户，使用InMemoryUserDetailsManager</span>        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// PasswordEncoder:密码编码器</span>            <span class="token comment" spellcheck="true">// BCryptPasswordEncoder:密码加密算法</span>            <span class="token comment" spellcheck="true">// 增加了两个用户 user-password-role</span>            <span class="token comment" spellcheck="true">// admin-admin-admin | normal-normal-normal</span>            <span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"normal"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 给URL授权</span>        <span class="token comment" spellcheck="true">// /test/hello 所有用户可以访问</span>        <span class="token comment" spellcheck="true">// /test/admin 需要admin角色</span>        <span class="token comment" spellcheck="true">// /test/normal 需要normal角色</span>        <span class="token comment" spellcheck="true">// 其他请求路径用户需要认证才能访问</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/test/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/test/admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/test/normal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"normal"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 设置 Form 表单登录</span>        <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// .loginPage("/login")  // 自定义登录路径</span>        <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// .logoutUrl("/logout") // 自定义登出路径</span>        <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>SecurityConfig</code>继承<code>WebSecurityConfigurerAdapter</code>抽象类，重写方法<code>configure(AuthenticationManagerBuilder auth)</code>和<code>configure(HttpSecurity http) </code>，两方法的作用分别为：构建<code>AuthenticationManager</code>(认证管理器)；配置 URL的<strong>权限控制</strong></p><p>在方法<code>configure(AuthenticationManagerBuilder auth)</code>中，除了使用<code>inMemoryAuthentication</code>外，Spring还内置了<code>JdbcUserDetailsManager</code>；在实际项目使用中，一般自定义实现的<code>UserDetailsService</code>实现类</p><hr><p>在方法<code>configure(HttpSecurity http)</code>中，有些权限控制的方法：</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>permitAll()</td><td>所有用户都能访问</td></tr><tr><td>denyAll()</td><td>所有用户都不能访问</td></tr><tr><td>authenticated()</td><td>登录用户可以访问</td></tr><tr><td>anonymous()</td><td>+不常用+；无需登录，即匿名用户可访问</td></tr><tr><td>rememberMe()</td><td>+不常用+；通过 remember me 登录的用户可访问</td></tr><tr><td>fullyAuthenticated()</td><td>+不常用+；非 remember me 登录的用户可访问</td></tr><tr><td>hasIpAddress(String ipaddressExpression)</td><td>+不常用+；指定 IP 表达式的用户可访问</td></tr><tr><td>hasRole(String role)</td><td>拥有指定角色的用户可访问</td></tr><tr><td>hasAnyRole(String… roles)</td><td>拥有指定任一角色的用户可访问</td></tr><tr><td>hasAuthority(String authority)</td><td>拥有指定权限(authority)的用户可访问</td></tr><tr><td>hasAuthority(String… authorities)</td><td>拥有指定任一权限(authority)的用户可访问</td></tr><tr><td>access(String attribute) 方法</td><td>当 Spring EL 表达式的执行结果为 true 时，可以访问</td></tr></tbody></table><p>与上述表格对应功能的是实现在controller上的注解，使用这些注解需要在<code>SecurityConfig</code>上加注解<code>@EnableGlobalMethodSecurity</code>，<code>@EnableGlobalMethodSecurity</code> 分别有<code>prePostEnabled</code> 、<code>securedEnabled</code>、<code>jsr250Enabled</code> 三个字段，其中每个字段代码是一种注解支持，默认为false，给值为true开启，看下面示例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 开启prePostEnabled注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>看下这些对应功能的注解：</p><ol><li>JSR-250注解<ul><li>@DenyAll——等同denyAll()，所有用户都不能访问</li><li>@RolesAllowed——等同hasAnyRole(String… roles)，拥有指定任一角色的用户可访问</li><li>@PermitAll——等同permitAll()，所有用户都能访问</li></ul></li><li>securedEnabled注解<ul><li>@Secured——需要用户具有对应的角色/权限才能访问，若用户没有对应角色/权限，将会拒绝访问将引发异常；同时不支持Spring EL表达式</li></ul></li><li>prePostEnabled注解，<strong>支持Spring EL表达式</strong><ul><li>@PreAuthorize——等同access(String attribute)方法，进入方法之前鉴权</li><li>@PostAuthorize——方法执行之后才鉴权</li><li>@PostFilter——在方法执行之后执行，而且这里可以调用方法的返回值，然后对返回值进行过滤或处理或修改并返回</li><li>@PreFilter——在方法执行之前执行，而且这里可以调用方法的参数，然后对参数值进行过滤或处理或修改</li></ul></li></ol><h3 id="角色继承"><a href="#角色继承" class="headerlink" title="角色继承"></a>角色继承</h3><p>当某角色想要拥有其他角色的权限时，比如vip用户应该拥有普通用户的权限，可以通过角色继承来实现</p><p>在<code>SecurityConfig</code>中加入</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>RoleHierarchy <span class="token function">roleHierarchy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    RoleHierarchyImpl roleHierarchy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoleHierarchyImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String hierarchy <span class="token operator">=</span> <span class="token string">"ROLE_dba > ROLE_admin \n ROLE_admin > ROLE_user"</span><span class="token punctuation">;</span>    roleHierarchy<span class="token punctuation">.</span><span class="token function">setHierarchy</span><span class="token punctuation">(</span>hierarchy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> roleHierarchy<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在上述代码中，ROLE_dba拥有ROLE_admin的权限，而ROLE_admin拥有ROLE_user的权限</p><p><strong>注意在Spring Boot2.0.8前，分隔符是用的空格</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>RoleHierarchy <span class="token function">roleHierarchy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    RoleHierarchyImpl roleHierarchy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoleHierarchyImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String hierarchy <span class="token operator">=</span> <span class="token string">"ROLE_dba > ROLE_admin ROLE_admin > ROLE_user"</span><span class="token punctuation">;</span>    roleHierarchy<span class="token punctuation">.</span><span class="token function">setHierarchy</span><span class="token punctuation">(</span>hierarchy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> roleHierarchy<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><h3 id="jwt的介绍"><a href="#jwt的介绍" class="headerlink" title="jwt的介绍"></a>jwt的介绍</h3><p>jwt，Json Web Token，是一种JSON风格的轻量级的授权和身份认证规范，可实现<strong>无状态</strong>、分布式的Web应用授权，授权主要通过数字签名的方式，以json对象为载体，在不同的服务终端之间安全的传输信息</p><p>解释下无状态：服务端不会保存任何客户端请求者的信息，客户端的每次请求须具备自描述信息，通过这些信息识别客户端身份</p><p>无状态带来的好处：</p><ul><li>减轻服务器的存储压力</li><li>方便进行集群化部署</li><li>客户端请求不需要访问到同一台服务器</li></ul><p>Token：令牌，使用token认证的优势和不足如下：</p><p>优势：</p><ul><li>无状态</li><li>有效避免CSRF攻击</li><li>适合移动端应用</li><li>单点登录友好</li></ul><p>不足：</p><ul><li>注销问题</li><li>续签问题</li><li>密码修改问题</li></ul><p>jwt作为一种规范，并没有和某一种语言绑定在一起，常用的Java实现是GitHub上的开源项目<strong>jjwt</strong></p><h3 id="jwt的组成"><a href="#jwt的组成" class="headerlink" title="jwt的组成"></a>jwt的组成</h3><p>jwt由三部分组成：Header（头部）、Payload（负载）、Signature（签名）</p><ul><li><p>Header：头部，通常头部有两部分信息：</p><ul><li>声明类型，这里是JWT</li><li>加密算法，自定义(rs256/base64/hs256)</li></ul><p>将会对头部进行Base64Url编码（可解码），得到第一部分数据</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span>    <span class="token string">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">,</span>    <span class="token string">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">}</span></code></pre><ul><li><p>Payload：载荷，就是有效数据，在官方文档中(RFC7519)，这里给了7个示例信息：</p><ul><li>iss (issuer)：表示签发人</li><li>exp (expiration time)：表示token过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p>这部分也会采用Base64Url编码，得到第二部分数据</p></li><li><p>Signature：签名，是整个数据的认证信息。这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分</p></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>简单写个单元测试来熟悉一下</p><ul><li><strong><u>引入依赖</u></strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><strong><u>写测试</u></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String secret <span class="token operator">=</span> <span class="token string">"www"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JwtBuilder builder <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jwtToken <span class="token operator">=</span> builder                <span class="token comment" spellcheck="true">//header</span>                <span class="token punctuation">.</span><span class="token function">setHeaderParam</span><span class="token punctuation">(</span><span class="token string">"typ"</span><span class="token punctuation">,</span><span class="token string">"JWT"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeaderParam</span><span class="token punctuation">(</span><span class="token string">"alg"</span><span class="token punctuation">,</span><span class="token string">"HS256"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//payload</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"admin-test"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//设置主题为admin-test</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置有效期为1天</span>                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//signature</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">,</span>secret<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//加盐secret组合加密</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//将三部分组合起来</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行看看</p><p><img src="https://s6.jpg.cm/2022/02/12/L4AdEy.png"></p><p>报错了，上网查找后发现是<strong>key不能太短 最短四个字符！！！</strong></p><p>把secret修改成4个字符以上，修改成”wwws”后再运行看看</p><p><img src="https://s6.jpg.cm/2022/02/12/L4A5xk.png"></p><p>成功得到token，可看出token的三部分，使用<code>.</code>分割的</p><pre class=" language-text"><code class="language-text">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRvbSIsInJvbGUiOiJhZG1pbiIsInN1YiI6ImFkbWluLXRlc3QiLCJleHAiOjE2NDQ1ODk4NDEsImp0aSI6Ijk2MDFjZWQ2LThmYjYtNDU2OS04NzRhLTE3YTFiMjJhZjUwZiJ9.lJ1eE-btWEvlc2Xvbts0ilctBzM6YikSrJHygzBkc4g</code></pre><ul><li><strong><u>写方法解析上述得到token</u></strong></li></ul><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String token <span class="token operator">=</span> <span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRvbSIsInJvbGUiOiJhZG1pbiIsInN1YiI6ImFkbWluLXRlc3QiLCJleHAiOjE2NDQ1ODk4NDEsImp0aSI6Ijk2MDFjZWQ2LThmYjYtNDU2OS04NzRhLTE3YTFiMjJhZjUwZiJ9.lJ1eE-btWEvlc2Xvbts0ilctBzM6YikSrJHygzBkc4g"</span><span class="token punctuation">;</span>        JwtParser parser <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Jws<span class="token operator">&lt;</span>Claims<span class="token operator">></span> claimsJws <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        Claims body <span class="token operator">=</span> claimsJws<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>运行看看结果，成功拿到token中的信息</p><p><img src="https://s6.jpg.cm/2022/02/12/L4Anwi.png"></p><h2 id="springsecurity-jwt"><a href="#springsecurity-jwt" class="headerlink" title="springsecurity + jwt"></a>springsecurity + jwt</h2><ul><li><strong><u>引入依赖</u></strong></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- security --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- jwt --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><strong><u>JwtTokenUtils</u></strong></li></ul><p><strong>TOKEN_HEADER</strong>的值是客户端发送请求的header中需要带的属性，<strong>TOKEN_PREFIX</strong>是发送客户端发送的token值需要加的前缀</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTokenUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TOKEN_HEADER <span class="token operator">=</span> <span class="token string">"Authorization"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TOKEN_PREFIX <span class="token operator">=</span> <span class="token string">"Bearer "</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SECRET <span class="token operator">=</span> <span class="token string">"jwtsecret"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Long EXPIRATION <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> 12L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//过期时间12小时</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ROLE <span class="token operator">=</span> <span class="token string">"role"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建token</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">createToken</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String role<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isRememberMe<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ROLE<span class="token punctuation">,</span> role<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> EXPIRATION <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> SECRET<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//从token中获取用户名(此处的token是指去掉前缀之后的)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        String username<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            username <span class="token operator">=</span> <span class="token function">getTokenBody</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            username <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserRole</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token function">getTokenBody</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ROLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Claims <span class="token function">getTokenBody</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>ExpiredJwtException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>UnsupportedJwtException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>MalformedJwtException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>SignatureException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>IllegalArgumentException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> claims<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//是否已过期</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isExpiration</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getTokenBody</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><u>security</u></strong></li></ul><p>先创建<strong>AjaxAuthenticationEntryPoint</strong>和<strong>AjaxAccessDeniedHandler</strong></p><p><strong>AjaxAuthenticationEntryPoint</strong>是未认证的处理点，及一个用户没登录就去点击一些需要登录才能访问的资源，这时请求会被直接拦到这个处理点在这儿处理</p><p><strong>AjaxAccessDeniedHandler</strong>是权限不足的处理器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>AuthenticationEntryPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxAuthenticationEntryPoint</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> AuthenticationException e<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"尚未登录，请登录！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>access<span class="token punctuation">.</span>AccessDeniedException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>access<span class="token punctuation">.</span>AccessDeniedHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxAccessDeniedHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> AccessDeniedException e<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"权限不足，请联系管理员！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再创建<strong>JwtAuthenticationTokenFilter</strong>，在这儿记录下我的理解，认证token的过滤器，当一个请求过来，先看请求的header中是否有<strong>TOKEN_HEADER</strong>属性，没有直接放行</p><p>有<strong>TOKEN_HEADER</strong>属性并且这个属性的值有<strong>TOKEN_PREFIX</strong>前缀就把前缀去掉，获得token，将token中存储的username拿出，进行登录验证，得到返回的<strong>userDetails</strong></p><p>在判断一下token是否过期，一般这里是封装一个验证方法，没过期就将信息放入到springsecurity的安全容器中，然后放行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>haichao<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JwtTokenUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>UsernamePasswordAuthenticationToken<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SecurityContextHolder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetails<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetailsService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span>WebAuthenticationDetailsSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>OncePerRequestFilter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDetailsService userDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String authHeader <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>JwtTokenUtils<span class="token punctuation">.</span>TOKEN_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> authHeader <span class="token operator">&amp;&amp;</span> authHeader<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>JwtTokenUtils<span class="token punctuation">.</span>TOKEN_PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String authToken <span class="token operator">=</span> authHeader<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>JwtTokenUtils<span class="token punctuation">.</span>TOKEN_PREFIX<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 或者写成</span>            <span class="token comment" spellcheck="true">// String authToken = authHeader.substring(JwtTokenUtils.TOKEN_PREFIX.length());</span>            String username <span class="token operator">=</span> JwtTokenUtils<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span>authToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> username <span class="token operator">&amp;&amp;</span> null <span class="token operator">==</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                UserDetails userDetails <span class="token operator">=</span> userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>JwtTokenUtils<span class="token punctuation">.</span><span class="token function">isExpiration</span><span class="token punctuation">(</span>authToken<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> null <span class="token operator">!=</span> userDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    UsernamePasswordAuthenticationToken authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> null<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    authentication<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetailsSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置<strong>SecurityConfig</strong></p><p><strong>@EnableWebSecurity</strong>是开启SpringSecurity的默认行为，它的上面有一个Import注解导入了WebSecurityConfiguration类，也就是说加上了@EnableWebSecurity这个注解，就是往IOC容器中注入了WebSecurityConfiguration这个类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AjaxAuthenticationEntryPoint ajaxAuthenticationEntryPoint<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AjaxAccessDeniedHandler ajaxAccessDeniedHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RoleMapper roleMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加入自定义的安全认证</span>        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//基于token，不需要session</span>                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span>SessionCreationPolicy<span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//所有请求都要求认证</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//动态权限配置</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//禁用缓存</span>                <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加jwt 登录授权过滤器</span>        http<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtAuthenticationTokenFilter<span class="token punctuation">,</span> UsernamePasswordAuthenticationFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加自定义未授权和未登录结果返回</span>        http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span>ajaxAccessDeniedHandler<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span>ajaxAuthenticationEntryPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不拦截的路径</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>WebSecurity web<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>                <span class="token string">"/register"</span><span class="token punctuation">,</span>                <span class="token string">"/login"</span><span class="token punctuation">,</span>                <span class="token string">"/logout"</span><span class="token punctuation">,</span>                <span class="token string">"/css/**"</span><span class="token punctuation">,</span>                <span class="token string">"/js/**"</span><span class="token punctuation">,</span>                <span class="token string">"/"</span><span class="token punctuation">,</span>                <span class="token string">"/index.html"</span><span class="token punctuation">,</span>                <span class="token string">"/login.html"</span><span class="token punctuation">,</span>                <span class="token string">"/register.html"</span><span class="token punctuation">,</span>                <span class="token string">"favicon.ico"</span><span class="token punctuation">,</span>                <span class="token string">"/doc.html"</span><span class="token punctuation">,</span>                <span class="token string">"/webjars/**"</span><span class="token punctuation">,</span>                <span class="token string">"/swagger-resources/**"</span><span class="token punctuation">,</span>                <span class="token string">"/v2/api-docs/**"</span><span class="token punctuation">,</span>                <span class="token string">"/captcha"</span><span class="token punctuation">,</span>                <span class="token string">"/ws/**"</span><span class="token punctuation">,</span>                <span class="token string">"/test/**"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实现userDetailsService接口的方法loadUserByUsername</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserDetailsService <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> username <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>Role<span class="token operator">></span> roles <span class="token operator">=</span> roleMapper<span class="token punctuation">.</span><span class="token function">findRoleByUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Collection set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Role role<span class="token operator">:</span>roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getRolename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                user<span class="token punctuation">.</span><span class="token function">setAuthorities</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> user<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">"用户名或密码不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><u>建表</u></strong></li></ul><p><img src="https://s6.jpg.cm/2022/02/12/L4AWU8.png"></p><p><img src="https://s6.jpg.cm/2022/02/12/L4Aejr.png"></p><p><img src="https://s6.jpg.cm/2022/02/12/L4AUou.png"></p><ul><li><strong><u>根据表创建po对象</u></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String rolename<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getRolename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rolename<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRolename</span><span class="token punctuation">(</span>String rolename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rolename <span class="token operator">=</span> rolename<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> authorities<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> authorities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthorities</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>authorities <span class="token operator">=</span> authorities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><u>mapper</u></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where username = #{username}"</span><span class="token punctuation">)</span>    User <span class="token function">findUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user(username,password) values(#{user.username},#{user.password})"</span><span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RoleMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select r.* from role r left join user_role ur on r.id=ur.rid"</span> <span class="token operator">+</span>            <span class="token string">" where ur.uid = #{uid}"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>Role<span class="token operator">></span> <span class="token function">findRoleByUserId</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><strong><u>LoginService</u></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserDetailsService userDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RoleMapper roleMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UsernamePasswordAuthenticationToken upToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDetails userDetails <span class="token operator">=</span> userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        String token <span class="token operator">=</span> JwtTokenUtils<span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Boolean <span class="token function">register</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> String username <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userMapper<span class="token punctuation">.</span><span class="token function">findUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BCryptPasswordEncoder encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String password <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><u>controller</u></strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoginService loginService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String login <span class="token operator">=</span> loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> login<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/register"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">register</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Boolean register <span class="token operator">=</span> loginService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>register<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"注册失败!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"注册成功!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAnyAuthority('admin')"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/admin"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是管理员"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/normal"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">normal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是普通用户"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong><u>静态资源</u></strong></li></ul><p>封装请求，目前不会vue，就简单用js封装一下，及请求路径不是<code>/login</code>时都会带上token，<strong>func</strong>是请求得到结果之后要执行的方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sendHttp</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>method<span class="token punctuation">,</span>data<span class="token punctuation">,</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> init <span class="token operator">=</span> <span class="token punctuation">{</span>        method <span class="token punctuation">:</span> method<span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"Content-type"</span> <span class="token punctuation">:</span> <span class="token string">"application/json;charset=utf-8"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> data<span class="token operator">===</span><span class="token keyword">null</span><span class="token operator">?</span> <span class="token keyword">null</span><span class="token punctuation">:</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">!=</span> <span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        init<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>index.html</p><p>这里跳转路径被难到了，超链接要跳转的资源是未被放行的，是需要认证后才能访问，但点击超链接发出的请求不知怎么改header，所有先用**write()**方法来覆盖当前页面</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a-test<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>page1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>toAdmin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#a-test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">sendHttp</span><span class="token punctuation">(</span><span class="token string">"/page1.html"</span><span class="token punctuation">,</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">sendHttp</span><span class="token punctuation">(</span><span class="token string">"/test/admin"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/sentHttp.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>login.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>formItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> formItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#formItem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> el <span class="token keyword">of</span> formItem<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                user<span class="token punctuation">[</span>el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> el<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">sendHttp</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">,</span>user<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span><span class="token string">"Bearer "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/sentHttp.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>register.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>formItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> formItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#formItem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> el <span class="token keyword">of</span> formItem<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                user<span class="token punctuation">[</span>el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> el<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">sendHttp</span><span class="token punctuation">(</span><span class="token string">"/register"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">,</span>user<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/sentHttp.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>page1.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>page1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>page1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li><strong><u>测试</u></strong></li></ul><p>在未登录的状态下点击page1，成功得到设置的结果</p><p><img src="https://s6.jpg.cm/2022/02/12/L4AVtC.png"></p><p>先进行登录</p><p><img src="https://s6.jpg.cm/2022/02/12/L4A80t.png"></p><p>再访问page1，成功的到达page1.html，注意，这里没有进行跳转，是将得到的结果重新覆盖主页</p><p>访问需要权限的接口**/test/admin**</p><p><img src="https://s6.jpg.cm/2022/02/12/L4AXLR.png"></p><p><img src="https://s6.jpg.cm/2022/02/12/L4AcUz.png"></p><p>后台抛出异常，这是因为登录的用户没有对应的权限，并且这个异常没有被<strong>AjaxAccessDeniedHandler</strong>处理，这里有点问题，需要进一步<strong>做统一异常处理</strong></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前处于初学阶段，对于springsecurity+jwt的使用也不太熟练，理解也不深，对于之后整合<strong>oauth2</strong>及单点登录需要水平在高一些再做</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot集成swagger</title>
      <link href="/blog/2022/02/03/26.springboot-ji-cheng-swagger/"/>
      <url>/blog/2022/02/03/26.springboot-ji-cheng-swagger/</url>
      
        <content type="html"><![CDATA[<p>随着前后端分离架构的流行，RESTful API的使用也越来越多，对于前端和后端的联系自然是API文档，而<strong>Swagger</strong> 框架是一个用于生成、描述、调用和可视化 RESTful 风格的 Web 服务，它可以轻松的集成到spring boot中</p><h2 id="Swagger2"><a href="#Swagger2" class="headerlink" title="Swagger2"></a>Swagger2</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>引入依赖</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>spring4all<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>swagger<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>使用别人整合Swagger的starter，在Maven仓库中1.9.0使用人数最多，<del>自己用了下最新的2.0以上，文档页面的请求404</del></p><ul><li>在spring boot主启动程序类加注解<code>@EnableSwagger2</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableSwagger2</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>加注解<code>@EnableSwagger2Doc</code>会报错，网上查询得出的结论是guava版本问题，目前该问题未解决</p><ul><li>swagger属性配置<ul><li><code>swagger.title</code>：标题</li><li><code>swagger.description</code>：描述</li><li><code>swagger.version</code>：版本</li><li><code>swagger.license</code>：许可证</li><li><code>swagger.licenseUrl</code>：许可证URL</li><li><code>swagger.termsOfServiceUrl</code>：服务条款URL</li><li><code>swagger.contact.name</code>：维护人</li><li><code>swagger.contact.url</code>：维护人URL</li><li><code>swagger.contact.email</code>：维护人email</li><li><code>swagger.base-package</code>：swagger扫描的基础包，默认：全扫描</li><li><code>swagger.base-path</code>：需要处理的基础URL规则，默认：/**</li></ul></li></ul><p>先不进行配置，采用swagger的属性的默认值，更多的配置属性请看：<a href="https://github.com/SpringForAll/spring-boot-starter-swagger">https://github.com/SpringForAll/spring-boot-starter-swagger</a></p><ul><li>启动应用，访问<code>http://localhost:8080/swagger-ui.html</code>，没啥问题就应该能看到接口文档页面</li></ul><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>针对pojo对象</p><ul><li><strong><code>@ApiModel</code>：</strong> 描述<code>POJO</code>对象</li><li><strong><code>@ApiModelProperty</code>：</strong> 描述<code>POJO</code>对象中的属性值</li></ul><p>针对API接口</p><ul><li><strong><code>@Api</code>：</strong> 描述<code>Controller</code></li><li><strong><code>@ApiIgnore</code>：</strong> 忽略当前<code>Controller</code>，指不对当前类做扫描</li><li><strong><code>@ApiOperation</code>：</strong> 描述<code>Controller</code>类中的<code>method</code>接口</li><li><strong><code>@ApiParam</code>：</strong> 单个参数描述，与<code>@ApiImplicitParam</code>不同的是，他是写在参数左侧的。如**<code>@ApiParam(name = &quot;username&quot;,value = &quot;用户名&quot;) String username</code>**</li><li><strong><code>@ApiImplicitParam</code>：</strong> 描述<code>method</code>接口中单个参数信息</li><li><strong><code>@ApiImplicitParams</code>：</strong> 描述<code>method</code>接口中多个参数信息</li><li><strong><code>@ApiResponse</code>：</strong> 描述一个HTTP响应</li><li><strong><code>@ApiResponses</code>：</strong> 描述多个HTTP响应</li><li><strong><code>@ApiError</code>：</strong> 接口错误所返回的信息</li></ul><p>对之前的RESTful风格做的练习添加一下swagger的注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"用户实体"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"用户id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"用户密码"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 省略 getter and setter */</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"用户管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"获取用户列表"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>paramType <span class="token operator">=</span> <span class="token string">"path"</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"用户编号"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"获取用户信息"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"根据id来获取用户信息"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"创建用户"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"根据User对象来创建用户"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"更新用户信息"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"根据User对象的id来更新用户信息"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"删除用户"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"根据id删除用户"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://s6.jpg.cm/2022/02/14/L4ptXS.png"></p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>swagger提供调试接口的功能，点击具体接口后点击Try it out，若需要Parameters（参数），在输入框中输入具体参数，之后点击Execute，最后看Response body是否返回预定结果值</p><h3 id="接口分组与排序"><a href="#接口分组与排序" class="headerlink" title="接口分组与排序"></a>接口分组与排序</h3><p><code>@Api</code>注解中属性tags的值为一个分组，同时tags属性是个<strong>数组</strong>类型，及可以将多个接口<strong>合并起来</strong>，对于<code>@ApiOperation</code>注解中的<code>tags</code>属性可以做到更细的接口分类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"学生管理"</span><span class="token punctuation">,</span><span class="token string">"教学管理"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 接口方法 */</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"教师管理"</span><span class="token punctuation">,</span><span class="token string">"教学管理"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"teachers"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 接口方法 */</span><span class="token punctuation">}</span></code></pre><p>上述代码段产生的API文档在学生管理分组中有StudentController的所有接口方法，在教师管理分组中有TeacherController的所有接口方法，在教学管理分组中有StudentController和TeacherController中的所有接口方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"学生管理"</span><span class="token punctuation">,</span><span class="token string">"教学管理"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 接口方法 */</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"教师管理"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"teachers"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 接口方法 */</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"获取教师列表"</span><span class="token punctuation">,</span> tags <span class="token operator">=</span> <span class="token string">"教学管理"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> <span class="token function">getTeachers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> TeacherMapper<span class="token punctuation">.</span><span class="token function">getAllTeacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"创建教师"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"根据Teacher对象来创建教师"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addTeacher</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Teacher teacher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> TeacherMapper<span class="token punctuation">.</span><span class="token function">addTeacher</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述代码段产生的API文档中教学管理分组中有StudentController中所有接口方法和TeacherController中的getTeachers接口方法</p><hr><p>对于<strong>分组的排序</strong>（对Tags排序），Swagger只提供了一种方法alpha，按照字母顺序排列，那么我们怎么实现对分组进行排序？根据别人的经验：按照使用方式的定义来排序，比如给Tags加编号</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"1-学生管理"</span><span class="token punctuation">,</span><span class="token string">"3-教学管理"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 接口方法 */</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"2-教师管理"</span><span class="token punctuation">,</span><span class="token string">"3-教学管理"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"teachers"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 接口方法 */</span><span class="token punctuation">}</span></code></pre><p>对于<strong>同一分组内各个接口先后顺序的排序</strong>，由于本次记录中使用的是别人整合的Starter，直接加配置</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">swagger.ui-config.operations-sorter</span><span class="token punctuation">=</span><span class="token attr-value">alpha</span></code></pre><p>该属性值有<code>alpha</code>和<code>method</code>（默认值是alpha），两个值分别表示按字母表排序；按方法定义顺序排序</p><p>对于<strong>实体的参数的排序</strong>，实体参数也是默认按照字母表排序，想要自定义排序可以对<code>@ApiModelProperty</code>注解中<code>position</code>属性赋值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"用户实体"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户id"</span><span class="token punctuation">,</span> position <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span> position <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户密码"</span><span class="token punctuation">,</span> position <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 省略 getter and setter */</span><span class="token punctuation">}</span></code></pre><h3 id="生成静态文档"><a href="#生成静态文档" class="headerlink" title="生成静态文档"></a>生成静态文档</h3><p>每次查看Swagger文档都需要启动应用，而在有些情况下，我们只需要提供<strong>静态文档</strong>给其他成员时，可以使用<strong>Swagger2Markup</strong>来生成静态文档</p><p>使用<strong>Swagger2Markup</strong>来生成静态文档有两种方式</p><ol><li>写单元测试用例来生成</li><li>通过Maven插件来生成</li></ol><p>那么依照简单原则，在本次记录中就通过Maven插件来生成</p><ul><li>首先在pom文件中加入插件</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- swagger2markup插件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.swagger2markup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger2markup-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swaggerInput</span><span class="token punctuation">></span></span>http://localhost:8080/v2/api-docs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swaggerInput</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDir</span><span class="token punctuation">></span></span>src/docs/asciidoc/generated<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDir</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2markup.markupLanguage</span><span class="token punctuation">></span></span>ASCIIDOC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2markup.markupLanguage</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 调整swagger2markup插件仓库的坐标 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>spring-plugins-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://repo.spring.io/plugins-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span></code></pre><ul><li>在maven的settings.xml中加入一个镜像</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/jcenter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><ul><li>先启动应用，再点击swagger2markup插件</li></ul><p><img src="https://s6.jpg.cm/2022/02/14/L4pSa2.png"></p><ul><li>将生成的AsciiDoc文档转成Html</li></ul><p>先在pom中加入插件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- AsciiDoc转成Html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.asciidoctor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>asciidoctor-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceDirectory</span><span class="token punctuation">></span></span>src/docs/asciidoc/generated<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sourceDirectory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">></span></span>src/docs/asciidoc/html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>backend</span><span class="token punctuation">></span></span>html5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>backend</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attributes</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--导航栏在左--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>toc</span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>toc</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--显示层级数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>toclevels</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>toclevels</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--自动打数字序号--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sectnums</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sectnums</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre><p>点击插件的<code>asciidoctor:process-asciidoc</code>命令</p><p><img src="https://s6.jpg.cm/2022/02/14/L4preH.png"></p><p>除了将AsciiDoc转成Html外，也可以将AsciiDoc转成pdf，通过修改插件的<code>&lt;backend&gt;html5&lt;/backend&gt;</code>为<code>&lt;backend&gt;pdf&lt;/backend&gt;</code></p><p>后再引入<code>asciidoctorj-pdf</code>的依赖就可以了</p><ul><li>生成单一文档</li></ul><p>上述操作之后生成的文档有4个，是分散的，那么怎么将其合并：将swagger2markup插件中的<code>&lt;outputDir&gt;src/docs/asciidoc/generated&lt;/outputDir&gt;</code>改成<code>&lt;outputFile&gt;src/docs/asciidoc/generated/all&lt;/outputFile&gt;</code></p><p>修改依赖后点击重新导入依赖，在生成文档</p><p><img src="https://s6.jpg.cm/2022/02/14/L4pNvW.png"></p><p>点击all.html可以看到静态文档，但默认文档是英文，可以在swagger2markup插件中添加配置</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- swagger2markup插件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.swagger2markup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger2markup-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swaggerInput</span><span class="token punctuation">></span></span>http://localhost:8080/v2/api-docs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swaggerInput</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputFile</span><span class="token punctuation">></span></span>src/docs/asciidoc/generated/all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputFile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2markup.markupLanguage</span><span class="token punctuation">></span></span>ASCIIDOC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2markup.markupLanguage</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2markup.outputLanguage</span><span class="token punctuation">></span></span>ZH<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2markup.outputLanguage</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2markup.generatedExamplesEnabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2markup.generatedExamplesEnabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2markup.inlineSchemaEnabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2markup.inlineSchemaEnabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2markup.pathsGroupedBy</span><span class="token punctuation">></span></span>TAGS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2markup.pathsGroupedBy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre><ul><li><code>swagger2markup.markupLanguage</code>：输出格式，比如：AsciiDoc、Markdown、Confluence</li><li><code>swagger2markup.outputLanguage</code>：生成文档的语言类型：如中文（ZH），默认英语（EN）</li><li><code>swagger2markup.generatedExamplesEnabled</code>：指定是否应该生成HTTP请求和响应示例，默认false</li><li><code>swagger2markup.inlineSchemaEnabled</code>：是否启用参数内联</li><li><code>swagger2markup.pathsGroupedBy</code>：api排序规则，一般用tags排序</li></ul><h2 id="Swagger2依赖引入汇总"><a href="#Swagger2依赖引入汇总" class="headerlink" title="Swagger2依赖引入汇总"></a>Swagger2依赖引入汇总</h2><p>上述Swagger2记录中的依赖引入有些分散，在此汇总一下</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 整合的swagger starter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spring4all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- swagger2markup插件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.swagger2markup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger2markup-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swaggerInput</span><span class="token punctuation">></span></span>http://localhost:8080/v2/api-docs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swaggerInput</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputFile</span><span class="token punctuation">></span></span>src/docs/asciidoc/generated/all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputFile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2markup.markupLanguage</span><span class="token punctuation">></span></span>ASCIIDOC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2markup.markupLanguage</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2markup.outputLanguage</span><span class="token punctuation">></span></span>ZH<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2markup.outputLanguage</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2markup.generatedExamplesEnabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2markup.generatedExamplesEnabled</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2markup.inlineSchemaEnabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2markup.inlineSchemaEnabled</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger2markup.pathsGroupedBy</span><span class="token punctuation">></span></span>TAGS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger2markup.pathsGroupedBy</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- AsciiDoc转成Html --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.asciidoctor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>asciidoctor-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceDirectory</span><span class="token punctuation">></span></span>src/docs/asciidoc/generated<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sourceDirectory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">></span></span>src/docs/asciidoc/html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>backend</span><span class="token punctuation">></span></span>html5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>backend</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attributes</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--导航栏在左--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>toc</span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>toc</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--显示层级数--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>toclevels</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>toclevels</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--自动打数字序号--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sectnums</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sectnums</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attributes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 调整swagger2markup插件仓库的坐标 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>spring-plugins-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://repo.spring.io/plugins-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span></code></pre><h2 id="Swagger3"><a href="#Swagger3" class="headerlink" title="Swagger3"></a>Swagger3</h2><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ul><li>引入依赖</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>swagger配置</li></ul><p>先采用默认值，不进行配置</p><ul><li>加注解<code>@EnableOpenApi</code></li><li>启动应用，访问<code>http://localhost:8080/swagger-ui</code></li></ul><p>可以看到文档页面访问成功，对于swagger3很轻松的就集成成功，并且使用也十分简单</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>先不对全局进行配置，先配置一些简单的，目前这些够用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swagger3Config</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>OAS_30<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Swagger3接口文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"疑问请咨询服务开发者haichao"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"haichao"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Knife4j"><a href="#Knife4j" class="headerlink" title="Knife4j"></a>Knife4j</h3><p>Knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案，前身是swagger-bootstrap-ui，取名knife4j是希望她能像一把匕首一样小巧，轻量，并且功能强悍</p><p>下面来看看怎么使用</p><ul><li>引入依赖</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>访问<code>http://localhost:8080/doc.html</code></li></ul><p><img src="https://s6.jpg.cm/2022/02/14/L4pHZh.png"></p><h3 id="利用Knife4j生成离线文档"><a href="#利用Knife4j生成离线文档" class="headerlink" title="利用Knife4j生成离线文档"></a>利用Knife4j生成离线文档</h3><p><img src="https://s6.jpg.cm/2022/02/14/L4pssL.png"></p><h3 id="Swagger3全局参数配置"><a href="#Swagger3全局参数配置" class="headerlink" title="Swagger3全局参数配置"></a>Swagger3全局参数配置</h3><p>Swagger3中增加了一些全局参数的配置，如生成全局的参数和通用的响应信息，目前水平还用不上，故先略过</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>除了Swagger外，还有更多API管理系统，如<strong>YApi</strong>、<strong>eolinker</strong>、<strong>ShowDoc</strong> 等等，具体选择需要根据团队需求出发</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用RESTful风格</title>
      <link href="/blog/2022/01/29/25.shi-yong-restful-feng-ge/"/>
      <url>/blog/2022/01/29/25.shi-yong-restful-feng-ge/</url>
      
        <content type="html"><![CDATA[<p>REST，Representational State Transfer，<strong>表现层状态转化</strong>。</p><h2 id="REST介绍"><a href="#REST介绍" class="headerlink" title="REST介绍"></a>REST介绍</h2><p>REST是一种软件架构风格，是一种设计风格，不是一种<strong>必须的标准</strong></p><p>其具有的特点：</p><ul><li>以资源为基础</li></ul><p>资源可以是<strong>对象数据</strong>，及一种资源可以是一个单体对象，一个集合，通常用JSON当作载体；同时资源也可以是<strong>二进制数据</strong>，及一种资源可以是图片、视频、音乐等等。概括总结的话，资源就是网络上的实体对象</p><ul><li>统一接口</li></ul><p>RESTful风格的接口，如<code>/classes</code>只能定位资源，而无法知道对资源进行了什么操作。想知道发生了什么操作需要具体分析<strong>HTTP请求方法</strong></p><ul><li>URL指向资源</li></ul><p>资源可能由一个或多个URL对应，而一个URL只能对应一个资源</p><ul><li>无状态</li></ul><p>服务器不会保存客户端的信息，每次客户端发送的请求会包含所有必须的状态信息，这样对于资源的操作是<strong>没有上下文的影响</strong></p><h2 id="REST-API设计规范"><a href="#REST-API设计规范" class="headerlink" title="REST API设计规范"></a>REST API设计规范</h2><h3 id="HTTP动作"><a href="#HTTP动作" class="headerlink" title="HTTP动作"></a>HTTP动作</h3><table><thead><tr><th>HTTP请求方法</th><th></th></tr></thead><tbody><tr><td>GET</td><td>查询资源</td></tr><tr><td>POST</td><td>新建资源</td></tr><tr><td>PUT</td><td>更新资源</td></tr><tr><td>DELETE</td><td>删除资源</td></tr><tr><td>PATCH</td><td>部分更新（用的很少）</td></tr></tbody></table><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>通常RESTful API的path为</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>version<span class="token operator">/</span>resources<span class="token operator">/</span>resource_id</code></pre><ul><li>version : API的版本号</li><li>resources : 资源</li><li>resources_id : 资源id</li></ul><p>资源也可以包含子资源</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*某个班级下的所有老师*/</span><span class="token operator">/</span>classes<span class="token operator">/</span><span class="token number">1</span><span class="token operator">/</span>teachers</code></pre><p>当增删改查不能满足业务时，可在路径上加上action</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>version<span class="token operator">/</span>resources<span class="token operator">/</span>resource_id<span class="token operator">/</span>action</code></pre><p><strong>接口命名规范</strong></p><ul><li>接口是表示资源，因此不使用动词，使用名词，而且用名词的复数形式，如<code>/classes</code></li><li>所有单词使用英语小写，不使用大写</li><li>连字符用中杠<code>-</code>，不使用下杠<code>_</code></li></ul><h3 id="过滤信息"><a href="#过滤信息" class="headerlink" title="过滤信息"></a>过滤信息</h3><p>当查询时需要特殊条件时，使用URL参数的方式</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>classes<span class="token operator">?</span>name<span class="token operator">=</span><span class="token number">19</span>级<span class="token number">1</span>班</code></pre><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p><strong>状态码范围：</strong></p><pre class=" language-java"><code class="language-java">1xx：相关信息2xx：操作成功3xx：重定向4xx：客户端错误5xx：服务器错误</code></pre><table><thead><tr><th>2xx：成功</th><th>3xx：重定向</th><th>4xx：客户端错误</th><th>5xx：服务器错误</th></tr></thead><tbody><tr><td>200 查询成功</td><td>301 永久重定向</td><td>400 错误请求</td><td>500 服务器错误</td></tr><tr><td>201 创建或更新成功</td><td>304 资源未修改</td><td>401 未授权</td><td>502 网关错误</td></tr><tr><td>202 请求进入后台排队（异步）</td><td></td><td>403 禁止访问</td><td>504 网关超时</td></tr><tr><td>204 用户删除成功</td><td></td><td>404 未找到</td><td></td></tr><tr><td></td><td></td><td>405 请求方法不对</td><td></td></tr><tr><td></td><td></td><td>406 请求格式不可得</td><td></td></tr><tr><td></td><td></td><td>410 请求资源被永久删除</td><td></td></tr><tr><td></td><td></td><td>422 创建对象时发生验证错误</td><td></td></tr></tbody></table><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>简单的练练，建立一个web项目，用的spring boot</p><p>结构：po，mapper，controller</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*省略getter and setter*/</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id}"</span><span class="token punctuation">)</span>    User <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user(username,password) values(#{user.username},#{user.password})"</span><span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update user set username=#{user.username},password=#{user.password} where id = #{user.id}"</span><span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from user where id = #{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用<strong>MockMvc</strong>进行测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserControllerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MockMvc mvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> WebApplicationContext webApplicationContext<span class="token punctuation">;</span>    <span class="token keyword">private</span> RequestBuilder request<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mvc <span class="token operator">=</span> MockMvcBuilders<span class="token punctuation">.</span><span class="token function">webAppContextSetup</span><span class="token punctuation">(</span>webApplicationContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        request <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/users/1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MvcResult result <span class="token operator">=</span> mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        request <span class="token operator">=</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"{\"username\":\"haichao\",\"password\":\"333\"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        request <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"{\"id\":1,\"username\":\"www\",\"password\":\"333\"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        request <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"/users/1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意，有些函数报错是需要引用对应的静态函数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span>Matchers<span class="token punctuation">.</span>equalTo<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span>MockMvcRequestBuilders<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span>MockMvcResultMatchers<span class="token punctuation">.</span>content<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span>MockMvcResultMatchers<span class="token punctuation">.</span>status<span class="token punctuation">;</span></code></pre><h3 id="MockMvc介绍"><a href="#MockMvc介绍" class="headerlink" title="MockMvc介绍"></a>MockMvc介绍</h3><p>MockMvc可以用来模拟客户端请求，用于测试</p><h3 id="MockMvc使用"><a href="#MockMvc使用" class="headerlink" title="MockMvc使用"></a>MockMvc使用</h3><ul><li>引入依赖</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><ul><li>实例化MockMvc<ul><li>主要由两个实现：<strong>StandaloneMockMvcBuilder</strong>和<strong>DefaultMockMvcBuilder</strong></li><li>也可以直接使用<strong>静态工厂MockMvcBuilders创建</strong>即可，不需要直接使用上面两个实现类</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 实例化方式1 通过参数指定控制器，这样就不需要从上下文获取</span>    mvc <span class="token operator">=</span> MockMvcBuilders<span class="token punctuation">.</span><span class="token function">standaloneSetup</span><span class="token punctuation">(</span>UserController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实例化方式2 指定WebApplicationContext，将会从该上下文获取相应的控制器并得到相应的MockMvc</span>    mvc <span class="token operator">=</span> MockMvcBuilders<span class="token punctuation">.</span><span class="token function">webAppContextSetup</span><span class="token punctuation">(</span>webApplicationContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>相关API<ul><li><code>perform()</code> 执行一个MockMvcRequestBuilders请求</li><li><code>andExpect()</code>添加MockMvcResultMatcher验证规则，验证控制器执行完成后结果是否正确</li><li><code>andDo()</code>添加 MockMvcResultHandlers结果处理器，比如调试时打印结果到控制台</li><li><code>andReturn()</code>返回相应的MvcResult，然后进行自定义验证/进行下一步的异步处理</li></ul></li><li>常用测试——&gt;网上关键词搜索</li></ul><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><ul><li>测试类的包路径要和springboot的主启动程序类的路径相同或在下级目录中</li><li><code>@Test</code>注解导入包是<code>import org.junit.Test;</code>而不是<code>import org.junit.jupiter.api.Test;</code></li><li>使用实例化方式1<code>standaloneSetup</code>创建MockMvc会报空指针异常，该问题未解决</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>RESTful只是一种风格，而不是一种标准或约束，在使用中按照具体项目需求进行更改，过分追求完美的RESTful会使成本大大增加</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练习之RBAC简单权限</title>
      <link href="/blog/2022/01/15/24.lian-xi-zhi-rbac-jian-dan-quan-xian/"/>
      <url>/blog/2022/01/15/24.lian-xi-zhi-rbac-jian-dan-quan-xian/</url>
      
        <content type="html"><![CDATA[<p>RBAC，Role-Based Access Control，基于角色的访问控制</p><p>RBAC模型的核心是在用户和权限之间引入了角色的概念，取消了用户和权限的直接关联，改为<strong>通过用户关联角色、角色关联权限的方法来间接地赋予用户权限</strong>，从而达到用户和权限解耦的目的</p><p>本次练习<strong>粗略的实现</strong>基于RBAC的简单权限系统</p><h2 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h2><p>总共5张表，分别为user，role，user_role，permission，role_permission</p><p>user字段为：id，username，password</p><p>role字段为：id，role_name</p><p>user_role字段为：uid，rid（联合主键）</p><p>permission字段为：id，permission_name</p><p>role_permission字段为：rid，pid（联合主键）</p><p>其中role表数据为：</p><table><thead><tr><th>id</th><th>role_name</th></tr></thead><tbody><tr><td>1</td><td>admin</td></tr><tr><td>2</td><td>common</td></tr></tbody></table><p>permission表数据为：</p><table><thead><tr><th>id</th><th>permission_name</th></tr></thead><tbody><tr><td>1</td><td>user:query</td></tr><tr><td>2</td><td>user:insert</td></tr><tr><td>3</td><td>user:delete</td></tr><tr><td>4</td><td>user:update</td></tr></tbody></table><p>然后是admin有所有权限，common有user:query权限</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>采用spring boot实现，刚开始包结构为po，mapper，service，controller，utils</p><p>要实现的需求为：用户登录的过程中进行认证、授权，使用功能进行鉴权</p><h3 id="封装响应类"><a href="#封装响应类" class="headerlink" title="封装响应类"></a>封装响应类</h3><p>在utils包下封装响应类，一个是状态码的枚举，一个是BaseResponse类（我简写成R）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> RespCode <span class="token punctuation">{</span>    <span class="token function">Success</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Fail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token function">RespCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> List data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">R</span><span class="token punctuation">(</span>RespCode respCode<span class="token punctuation">,</span>List data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> respCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> respCode<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> R <span class="token function">out</span><span class="token punctuation">(</span>RespCode respCode<span class="token punctuation">,</span>List data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span>respCode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>List data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p><strong>认证，Identification</strong>：根据声明者持有的特定信息，来确认声明者的身份</p><p>在LoginController中</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> R <span class="token function">login</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserNameIsEmptyException</span><span class="token punctuation">(</span><span class="token string">"用户名为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        User needUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>needUser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserNotFindException</span><span class="token punctuation">(</span><span class="token string">"用户没有找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>needUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PasswordIsNotCorrectException</span><span class="token punctuation">(</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//认证结束后，将username存入到session中</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>RespCode<span class="token punctuation">.</span>Success<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p><strong>授权，Authorization</strong>：简单来说，资源所有者给予执行者权限</p><p>在这个练习中，授权就是在认证结束后，查询角色后存入到session中，查询权限存入到session中</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在login方法中认证结束后进行授权</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> R <span class="token function">login</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">,</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  ......</span>    <span class="token comment" spellcheck="true">//认证结束后，将username存入到session中</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//授权</span>    List<span class="token operator">&lt;</span>Role<span class="token operator">></span> roles <span class="token operator">=</span> roleService<span class="token punctuation">.</span><span class="token function">getRolesByUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Permission<span class="token operator">></span> permissions <span class="token operator">=</span> permissionService<span class="token punctuation">.</span><span class="token function">getPermissionsByUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> roleStr <span class="token operator">=</span> roles<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Role<span class="token operator">:</span><span class="token operator">:</span>getRole_name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> permissionStr <span class="token operator">=</span> permissions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Permission<span class="token operator">:</span><span class="token operator">:</span>getPermission_name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"roles"</span><span class="token punctuation">,</span>roleStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"permissions"</span><span class="token punctuation">,</span>permissionStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>RespCode<span class="token punctuation">.</span>Success<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关于list.stream().map()是java8的新特性，按我目前理解是将对象的属性提取出来后再存入到list中，以后有时间重点详解一下这个API</p><h3 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h3><p><strong>鉴权，Authentication</strong>：对声明者的权限进行鉴别</p><p>在本次练习中，使用aop来实现鉴权</p><p>在UserController中，我想对增加用户做权限限制</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/addUser"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@HasPermission</span><span class="token punctuation">(</span><span class="token string">"user:add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">addUser</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">,</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userService<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>RespCode<span class="token punctuation">.</span>Success<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建自定义注解@HasPermission</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">HasPermission</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建切面PermissionAop</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionAop</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//环绕通知</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.haichao.core.annotation.HasPermission)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在切面中获取session</span>        ServletRequestAttributes sra <span class="token operator">=</span> <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpSession session <span class="token operator">=</span> sra<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拿到权限</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> permissions <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"permissions"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取切入点注解的值</span>        <span class="token comment" spellcheck="true">//joinPoint getTarget是获取类, getSignature是获取签名然后转成方法签名</span>        HasPermission annotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>HasPermission<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String needPermission <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//鉴权</span>        <span class="token keyword">boolean</span> contains <span class="token operator">=</span> permissions<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>needPermission<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>contains<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotHasPermissionException</span><span class="token punctuation">(</span><span class="token string">"没有权限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//调用原有方法</span>        Object returnObj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            returnObj <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> returnObj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="抽离认证和授权"><a href="#抽离认证和授权" class="headerlink" title="抽离认证和授权"></a>抽离认证和授权</h3><p>认证和授权都放在login方法中，当我们想在下个项目中使用这套权限管理时会显得不便，那我们是否可以将其抽离出来，形成类似于框架那种效果</p><p>为此在本次练习中创建core包用于放权限管理的核心代码</p><ol><li>首先将自定义注解、切面、自定义异常放入core包中</li><li>始终要明确core包中的内容不能调用外部资源，而外部用户是可以使用core包中的东西（类似于框架是不能调用使用者编写的代码，而使用者是利用框架来带来便利）</li></ol><p>在core包中创建一个类<strong>Subject</strong>，充当主体</p><p>因为不能够调用外部资源，po包中的类需要另外创建，因此创建了一个<strong>token</strong>和一个<strong>info</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserNameAndPasswordToken</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserNameAndPasswordToken</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// getter and setter</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionInfo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> roles<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> permissions<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PermissionInfo</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> roles<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roles <span class="token operator">=</span> roles<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>permissions <span class="token operator">=</span> permissions<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">PermissionInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//getter and setter</span><span class="token punctuation">}</span></code></pre><p>然后开始抽离，这时会遇到问题，既然core包中的类不能调用外部资源，那么怎么调用各种service类是个问题，为此，需要在core包中创建一个接口，该接口的作用是让使用者来实现这个接口，让使用者来调用自己创建的各种service</p><p>创建Realm接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Realm</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 认证</span>    UserNameAndPasswordToken <span class="token function">identification</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 授权</span>    PermissionInfo <span class="token function">authorization</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>完善Subject</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Realm realm<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Realm myRealm<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        myRealm <span class="token operator">=</span> realm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 认证</span>        UserNameAndPasswordToken token <span class="token operator">=</span> myRealm<span class="token punctuation">.</span><span class="token function">identification</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PasswordIsNotCorrectException</span><span class="token punctuation">(</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 授权</span>        <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"roles"</span><span class="token punctuation">,</span>myRealm<span class="token punctuation">.</span><span class="token function">authorization</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"permissions"</span><span class="token punctuation">,</span>myRealm<span class="token punctuation">.</span><span class="token function">authorize</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HttpSession <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletRequestAttributes sra <span class="token operator">=</span> <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sra<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>认证和授权的抽离基本结束</p><p>解释一下：因为login方法是static，因此无法使用realm变量，需要一个静态变量，因此创建静态变量myRealm，而myRealm无法注入，需要一些其他方法的帮助，为此写了init方法，而@PostConstruct注解的作用是：当Subject类注入到容器结束时，调用有该注解的方法。这样myRealm通过init方法将会有值</p><h3 id="实现Realm接口"><a href="#实现Realm接口" class="headerlink" title="实现Realm接口"></a>实现Realm接口</h3><p>在正式使用core中的内容时，要先实现Realm接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRealm</span> <span class="token keyword">implements</span> <span class="token class-name">Realm</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RoleService roleService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> PermissionService permissionService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserNameAndPasswordToken <span class="token function">identification</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserNameIsEmptyException</span><span class="token punctuation">(</span><span class="token string">"用户名为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserNotFindException</span><span class="token punctuation">(</span><span class="token string">"用户没用找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserNameAndPasswordToken</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PermissionInfo <span class="token function">authorization</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Role<span class="token operator">></span> roles <span class="token operator">=</span> roleService<span class="token punctuation">.</span><span class="token function">getRolesByUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Permission<span class="token operator">></span> permissions <span class="token operator">=</span> permissionService<span class="token punctuation">.</span><span class="token function">getPermissionsByUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> roleStr <span class="token operator">=</span> roles<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Role<span class="token operator">:</span><span class="token operator">:</span>getRole_name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> permissionStr <span class="token operator">=</span> permissions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Permission<span class="token operator">:</span><span class="token operator">:</span>getPermission_name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PermissionInfo permissionInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PermissionInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        permissionInfo<span class="token punctuation">.</span><span class="token function">setRoles</span><span class="token punctuation">(</span>roleStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        permissionInfo<span class="token punctuation">.</span><span class="token function">setPermissions</span><span class="token punctuation">(</span>permissionStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> permissionInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后在LoginController中的调用方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> R <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UserNameIsEmptyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UserNotFindException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PasswordIsNotCorrectException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">out</span><span class="token punctuation">(</span>RespCode<span class="token punctuation">.</span>Success<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="对于前端按钮的控制"><a href="#对于前端按钮的控制" class="headerlink" title="对于前端按钮的控制"></a>对于前端按钮的控制</h3><p>比如我想让有权限的人看得到这个按钮，没权限的人看不到</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/toLogin}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#session.getAttribute(<span class="token punctuation">'</span>username<span class="token punctuation">'</span>) eq null}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/toAddUser}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#session.getAttribute(<span class="token punctuation">'</span>permissions<span class="token punctuation">'</span>) ne null &amp;&amp; #lists.contains(#session.getAttribute(<span class="token punctuation">'</span>permissions<span class="token punctuation">'</span>),<span class="token punctuation">'</span>user:add<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#session.getAttribute(<span class="token punctuation">'</span>permissions<span class="token punctuation">'</span>) ne null &amp;&amp; #lists.contains(#session.getAttribute(<span class="token punctuation">'</span>permissions<span class="token punctuation">'</span>),<span class="token punctuation">'</span>user:delete<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#session.getAttribute(<span class="token punctuation">'</span>permissions<span class="token punctuation">'</span>) ne null &amp;&amp; #lists.contains(#session.getAttribute(<span class="token punctuation">'</span>permissions<span class="token punctuation">'</span>),<span class="token punctuation">'</span>user:query<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查看用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#session.getAttribute(<span class="token punctuation">'</span>permissions<span class="token punctuation">'</span>) ne null &amp;&amp; #lists.contains(#session.getAttribute(<span class="token punctuation">'</span>permissions<span class="token punctuation">'</span>),<span class="token punctuation">'</span>user:update<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本次练习，收获颇丰。但还有许多东西需要深入，像java8的list.stream().map()，aop的使用等等</p><p>练习RBAC的目的是为了上手框架，后续需要把springsecurity 和 shiro 整合到spring boot中</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用js发送网络请求</title>
      <link href="/blog/2022/01/11/23.shi-yong-js-fa-song-wang-luo-qing-qiu/"/>
      <url>/blog/2022/01/11/23.shi-yong-js-fa-song-wang-luo-qing-qiu/</url>
      
        <content type="html"><![CDATA[<p>AJAX (<strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML（异步的 JavaScript 和 XML）</p><p>这个技术可以使用js执行异步网络请求</p><h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2><p>随便找了个java web的练习项目，先看看po对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*  getter and setter  */</span><span class="token punctuation">}</span></code></pre><p>加一个TestController，在其中写一个测试接口</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{\"code\":200,\"msg\":\"成功\",\"data\":null}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用的视图技术为thymeleaf，因此启动后加载根路径时直接跳到test视图去</p><p>接口的返回值可以进行封装，这不属于重点，下次记录在谈</p><p>下一步建个视图，视图名test.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>formItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//这里写脚本</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="xhr发送请求"><a href="#xhr发送请求" class="headerlink" title="xhr发送请求"></a>xhr发送请求</h2><h3 id="xhr发送GET请求"><a href="#xhr发送GET请求" class="headerlink" title="xhr发送GET请求"></a>xhr发送GET请求</h3><p>1.旧时写法</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"/test?"</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#formItem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将表单内容加到url中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> el <span class="token keyword">of</span> formItem<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                url <span class="token operator">=</span> url <span class="token operator">+</span> el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> el<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"&amp;"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>url<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendXHR</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>respResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">sendXHR</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> func<span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">respResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>2.目前写法</p><p>目前写法区别于旧时写法：</p><p><strong>监听xhr事件不在使用onreadystatechange</strong>，改用其他事件，下面三个事件最为常用</p><ul><li><code>load</code> —— 当请求完成（即使 HTTP 状态为 400 或 500 等），并且响应已完全下载</li><li><code>error</code> —— 当无法发出请求，例如网络中断或者无效的 URL</li><li><code>progress</code> —— 在下载响应期间定期触发，报告已经下载了多少</li></ul><p><strong>响应也不再使用responseText，使用xhr的属性response</strong></p><p>我们可以使用 <code>xhr.responseType</code> 属性来设置响应格式：</p><ul><li><code>&quot;&quot;</code>（默认）—— 响应格式为字符串</li><li><code>&quot;text&quot;</code> —— 响应格式为字符串</li><li><code>&quot;arraybuffer&quot;</code> —— 响应格式为 <code>ArrayBuffer</code></li><li><code>&quot;blob&quot;</code> —— 响应格式为 <code>Blob</code></li><li><code>&quot;document&quot;</code> —— 响应格式为 XML document（可以使用 XPath 和其他 XML 方法）</li><li><code>&quot;json&quot;</code> —— 响应格式为 JSON（自动解析）</li></ul><p>对于url的构建直接使用字符串拼接很麻烦，建议使用URL对象</p><p>URL对象中有<strong>searchParams属性</strong>，该属性中提供如下方法</p><ul><li><p><strong><code>append(name, value)</code></strong> —— 按照 <code>name</code> 添加参数</p></li><li><p><strong><code>delete(name)</code></strong> —— 按照 <code>name</code> 移除参数</p></li><li><p><strong><code>get(name)</code></strong> —— 按照 <code>name</code> 获取参数</p></li><li><p><strong><code>getAll(name)</code></strong> —— 获取相同 <code>name</code> 的所有参数（这是可行的，例如 <code>?user=John&amp;user=Pete</code>）</p></li><li><p><strong><code>has(name)</code></strong> —— 按照 <code>name</code> 检查参数是否存在</p></li><li><p><strong><code>set(name, value)</code></strong> —— set/replace 参数</p></li><li><p><strong><code>sort()</code></strong> —— 按 name 对参数进行排序，很少使用</p></li><li><p>……并且它是可迭代的，类似于 <code>Map</code></p></li></ul><p>使用URL对象的好处为有些字符编码问题，如非拉丁字母和空格等，使用 <code>URL</code> 对象会自动处理这些</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#formItem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> el <span class="token keyword">of</span> formItem<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>el<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="xhr发送POST请求"><a href="#xhr发送POST请求" class="headerlink" title="xhr发送POST请求"></a>xhr发送POST请求</h3><p>POST请求相比GET请求多了一些步骤</p><ol><li>设置Http-header</li><li>在send方法中加入参数（要发送的数据）</li></ol><p>主要设置http-header为<code>Content-type</code>，常用值如下：</p><ul><li><code>application/json;charset=utf-8</code>，字符串（ JSON 编码的）</li><li><code>multipart/form-data</code> ，发送<strong>FormData</strong>对象</li><li><code>Blob</code>/<code>BufferSource</code> 发送二进制数据</li><li><code>application/x-www-form-urlencoded</code>，以URLSearchParams编码形式发送数据，很少使用（数据编码为：username=w&amp;password=1）</li></ul><p>下面演示发送json数据到test接口</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#formItem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> el <span class="token keyword">of</span> formItem<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//构造user对象，使用了js对象中计算属性的特性</span>                user<span class="token punctuation">[</span>el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> el<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>由于数据为json格式，test接口要加个<code>@RequestBody</code>注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></code></pre><h3 id="xhr发送FormData"><a href="#xhr发送FormData" class="headerlink" title="xhr发送FormData"></a>xhr发送FormData</h3><p>首先聊聊FormData，见名知意，FormData表示HTML 表单数据的对象</p><p>浏览器发送FormData在服务器角度来看，就像是一个普通的表单提交</p><p>看看该对象的方法：</p><ul><li><code>formData.append(name, value)</code> —— 添加具有给定 <code>name</code> 和 <code>value</code> 的表单字段</li><li><code>formData.append(name, blob, fileName)</code> —— 添加一个字段，就像它是 <code>&lt;input type=&quot;file&quot;&gt;</code>，第三个参数 <code>fileName</code> 设置文件名（而不是表单字段名），因为它是用户文件系统中文件的名称</li><li><code>formData.delete(name)</code> —— 移除带有给定 <code>name</code> 的字段</li><li><code>formData.get(name)</code> —— 获取带有给定 <code>name</code> 的字段值</li><li><code>formData.has(name)</code> —— 如果存在带有给定 <code>name</code> 的字段，则返回 <code>true</code>，否则返回 <code>false</code></li></ul><p>从技术上来讲，一个表单可以包含多个具有相同 <code>name</code> 的字段，因此，多次调用 <code>append</code> 将会添加多个具有相同名称的字段</p><p>还有一个 <code>set</code> 方法，语法与 <code>append</code> 相同。不同之处在于 <code>.set</code> 移除所有具有给定 <code>name</code> 的字段，然后附加一个新字段。因此，它确保了只有一个具有这种 <code>name</code> 的字段，其他的和 <code>append</code> 一样：</p><ul><li><code>formData.set(name, value)</code></li><li><code>formData.set(name, blob, fileName)</code></li></ul><p>下面演示一下</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#formItem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>formItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发送的为二进制数据，不设置Content-header也可以</span>        <span class="token comment" spellcheck="true">// xhr.setRequestHeader("Content-header","multipart/form-data");</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>演示的这个表单是很简单的，而表单项是可以很复杂的，如input的类型为file，或是想要向服务器发送图片（将图片转成二进制），这些内容我目前不大需要，我就不记录了</strong></p><h2 id="Fetch发送请求"><a href="#Fetch发送请求" class="headerlink" title="Fetch发送请求"></a>Fetch发送请求</h2><p><code>fetch()</code> 方法是一种<strong>目前通用的</strong>发送异步请求的方法</p><p>那为什么还在使用<code>XMLHttpRequest</code>，原因在于：</p><ol><li>维护老脚本，需要支持使用了 <code>XMLHttpRequest</code> 的脚本</li><li>兼容旧浏览器，如IE</li><li>fetch方法做不到的功能，跟踪上传进度</li></ol><p>看看<code>fetch()</code>的基本语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">[</span>option<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong><code>options</code></strong> —— 可选参数：method，header 等</p><p>没有 <code>options</code>，那就是一个简单的 GET 请求</p><p><strong>为了获取 response body，我们需要使用一个其他的方法调用</strong></p><p><code>Response</code> 提供了多种基于 promise 的方法，来以不同的格式访问 body：</p><ul><li><strong><code>response.text()</code></strong> —— 读取 response，并以文本形式返回 response</li><li><strong><code>response.json()</code></strong> —— 将 response 解析为 JSON</li><li><strong><code>response.formData()</code></strong> —— 以 <code>FormData</code> 对象的形式返回 response</li><li><strong><code>response.blob()</code></strong> —— 以 Blob（具有类型的二进制数据）形式返回 response</li><li><strong><code>response.arrayBuffer()</code></strong> —— 以 ArrayBuffer（低级别的二进制数据）形式返回 response</li></ul><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p>由上述基础总结出，fetch发送请求的核心就2句代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解析 response header</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将 body 读取为 json</span></code></pre><p>当然也可以使用 <strong>promise</strong> 形式，但我推荐用<strong>await</strong>形式</p><h3 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#formItem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> el <span class="token keyword">of</span> formItem<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>el<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h3><p>需要使用到fetch 选项：</p><ul><li><code>method</code> —— HTTP 方法</li><li><code>headers</code> —— 具有 request header 的对象（不是所有 header 都是被允许的）</li><li><code>body</code> —— 要以 <code>string</code>，<code>FormData</code>，<code>BufferSource</code>，<code>Blob</code> 或 <code>UrlSearchParams</code> 对象的形式发送的数据（request body）</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#formItem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> el <span class="token keyword">of</span> formItem<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                user<span class="token punctuation">[</span>el<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> el<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">{</span>            method <span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>            headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"Content-type"</span> <span class="token punctuation">:</span> <span class="token string">"application/json;charset=utf-8"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="发送FormData"><a href="#发送FormData" class="headerlink" title="发送FormData"></a>发送FormData</h3><p>当我们想要检查响应头，来检查 HTTP 状态以确定请求是否成功时，可以用到如下属性</p><ul><li><strong><code>status</code></strong> —— HTTP 状态码，例如 200</li><li><strong><code>ok</code></strong> —— 布尔值，如果 HTTP 状态码为 200-299，则为 <code>true</code></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">,</span>location<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#formItem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>formItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">{</span>            method <span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span> formData        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本次记录介绍了xhr和Fetch最为基础的部分，但足够使用。像一些深入的内容如Fetch<strong>追踪下载进度</strong>，<strong>中止</strong>，<strong>跨源请求</strong>等等，目前不太需要用到。还有一些网络请求是浏览器想要和服务器建立持久连接，这时需要用到<strong>长轮询</strong>的方式，如 WebSocket 或者 Server Sent Event，举一下应用场景：如网络游戏，实时交易系统等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初次使用spring boot</title>
      <link href="/blog/2021/12/20/22.chu-ci-shi-yong-spring-boot/"/>
      <url>/blog/2021/12/20/22.chu-ci-shi-yong-spring-boot/</url>
      
        <content type="html"><![CDATA[<p>前不久花3小时帮某某入门spring boot，后来自己又看了看，练了练，用spring boot初次做了一个web小小小练习，我想要把这个过程中遇到的我目前容易忘记的给记录下来。</p><h2 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h2><p>首先在idea中建一个maven项目，不需要选啥模板，建好后在pom.xml文件中导入依赖</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Thymeleaf 启动器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入数据库驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 资源过滤,解决mapper中xml文件过滤 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>目前大致先用到了这些依赖。</p><h2 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h2><p>目前练习中整合了mybatis、Thymeleaf</p><ol><li><p>先说说resources目录下的结构</p><ul><li>在该级目录下我建了2个文件夹，分别为static、templates</li><li><strong>static</strong>目录下主要放静态资源，如css，js，img等等</li><li><strong>templates</strong>目录主要放Thymeleaf视图</li><li>在resources目录下还需要创建spring boot的配置文件，我yml还没看过，因此我建的配置文件为：<strong>application.properties</strong></li></ul></li><li><p>application.properties中的配置</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:com/haichao/mapper/*.xml</span><span class="token attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">com.haichao.po</span></code></pre><p>配了一个数据源，配了一下mybatis中的mapper路径和po路径</p></li><li><p>java目录下的结构</p><p>创建了一个多级目录com.haichao，在该目录下都是常见的分层</p><ul><li>controller</li><li>interceptor</li><li>mapper</li><li>po</li><li>service</li><li>tools</li><li>外加一个启动的HelloApplication.java文件</li></ul></li><li><p>HelloApplication</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//总的启动入口</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h2><p>记得给mapper接口加注解**@Mapper**</p><p>接口中简单的方法直接用注解来实现，困难的方法还是得写xml</p><p>写个简单的增删改查示例：</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getAllUser</span><span class="token punctuation">(</span>RowBounds rowBounds<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user(name,password) value(#{user.name},#{user.password})"</span><span class="token punctuation">)</span><span class="token keyword">boolean</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from user where id = #{id}"</span><span class="token punctuation">)</span><span class="token keyword">boolean</span> <span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update user set name=#{user.name},password=#{user.password} where id=#{user.id}"</span><span class="token punctuation">)</span><span class="token keyword">boolean</span> <span class="token function">updateUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> User user<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 模糊查询</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where name like concat('%', #{name}, '%')"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByLikeName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre></li></ul><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><p>写控制器的过程中用到了REST风格</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/deleteUserById/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">deleteUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>@PathVariable用来接收URL中的请求参数</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/updateUserById/{id}/{name}/{password}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">updateUserById</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>请求路径上的id、name、password参数会被装入到user中对应属性中</p><p>在返回问题上，有时不想返回视图，想转发或重定向到其他控制器的映射路径上，此时需要加重定向和转发的关键字</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 转发</span><span class="token keyword">return</span> <span class="token string">"forward:/user/getAllUser"</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 重定向</span><span class="token keyword">return</span> <span class="token string">"redirect:/user/getAllUser"</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="Thymeleaf的使用"><a href="#Thymeleaf的使用" class="headerlink" title="Thymeleaf的使用"></a>Thymeleaf的使用</h2><p>使用thymeleaf需要加入命名空间</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>目前用到了2类表达式</p><ul><li>变量表达式 ${}</li><li>链接表达式 @{}</li></ul><p>想要在链接表达式中使用变量表达式需要使用<strong>管道语法</strong>，及在链接表达式中的{}中加入||</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{|/user/deleteUserById/${user.id}|}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>Thymeleaf 提供了大量的 th 属性，这个不详细记录</p><p>我目前用到的th属性有：th:text、th:each、th:value、th:href等等</p><p>写一下th:each的案例</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:${userList}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></code></pre><p>若想将视图数据赋值给JS变量，应该这样写</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>user<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="thymeleaf引用静态资源"><a href="#thymeleaf引用静态资源" class="headerlink" title="thymeleaf引用静态资源"></a>thymeleaf引用静态资源</h2><p>静态资源是放在static中的，若想在视图中引用静态资源，要先在pom文件中加配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span></code></pre><p>这段代码的作用是将resources目录下的所有类型的文件编译到target/classes文件夹中，这样.css和.js后缀的文件就可以正常的访问</p><p>现在演示引用bootstrap，先在static目录下建了css和js文件夹</p><p>再将bootstrap下载好放入static目录中</p><p>现在在视图中引用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/bootstrap4/bootstrap.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/js/jquery/jquery-3.6.0.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/js/bootstrap4/bootstrap.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>实现分页先用最原始的方式来做</p><p>在tools中建立一个page类，用于分页</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> total<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询总数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pageNo<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//当前页数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每页个数</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> results<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//查询结果集</span>    <span class="token comment" spellcheck="true">/*  getter and setter */</span><span class="token punctuation">}</span></code></pre><p>在service中写实现分页的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">userList</span><span class="token punctuation">(</span>Integer pageNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> userPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 边界判断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pageNo <span class="token operator">==</span> null <span class="token operator">||</span> pageNo <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pageNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pageNo <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> userPage<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pageNo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> userPage<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token punctuation">(</span>pageNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> userPage<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    RowBounds rowBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> userPage<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getAllUser</span><span class="token punctuation">(</span>rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    userPage<span class="token punctuation">.</span><span class="token function">setPageNo</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">)</span><span class="token punctuation">;</span>    userPage<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>    userPage<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userPage<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在视图中直接使用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{|/user/userList/${page.pageNo - 1}|}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{|/user/userList/${page.pageNo + 1}|}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>第一次使用spring boot，带给我的体会为开箱即用（out-of-the-box），不像ssm框架，需要写繁杂的配置</p><p>之后的计划：完整的写完一个项目</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wex5简单练习</title>
      <link href="/blog/2021/12/17/21.wex5-jian-dan-lian-xi/"/>
      <url>/blog/2021/12/17/21.wex5-jian-dan-lian-xi/</url>
      
        <content type="html"><![CDATA[<p>期末到来，总想留下点记录，于是乎，来了。</p><h2 id="Wex5"><a href="#Wex5" class="headerlink" title="Wex5"></a>Wex5</h2><p>wex5这个开发工具主要是以点击或是拖拽组件的方式来添加组件，因此，熟悉各个组件的功能和具体使用场景对于开发来说就显得至关重要。组件呢我就不详细介绍了，说不定以后都不会用这个软件。在下就以练习的方式来介绍需注意的地方。</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-1.png"></p><p>刚打开软件差不多是上图的样子。Baas目录是创建服务的地方，UI2是创建项目的地方。</p><p>创建项目一般在UI2处鼠标右键新建一个文件夹，给文件夹起个名字（基本上为项目名），我在这儿就先建第一个练习，名叫test1。在test1的地方鼠标右键新建W文件，这个根据项目需求来选择模板，test1练习就选择标准中的空白页面，然后给文件改个名字 ，基本上项目就创建好了。</p><h3 id="test1-gt-加载本地json"><a href="#test1-gt-加载本地json" class="headerlink" title="test1-&gt;加载本地json"></a>test1-&gt;加载本地json</h3><p>先向空白页面中添加<strong>panel</strong>组件，在top中加入一个<strong>titleBar</strong>组件，修改标题。差不多如下图所示：</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-2.png"></p><p>创建一个json文件，看图，注意语法</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-3.png"></p><p>添加数据，选择data组件。<strong>data组件中的数据是存放在内存中，而baasData是与数据库绑定</strong>。</p><p>改xid的名字为userData，对该组件编辑列，按照json新建5个属性。</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-4.png"></p><p>向content中加入<strong>dataTable</strong>组件，改xid的名字，data选择userData，鼠标右键添加列，将需要的列添加进来，效果看下图</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-7.png"></p><p>model -&gt; 事件 -&gt; 双击onLoad</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-5.png"></p><p>写加载本地json功能的js脚本</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-6.png"></p><p>启动tomcat，看看效果</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-8.png"></p><p>可以看到，成功的显示出来。</p><h3 id="test2-gt-添加数据和删除数据"><a href="#test2-gt-添加数据和删除数据" class="headerlink" title="test2-&gt;添加数据和删除数据"></a>test2-&gt;添加数据和删除数据</h3><p>先加<strong>panel</strong>组件，在top中加入一个<strong>titleBar</strong>组件，修改标题，在content中在加入一个<strong>contents</strong>组件，在contents组件中加入两个content，加入的这两个content一个充当显示页面，另一个充当添加页面，修改这两个content的xid为showContent和addContent。最后在bottom中加入<strong>buttonGroup</strong>，调一下buttonGroup的class属性，对排列方式选第三个，修改一下buttonGroup下面的button的xid和text属性，我改成的是showBtn、显示和addBtn、添加。最后将两个按钮的target属性选择和之前两个content起对应。</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-9.png"></p><p><strong>添加服务</strong>：在Baas目录下新建一个文件夹，叫test2，然后在test2下新建一个服务，名为accountService，点击新建数据库action，选account，account，点确认。在这里我用wex5自带的account数据库做演示，对account表进行数据的添加和删除。点击保存，<strong>新建的服务要对其进行模型编译，还有对服务进行修改后也要重新编译</strong>。对test2文件夹进行模型编译，记得要把tomcat服务器关掉。下图说明编译正常。</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-10.png"></p><p>在model中加入<strong>baasData</strong>组件，改xid，我改为accountData。点击tableName属性值的那三个点的按钮，查test2，选中刚建好的服务，确定。</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-11.png"></p><p>在showContent中我们用<strong>dataTable</strong>组件将数据显示出来，启动tomcat看一下</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-12.png"></p><p>在addContent中加入5个<strong>labelinput</strong>组件，改一下label，调一下样式。在加入一个按钮，改xid为addDataBtn，效果看下图</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-13.png"></p><p>给添加信息按钮写点击事件</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-14.png"></p><p>看看添加的效果</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-15.png"></p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-16.png"></p><p>开始写删除数据，先将dataTable的多选属性改为是。再在showContent页面中添加一个按钮，改xid为delBtn，写点击事件</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-17.png"></p><p>看看效果</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-18.png"></p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-19.png"></p><h3 id="test3-gt-购物车"><a href="#test3-gt-购物车" class="headerlink" title="test3-&gt;购物车"></a>test3-&gt;购物车</h3><p>test3就简单仿照wex5给出的takeout案例来做个练习吧。</p><p>和test2开头一样，加panel，加2个page，改xid为foodContent和cartContent，加2个button，修改xid，修改一些属性</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-20.png"></p><p>建立服务，这次选择的是x5数据库中的takeout_food表，记得模型编译</p><p>服务建立好后在model中加入<strong>baasData</strong>组件，修改xid为foodData，修改tableName属性为刚建好的服务</p><p>这次在foodContent页面中使用<strong>scrollView</strong>组件，这个组件会实现上拉刷新，下拉加载数据的作用</p><p>scrollView添加后会有3个子div，在第二个div中加入内容，加入一个普通的list（这个list在组件列表中没有括号后缀）</p><p>list的data属性选foodData，在list中的li下加入row组件，表示一行</p><p>在row组件下的默认生成的3个col中都加入output组件，修改bind-ref属性，绑定的是foodData当前行的这些属性</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-21.png"></p><p>启动tomcat看看效果</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-22.png"></p><p>和预想的一样，我们在row组件中加1列，在新加入的col中加入button组件，修改xid为orderFoodBtn，修改label属性，在class属性中的颜色样式选择btn-link，这个会使按钮的背景透明，这样按钮就只会显示文字</p><p>目前的这些操作在test1和test2中介绍得比较详细，按照文字说明来添加就OK了，因此会少放图</p><p>接下来在cartContent中添加一个panel（bootstrap）组件，在heading部分修改标题</p><p>在model中加入data组件，修改xid为cartData，鼠标右键编辑列</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-23.png"></p><p>在body部分加个list，将data属性选为cartData</p><p>然后在list下的li中加入row组件，再在row组件中添加6列</p><p>前3列加入output组件，第4列加一个按钮，第5列加output组件，第6列加一个按钮，这些output都要绑定好数据：修改bind-ref属性</p><p>第4列按钮改xid为reduceCountBtn，第6列按钮改xid为addCountBtn，这两个按钮修改icon属性，一个选减号的，一个选加号的，并且修改class</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-24.png"></p><p>在footer中加入一个labeloutput，label修改text为合计</p><p>基本准备都做好了，剩下的是写事件写JS</p><p>先给那个xid为orderFoodBtn的按钮，及文字表示为来一份的按钮先写点击事件</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-25.png"></p><p>来看看效果，启动tomcat，点2份老北京炸酱面，点1份宫爆鸡丁</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-26.png"></p><p>可以看到，在下单页面点击来一份的按钮在购物车这个页面数据成功的添加进来了</p><p>接下来写减号，加号按钮的点击事件</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-27.png"></p><p>接下来写合计金额的显示</p><p>将cartData的sumMoney属性添加一个规则</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-28.png"></p><p>将那个输出合计金额的output的bind-text属性绑定cartData组件中的sumMoney属性，并选择sum函数对其求总和</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-29.png"></p><p>启动一下看看效果</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-30.png"></p><h3 id="test4-gt-跳转页面"><a href="#test4-gt-跳转页面" class="headerlink" title="test4-&gt;跳转页面"></a>test4-&gt;跳转页面</h3><p>这个test4就写个跳转，顺带介绍2个组件</p><p>标准创建，这次index的模板选择标准中的标准页面</p><p>首先介绍<strong>wing</strong>组件，这个组件能够实现打开左右菜单的功能</p><p>先加入wing组件，再把模板生成的panel组件拖入到wing组件中的content中</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-31.png"></p><p>我们把titleBar中的left中的按钮换个图标，并写个点击事件使其能把wing组件的左菜单打开</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-32.png"></p><p>向左菜单中加入一些东西，及在wing组件的left中加入一个标题吧</p><p>我加入了一个h1组件，并修改了一下样式，加了一个标题的背景色</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-33.png"></p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-34.png"></p><p>借用一下test2中的服务accountService，我们在index中把account中的数据显示出来</p><p>用list组件，最普通的那个，及没有括号来修饰后缀的</p><p>效果差不多看下图</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-35.png"></p><p>现在我们新建一个w文件，叫list.w</p><p>用来显示我们点击主页中的list中的某一项的详细信息</p><p>先介绍<strong>windowDialog</strong>组件，这个组件可以实现跳转页面并传递数据</p><p>将windowDialog组件的src属性选为我们刚建的list.w文件</p><p>在list.w文件中加入<strong>windowReceiver</strong>组件，该组件是用来接收数据的</p><p>现在给index.w中列表项加入点击事件，使其点击时跳转到list.w中</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-36.png"></p><p>给list.w中加入一些labeloutput用来显示数据</p><p>给list.w中的windowReceiver添加接收事件，并把数据显示在labeloutput上</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-37.png"></p><p>启动tomcat来看看效果</p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-38.png"></p><p><img src="https://cdn2.maocdn.cn/img/2021/12/17/hexo-blog-21-39.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>wex5对我来说没多大兴趣，因此没怎么学，就简单写4个test用作记录</p><p>话说，看了看往年的考题，结果这个H5考试中这道题有点简单吧，基本上就是test1和test2结合起来，连服务都不需要建，那么考试时需要的model就很明确吧。话也不说得太打脸，多多准备准备总是有益的</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux期末指南</title>
      <link href="/blog/2021/07/03/20.linux-qi-mo-zhi-nan/"/>
      <url>/blog/2021/07/03/20.linux-qi-mo-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="linux基本命令"><a href="#linux基本命令" class="headerlink" title="linux基本命令"></a>linux基本命令</h2><p>命令格式：命令 -选项 参数 （选项和参数可以为空）如：ls -la /usr</p><table><thead><tr><th>命令</th><th>参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>reboot</td><td></td><td>reboot</td><td>重启</td></tr><tr><td>init 0</td><td></td><td>init 0</td><td>关机</td></tr><tr><td>shutdown -h now</td><td></td><td>shutdown -h now</td><td>关机</td></tr><tr><td>ifconfig</td><td></td><td>ifconfig</td><td>查看ip地址</td></tr><tr><td>ping</td><td></td><td>ping <a href="http://www.baidu.com/">www.baidu.com</a></td><td>测试网络联通性</td></tr><tr><td>passwd</td><td>空（改自己）</td><td>passwd</td><td>更改自己密码</td></tr><tr><td></td><td>其他用户</td><td>passwd centos</td><td>更改其他用户密码（管理员操作）</td></tr><tr><td>date</td><td></td><td>date</td><td>显示系统日期</td></tr><tr><td>cal</td><td>空</td><td>cal</td><td>显示当前日历</td></tr><tr><td></td><td>月，年</td><td>cal 10 2008</td><td>显示2008年10月的日历</td></tr><tr><td>who</td><td></td><td>who</td><td>列出当前系统所有用户</td></tr><tr><td>who am i</td><td></td><td>who am i</td><td>显示你的登录用户名</td></tr><tr><td>clear</td><td></td><td>clear</td><td>清屏</td></tr><tr><td>echo</td><td>字符串</td><td>echo hello world</td><td>在屏幕上输出hello world</td></tr><tr><td>mesg y</td><td></td><td>mesg y</td><td>确保自己能收到消息</td></tr><tr><td>write</td><td>用户</td><td>write root</td><td>向root发消息,写完ctrl+d结束消息编辑</td></tr><tr><td>history</td><td></td><td>history</td><td>查看过去的历史命令</td></tr><tr><td></td><td>数字</td><td>history 20</td><td>查看过去的20条历史命令</td></tr><tr><td>!</td><td>数字</td><td>!5</td><td>执行历史命令列表的第5条命令</td></tr><tr><td>exit</td><td></td><td>exit</td><td>退出登录到终端的用户</td></tr><tr><td>logout</td><td></td><td>logout</td><td>退出登录到终端的用户</td></tr></tbody></table><h2 id="文件管理相关命令"><a href="#文件管理相关命令" class="headerlink" title="文件管理相关命令"></a>文件管理相关命令</h2><table><thead><tr><th>命令</th><th>参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>cat</td><td></td><td>cat 1.txt</td><td>查看文件内容</td></tr><tr><td></td><td></td><td>cat 1.txt 2.txt</td><td>合并文件并查看内容</td></tr><tr><td></td><td>-n</td><td>cat -n 1.txt</td><td>显示行号</td></tr><tr><td></td><td>-A  or -E</td><td>cat -A 1.txt</td><td>-A显示所有不可见字符，-E显示行结束符</td></tr><tr><td>more</td><td></td><td>more 1.txt</td><td>分页显示，按enter向后移动一行，按空格向后移动一页,按b向前移动到上一屏，按q退出</td></tr><tr><td></td><td>-num</td><td>more -10 1.txt</td><td>表示一个屏幕显示该数字的行数</td></tr><tr><td></td><td>-p</td><td>more -p 1.txt</td><td>显示下一屏之前先清屏</td></tr><tr><td></td><td>+num</td><td>more +4 1.txt</td><td>从该数字行开始显示</td></tr><tr><td></td><td>-d</td><td>more -d 1.txt</td><td>底部显示友好信息</td></tr><tr><td>less</td><td></td><td>less 1.txt</td><td>分页显示，和more类似(参数相同写法)，有查找功能</td></tr><tr><td></td><td></td><td>less 1.txt</td><td>查询关键字时，先输入/，在输入关键字</td></tr><tr><td>head</td><td></td><td>head 1.txt</td><td>显示文件开头若干行</td></tr><tr><td></td><td>-num</td><td>head -10 1.txt</td><td>显示文件开头10行</td></tr><tr><td>tail</td><td></td><td>tail 1.txt</td><td>显示文件末尾若干行</td></tr><tr><td></td><td>-num</td><td>tail -10 1.txt</td><td>显示文件末尾10行</td></tr><tr><td>touch</td><td></td><td>touch str.txt</td><td>创建空文件（该文件不存在）</td></tr><tr><td></td><td>-t</td><td>touch -t 201809011230.10 1.txt</td><td>修改文件日期</td></tr><tr><td>grep</td><td></td><td>grep root 1.txt</td><td>查找文件或目录中含指定字符串的行</td></tr><tr><td></td><td>-i</td><td>grep -i root 1.txt</td><td>不区分大小写</td></tr><tr><td></td><td>-n</td><td>grep -n root 1.txt</td><td>输出时加上对应的行号</td></tr><tr><td></td><td>-c</td><td>grep -c root 1.txt</td><td>输出与字符串相匹配的行的数目</td></tr><tr><td></td><td>-v</td><td>grep -v root 1.txt</td><td>输出不相匹配的行</td></tr><tr><td></td><td>-x</td><td>grep -x root 1.txt</td><td>严格匹配</td></tr><tr><td></td><td>-r</td><td>grep -r root dir</td><td>递归查询（查目录）</td></tr><tr><td>sort</td><td></td><td>sort 1.txt</td><td>对文本的各行排序</td></tr><tr><td></td><td>-r</td><td>sort -r 1.txt</td><td>逆序排</td></tr><tr><td></td><td>-o</td><td>sort 1.txt -o 2.txt</td><td>将结果输出到指定文件中</td></tr><tr><td></td><td>-n</td><td>sort -n 1.txt</td><td>按数值大小来排序</td></tr><tr><td></td><td>-k</td><td>sort -k 1.txt</td><td>指定每一行中第几个字符为排序关键字</td></tr><tr><td>uniq</td><td></td><td>uniq 1.txt</td><td>比较相邻行，去掉重复的行</td></tr><tr><td></td><td>-c</td><td>uniq -c 1.txt</td><td>输出时，在行首显示该行在文本里出现的次数</td></tr><tr><td></td><td>-d</td><td>uniq -d 1.txt</td><td>只显示重复的行</td></tr><tr><td></td><td>-u</td><td>uniq -u 1.txt</td><td>只显示不重复的行</td></tr><tr><td>cp</td><td></td><td>cp 1.txt 2.txt</td><td>将源文件或目录复制到指定文件或目录(指定文件不存在会自动创建)</td></tr><tr><td></td><td>-p</td><td>cp -p 1.txt 2.txt</td><td>除复制文件外，还将存储权限和修改时间一并复制</td></tr><tr><td></td><td>-r or -R</td><td>cp -r dir1 dir2</td><td>递归复制（针对目录）</td></tr><tr><td></td><td>-a</td><td>cp -a dir1 dir2</td><td>相当于 cp -rp dir1 dir2</td></tr><tr><td>rm</td><td></td><td>rm 1.txt</td><td>删除文件或目录</td></tr><tr><td></td><td>-r or -R</td><td>rm -r dir</td><td>递归删</td></tr><tr><td></td><td>-f</td><td>rm -f 1.txt</td><td>强制删除，不给出提示信息</td></tr><tr><td></td><td>-i</td><td>rm -i 1.txt</td><td>删除前先询问用户</td></tr><tr><td></td><td>-v</td><td>rm -v 1.txt</td><td>显示指令执行过程</td></tr><tr><td>mv</td><td></td><td>mv 1.txt ..</td><td>移动或更名指定的文件或目录</td></tr><tr><td></td><td>-b</td><td>mv -b 1.txt ..</td><td>覆盖前会备份原有文件</td></tr><tr><td></td><td>-f</td><td>mv -bf 1.txt ..</td><td>强制覆盖，不给提示信息</td></tr><tr><td></td><td>-i</td><td>mv -i 1.txt ..</td><td>覆盖前先询问用户</td></tr><tr><td></td><td>-v</td><td>mv -v 1.txt ..</td><td>显示指令执行过程</td></tr><tr><td>wc</td><td></td><td>wc 1.txt 2.txt</td><td>统计文件内容</td></tr><tr><td></td><td>-c -l -w</td><td>wc -clw 1.txt</td><td>字节数、行数、字数</td></tr><tr><td>mkdir</td><td></td><td>mkdir ./t1</td><td>创建目录</td></tr><tr><td></td><td>-p</td><td>mkdir -p ./t1/t2</td><td>创建多级目录</td></tr><tr><td></td><td>-m</td><td>mkdir -m 755 ./t1</td><td>创建目录的同时赋予权限</td></tr><tr><td>rmdir</td><td></td><td>rmdir t1</td><td>删除目录</td></tr><tr><td></td><td>-p</td><td>rmdir -p t1/t2/t3</td><td>删除多级目录（没有rm好用）</td></tr><tr><td>cd</td><td></td><td>cd ..      or     cd dir1</td><td>切换目录</td></tr><tr><td>pwd</td><td></td><td>pwd</td><td>显示当前目录</td></tr><tr><td>ls</td><td></td><td>ls</td><td>列出当前目录的内容，也可以自己指定路径</td></tr><tr><td></td><td>-l</td><td>ls -l    or     ll</td><td>以长格式（详细格式）显示</td></tr><tr><td></td><td>-a   or   -A</td><td>ls -a</td><td>显示所有文件和目录，-A不会显示.(当前目录)和..(上级目录)</td></tr><tr><td></td><td>-R</td><td>ls -R</td><td>递归处理</td></tr><tr><td>ln</td><td></td><td>ln 1.txt 1t</td><td>建立链接，链接分为硬链接（相当于别名）和软链接（相当于快捷方式）</td></tr><tr><td></td><td>-s</td><td>ln -s 1.txt 1t</td><td>加上-s是软链接方式，不加是硬链接方式</td></tr></tbody></table><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><pre class=" language-shell"><code class="language-shell">chmod    改变文件或目录的权限语法：chmod [who] [+-=] [mode] 文件名[who]可以为一下的内容中的一个或是组合u 文件主，创建这个文件的主人g 组o 其他用户a 所有用户[+-=]+ 增加权限- 减去权限= 赋值权限[mode]权限，分为下面三种r 可读w 可写x 可执行列子：chmod u+x ex1chmod u+rwx,o-rw ex1chmod u=rwx,g=rx,o=r ex1另外的一种赋权限的方式,用二进制方式r权限为 4w权限为 2x权限为 1chmod 754 ex1     等价于     chmod u=rwx,g=rx,o=r ex1</code></pre><table><thead><tr><th>命令</th><th>参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>chown</td><td></td><td>chown centos:centos 1.txt</td><td>改变文件的所有者或文件的组</td></tr><tr><td></td><td>-R</td><td>chown -R root:root dir</td><td>递归改变指定目录和其子目录</td></tr><tr><td>chgrp</td><td></td><td>chgrp centos 1.txt</td><td>改变文件所属的组</td></tr><tr><td></td><td>-R</td><td>chgrp -R root dir</td><td>递归改变指定目录和其子目录</td></tr></tbody></table><h3 id="命令帮助"><a href="#命令帮助" class="headerlink" title="命令帮助"></a>命令帮助</h3><table><thead><tr><th>命令</th><th>参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>man</td><td></td><td>man ls</td><td>查阅指定命令的手册</td></tr><tr><td></td><td>-f</td><td>man -f ls</td><td>查看该命令有那些章节</td></tr><tr><td></td><td>-S</td><td>man -S 1 ls</td><td>查看命令指定章节的帮助</td></tr><tr><td>help</td><td></td><td>help cd</td><td>shell内置命令帮助</td></tr><tr><td></td><td></td><td>ls –help</td><td>另外一种关于help的用法</td></tr></tbody></table><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><table><thead><tr><th>命令</th><th>参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>ps</td><td></td><td>ps</td><td>报告程序的状况</td></tr><tr><td></td><td>a u x</td><td>ps aux</td><td>a 显示所有终端机下执行的程序，u 面向用户的格式，x 显示所有非控制终端的进程信息</td></tr><tr><td></td><td>-e -f</td><td>ps -ef</td><td>-e 此参数的效果和指定”A”参数相同，-f 显示进程的所有信息</td></tr><tr><td>kill</td><td></td><td>kill （pid）</td><td>删除执行中的程序或工作</td></tr><tr><td></td><td>-1 -9</td><td>kill -9 (pid)</td><td>-1，查看信号；-9，强制删除</td></tr><tr><td>top</td><td></td><td>top</td><td>动态的查看进程状态</td></tr><tr><td>pstree</td><td></td><td>pstree</td><td>以树形的方式查看进程</td></tr></tbody></table><h3 id="压缩解压缩"><a href="#压缩解压缩" class="headerlink" title="压缩解压缩"></a>压缩解压缩</h3><pre class=" language-shell"><code class="language-shell">gzip     .gz 的压缩方式-num   调整解压速度    -1 or --fast 表示最快的压缩方法（低压缩比）    -9 or --best 表示最慢的压缩方法（高压缩比）-d 解压缩-r 递归zcat  不解压查看.gz文件的内容bzip2    .bz2 的压缩方式,无递归的方式-k 不删除源文件-d 解压缩bzcat  不解压查看.bz2文件的内容xz       .xz 的压缩方式,无递归的方式-d 解压缩-k 不删除源文件tar 打包-c 创建包-t 查看包中的文件-x 释放包-z .gz格式压缩包-j .bz2格式压缩包-J .xz格式压缩包-f 指定包名（带一个参数）-v 执行过程中显示提示信息-C 用于指定包解压缩释放的路径列子：(以哪种方式来压缩包的参数放第一个,剩下的的参数为三种cvf(创建)、tvf(查看)、xvf(释放))tar -zcvf t1.tar.gz 1.txt 2.txt 3.txt    把1.txt,2.txt,3.txt打包成t1.tar.gz并以.gz格式来压缩tar -tvf t1.tar.gz      查看t1.tar.gz 里的文件名tar -zxvf t1.tar.gz     以.gz格式来释放包t1.tar.gz</code></pre><h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><pre class=" language-shell"><code class="language-shell">whereis 简单快速只能搜索二进制文件(-b)，man帮助文件(-m)和源代码文件(-s)locate 快而全locate /etc/sh要实时搜索需要更新一下数据库  updatedbwhich 小而精搜索是否安装了某个指定的软件find 精而细语法: find [path][option][action][path]路径，可写相对路径，可写绝对路径~ 表示当前用户的主目录[option]按时间：    -atime 最后访问时间    -ctime 创建时间    -mtime 最后修改时间-name 按名字-type 按类型    b     /d     /c  /p      /l               /f    块设备/目录/字符设备/管道文件/符号链接（软链接） /普通文件-user 按文件主来搜索按权限来搜索    -perm mode  精确匹配    -perm /mode 任何一位匹配    -perm -mode 文件权限完全包含才显示-size  按文件大小-iname 按名字（不区分大小写）[action]查询结果的显示默认为 -print-ls 列表方式显示-ok command {} \;     操作需要确认-exec command {} \;   操作不需要确认{} 为引用查找格式    \  为格式   command 写其他命令，如rm，mv等等find 命令可以支持组合条件（-a 与，-o 或，-not 非）</code></pre><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><pre class=" language-shell"><code class="language-shell">通过 vi 命令进入vim编辑器中vi 1.txtvim编辑器一共有三种模式，分别为一般模式(命令行模式)、插入模式、末行模式刚进入vim编辑器时是一般模式，在这个模式下可以进行对光标的定位、复制粘贴文本、删除文本等等操作在一般模式下，按下:可进入末行模式，在这个模式可以设置行号这些在一般模式下，按下a、i、o可进入插入模式，在插入模式下就可以编辑文本了,按esc键返回一般模式在一般模式下，按下:wq或:q!来退出vim编辑器</code></pre><h3 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>取消行号</td></tr><tr><td>:wq</td><td>保存退出</td></tr><tr><td>:q!</td><td>强制退出，不保存退出</td></tr><tr><td>:5,7d</td><td>删除指定的行</td></tr><tr><td>:n</td><td>跳到指定的行</td></tr><tr><td>:s/word/hello</td><td>将当前行全部的word替换成hello</td></tr><tr><td>:s/word/hello/gci</td><td>g表示只替换每行第一个，c表示替换时给出提示，i表示忽略大小写</td></tr><tr><td>:%s/word/hello</td><td>将所有word特换成hello</td></tr><tr><td>/word</td><td>全文查找word，按n跳向下一个，按N跳向上一个</td></tr><tr><td>/word\c</td><td>\c表示忽略大小写</td></tr></tbody></table><h3 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>进入插入模式，在光标的前面插入</td></tr><tr><td>I</td><td>进入插入模式，在光标当前行最前面插入</td></tr><tr><td>a</td><td>进入插入模式，在光标的后面插入</td></tr><tr><td>A</td><td>进入插入模式，在光标当前行的末尾插入</td></tr><tr><td>o</td><td>进入插入模式，在光标当前行的下一行插入新行</td></tr><tr><td>O</td><td>进入插入模式，在光标当前行的上一行插入新行</td></tr><tr><td>gg</td><td>将光标跳到首行</td></tr><tr><td>G</td><td>将光标跳到末行</td></tr><tr><td>0</td><td>将光标跳到该行的行首</td></tr><tr><td>$</td><td>将光标跳到该行的行尾</td></tr><tr><td>H</td><td>将光标跳到当前屏幕的首行</td></tr><tr><td>M</td><td>将光标跳到当前屏幕的中间行</td></tr><tr><td>L</td><td>将光标跳到当前屏幕的末行</td></tr><tr><td>u</td><td>undo，取消上一步操作</td></tr><tr><td>ctrl+r</td><td>redo,返回undo之前</td></tr><tr><td>r</td><td>替换光标所在的字符</td></tr><tr><td>R</td><td>从光标所在字符开始替换，按esc结束</td></tr><tr><td>x</td><td>删除光标所在字符</td></tr><tr><td>nx</td><td>删除光标所在字符及后面n-1个字符</td></tr><tr><td>dd</td><td>删除光标所在行，ndd删除n行</td></tr><tr><td>D</td><td>删除从光标处到该行末尾的所有字符</td></tr><tr><td>yy</td><td>复制光标所处的当前行，nyy复制n行</td></tr><tr><td>p</td><td>将内容粘贴到当前光标处，复制的行一般在该光标的下一行粘贴出来</td></tr></tbody></table><h2 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h2><pre class=" language-shell"><code class="language-shell">Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</code></pre><h3 id="1-shell脚本的创建和执行"><a href="#1-shell脚本的创建和执行" class="headerlink" title="1.shell脚本的创建和执行"></a>1.shell脚本的创建和执行</h3><pre class=" language-shell"><code class="language-shell">通过vim编辑器编辑文本列子如下:vi ex1#!/bin/bashecho "hello world!"写完之后保存，用:wq#!bin/bash是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行执行shell脚本的三种方式：1.输入重定向到shell脚本bash < ex12.以脚本名为参数bash [脚本名] [参数]bash ex13.将shell脚本设置为可执行(最推荐的方式)chmod 755 ex1./ex1注意，./要有，表示当前路径下的脚本文件，若不想在执行脚本文件的时候输入./,可以配置PATHPATH=$PATH:.ex1上述语句的含义是在 PATH 变量的后面加上.这个路径</code></pre><h3 id="2-shell特殊字符"><a href="#2-shell特殊字符" class="headerlink" title="2.shell特殊字符"></a>2.shell特殊字符</h3><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><pre class=" language-shell"><code class="language-shell">*  :匹配任意字符0次或多次?  :匹配任意字符1次[] :匹配方括号里字符组的任意一个字符，注意*?在里面为普通字符!  :若出现在[]中的左方括号[的后面，表示匹配不在方括号字符组中的字符</code></pre><h4 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h4><pre class=" language-shell"><code class="language-shell">单引号 ''由单引号括起来的字符都作为普通字符出现双引号 ""除$,\(转义字符)和倒引号外，其他字符为普通字符倒引号 ``倒引号括起来的字符串会被shell解释为命令</code></pre><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><pre class=" language-shell"><code class="language-shell">反斜线 \如\n这种，如果要输出反斜线，应写成\\</code></pre><h4 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h4><pre class=" language-shell"><code class="language-shell">输出重定向语法: command > file列子: cat 1.txt 2.txt > 3.txt将1.txt和2.txt的内容合并起来然后输出到3.txt中(没有重定向是默认输出到命令行窗口)输出附加定向语法: command >> file列子: cat 1.txt 2.txt >> 3.txt将1.txt和2.txt的内容合并起来然后追加输出到3.txt中，即3.txt的原本的内容会保留，新内容在原有内容之后输入重定向语法: command < file这样，本来需要从键盘获取输入的命令会转移到文件读取内容。即时文件定向 << (略)与文件描述字有关的重定向系统为每个进程自动打开三个标准文件（即标准输入、标准输出和错误输出），其文件描述字分别为0，1和2标准错误输出也可重定向到一个文件中，其一般形式是：命令  2 > 文件名命令  2>> 文件名标准输出和标准错误输出可以重定向到同一个文件，一般形式是command  $>file或者为command > file  2>& 1&1表示标准输出的引用，所以2>&1是指把标准错误输出重定向到标准输出的引用，即也重定向到file</code></pre><h4 id="注释、管道线、命令执行操作符"><a href="#注释、管道线、命令执行操作符" class="headerlink" title="注释、管道线、命令执行操作符"></a>注释、管道线、命令执行操作符</h4><pre class=" language-shell"><code class="language-shell">注释   #管道线 |管道左边的内容作为管道右边的输入列子: cat 1.txt 2.txt | wc -l命令执行操作符&&  与列子: 命令1 && 命令2 说明: 先执行命令1，若命令1执行不成功，则命令2不会执行；若命令1执行成功，则命令2才会执行||  或列子: 命令1 || 命令2 说明: 先执行命令1，若命令1执行不成功，则命令2才会执行；若命令1执行成功，则命令2不会执行</code></pre><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h3><pre class=" language-shell"><code class="language-shell">shell变量分为内部变量，环境变量，临时变量(用户自定义变量、位置参数)定义变量时，变量名不加$num1=1在使用变量时，用使用$echo $num1如果变量值出现在长字符串的开头或者中间，为了使变量名与其后的字符区分开,可以用花括号将变量名括起来dir=/home/centosecho ${dir}is path</code></pre><h3 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h3><pre class=" language-shell"><code class="language-shell">Bash Shell 只支持一维数组，初始化时不需要定义数组大小，数组元素的下标由 0 开始。定义数组:nums=(1,2,3,4)str=("hello","world","nice")或者是nums[0]=1nums[1]=2nums[2]=3nums[3]=4读数组中的元素echo ${nums[0]}获取数组中的所有元素使用@ 或 * 可以获取数组中的所有元素echo ${nums[*]}echo ${nums[@]}返回数组元素长度或数组的长度echo ${#nums[1]}返回nums数组中下标为1的元素值的字符长度echo ${#nums[*]}返回nums数组的长度</code></pre><h3 id="5-输入输出"><a href="#5-输入输出" class="headerlink" title="5.输入输出"></a>5.输入输出</h3><pre class=" language-shell"><code class="language-shell">read   输入read x y输入数据到x变量和y变量中，数据用空格隔开若数据个数多于变量个数，则最后一个变量会被赋值剩余的所有数据若数据个数少于变量个数，则没有数据赋值的变量会被赋值空串echo   输出如果 echo 命令后有选项 -e,则 echo 命令后的参数部分可以使用转义字符，如 \n</code></pre><h3 id="6-位置参数"><a href="#6-位置参数" class="headerlink" title="6.位置参数"></a>6.位置参数</h3><pre class=" language-shell"><code class="language-shell">在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推...其中，$0表示命令名或shell脚本名,1~9都是$加数字,10以上要${10}列子: ./ex1 hello to love则 $0 为ex1 $1 为hello,$2 为to,$3 为love用set 命令为位置参数重新赋值vi ex1#!/bin/bashset hello toecho "\$1 is $1"echo "\$2 is $2"./ex1结果为$1 is hello$1 is toshift 命令可以移动位置参数列子:$1 $2 $3 $4 $5 $6 $7 的值分别对于如下a  b  c  d  e  f  d执行shift 命令一次，则位置参数会向左移动一位shift$1 $2 $3 $4 $5 $6 $7 的值分别对于如下b  c  d  e  f  d也可以写shift 加一个数字，表示执行几次shift操作shift 4$1 $2 $3 $4 $5 $6 $7 的值分别对于如下f  d</code></pre><h3 id="7-预先定义的特殊变量"><a href="#7-预先定义的特殊变量" class="headerlink" title="7.预先定义的特殊变量"></a>7.预先定义的特殊变量</h3><pre class=" language-shell"><code class="language-shell">$# 传递到脚本的参数个数$$ 脚本运行的当前进程ID号$? 上一条命令执行后的返回值，0表示执行成功，其他数表示执行失败$@ 引用所有参数$* 引用所有参数$@ 和 $* 的不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）</code></pre><h3 id="8-set命令设置程序执行标志"><a href="#8-set命令设置程序执行标志" class="headerlink" title="8.set命令设置程序执行标志"></a>8.set命令设置程序执行标志</h3><pre class=" language-shell"><code class="language-shell">设置标志的一般形式是： set  -标志关闭标志的一般形式是： set  +标志有两个标志很好用,分别是x标志和v标志set -x 显示每一行的命令，在显示的命令前有加号(+)，并且在这个过程完成参数替换，然后执行命令的操作set -v 显示每一行的命令，然后执行命令的操作</code></pre><h3 id="9-算术运算"><a href="#9-算术运算" class="headerlink" title="9.算术运算"></a>9.算术运算</h3><pre class=" language-shell"><code class="language-shell">let 算术运算的命令用法:let "j=i*6+2″等价于 ((j=i*6+2))</code></pre><h3 id="10-条件测试"><a href="#10-条件测试" class="headerlink" title="10.条件测试"></a>10.条件测试</h3><pre class=" language-shell"><code class="language-shell">两种常用形式列子: 测试位置参数$1 是否是普通文件test -f "$1"注意:如果在test 语句中使用shell 变量，为表示完整、避免造成歧异，最好用双引号将变量括起来另一种[ -f $1 ]注意:左右方括号前后有空格</code></pre><p>对文件方面的测试(前三个常用)</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-d 文件名</td><td>确定文件是否为目录</td></tr><tr><td>-f 文件名</td><td>确定文件是否为普通文件</td></tr><tr><td>-e 文件名</td><td>测试文件是否存在</td></tr><tr><td>-r 文件名</td><td>确定是否对文件设置了读权限</td></tr><tr><td>-w 文件名</td><td>确定文件是否设置了写权限</td></tr><tr><td>-x 文件名</td><td>确定文件是否设置了执行权限</td></tr><tr><td>-s 文件名</td><td>确定文件名是否具有大于零的长度</td></tr></tbody></table><p>对字符串的测试</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>字符串1 = 字符串2</td><td>比较两个字符串是否相等</td></tr><tr><td>字符串1 != 字符串2</td><td>比较两个字符串是否不相等</td></tr><tr><td>-n 字符串</td><td>判断字符长度是否大于零</td></tr><tr><td>-z 字符串</td><td>判断字符长度是否等于零</td></tr><tr><td>str(定义的字符串)</td><td>判断字符串str是否不是空串</td></tr></tbody></table><p>对数字的比较</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-eq</td><td>比较两个数是否相等</td></tr><tr><td>-ne</td><td>比较两个数是否不等</td></tr><tr><td>-gt</td><td>比较一个数是否大于另一个数</td></tr><tr><td>-ge</td><td>比较一个数是否大于等于另一个数</td></tr><tr><td>-lt</td><td>比较一个数是否小于另一个数</td></tr><tr><td>-le</td><td>比较一个数是否小于等于另一个数</td></tr></tbody></table><p>逻辑运算符</p><p>针对条件可以多个条件同时判断，要用到逻辑运算符</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>与</td></tr><tr><td>-o</td><td>或</td></tr><tr><td>!</td><td>非</td></tr></tbody></table><h3 id="11-控制结构"><a href="#11-控制结构" class="headerlink" title="11.控制结构"></a>11.控制结构</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre class=" language-shell"><code class="language-shell">列子1:vi ex1#!/bin/bashif test "$1" -gt "$2"then echo $1else echo $2fi列子1(多分支):vi ex2#!/bin/bashif test "$1" -lt "$2"then echo "$1 < $2"elif test "$1" -eq "$2"then echo "$1 = $2"else echo "$1 > $2"fi</code></pre><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><pre class=" language-shell"><code class="language-shell">列子1:vi ex1#!/bin/bashstr="hello"read opcase $op in1) echo $str;;2) echo "good bye";;esac</code></pre><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>考试不考，略，以后补上。</p><h2 id="系统及网络管理"><a href="#系统及网络管理" class="headerlink" title="系统及网络管理"></a>系统及网络管理</h2><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>有三种方式，rpm、yum、源代码安装</p><h4 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h4><pre class=" language-shell"><code class="language-shell">RPM 软件包通常具有类似zsh-5.0.2-33.el7.x86_64.rpm 的文件名安装rpm -ivh telnet-server-0.17-64.el7.x86_64.rpm 卸载rpm -e telnet-server注意卸载时写软件的名字，而不是有.rpm后缀的软件包文件的名字升级rpm -Uvh zsh-5.0.2-33.el7.x86_64.rpm查询rpm -qa   查询所有已安装的软件包rpm -q telnet-server  打印出telnet-server软件包的包名 ，版本号，和发行号</code></pre><h4 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h4><pre class=" language-shell"><code class="language-shell">强大好用，会自动解决依赖问题yum -y install vsftpd (安装)yum -y remove vsftpd  (卸载)yum search vsftpd     (查找指定的软件包，可以模糊查询)</code></pre><h4 id="源代码安装"><a href="#源代码安装" class="headerlink" title="源代码安装"></a>源代码安装</h4><pre class=" language-shell"><code class="language-shell">使用源代码安装需要先安装gcc等编译器yum groupinstall 'Development Tools'</code></pre><p>按照步骤(一般步骤大体如此)</p><p>1.安装gcc等编译器</p><p><img src="https://s3.jpg.cm/2021/07/06/I5HAUU.png"></p><p>2.解压tar包</p><p><img src="https://s3.jpg.cm/2021/07/06/I5HXwO.png"></p><p>3.进入目录，查看安装说明文件</p><p><img src="https://s3.jpg.cm/2021/07/06/I5H60L.png"></p><p>4.执行configure脚本</p><p><img src="https://s3.jpg.cm/2021/07/06/I5HltH.png"></p><p>5.make</p><p><img src="https://s3.jpg.cm/2021/07/06/I5H8If.png"></p><p>6.make install</p><p><img src="https://s3.jpg.cm/2021/07/06/I5Hb68.png"></p><p>7.help查看安装后的命令的用法</p><p><img src="https://s3.jpg.cm/2021/07/06/I5Hcxw.png"></p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="1-命令行方式"><a href="#1-命令行方式" class="headerlink" title="1.命令行方式"></a>1.命令行方式</h4><pre class=" language-shell"><code class="language-shell">Linux 的帐号信息存放在passwd 文件中root:x:0:0:administrator:/root:/bin/bash帐号信息，由7个部分组成，每个部分由“:”分隔：用户名:加密的口令或口令符:用户ID:组ID:真实姓名:用户主目录:用户shell表示root 用户的ID 号码为0，所属组ID 号码为0，真实姓名为administrator，主目录位于/root。shell 程序是/bin/bash，密码为口令符x，该口令符意味着口令是加密存放的，该加密后的密码存放在/etc/shadow 文件中useradd stu1     添加一个stu1用户userdel stu1     删除用户stu1(有 -r 参数表示递归删除)查看添加的用户在 /etc/passwd groupadd class1  添加一个class1的组groupdel class1  删除组class1查看添加的组在  /etc/group改变帐号的信息usermod -L centos   锁定用户usermod -U centos   解锁用户修改用户的密码passwd stu1</code></pre><h4 id="2-图形界面"><a href="#2-图形界面" class="headerlink" title="2.图形界面"></a>2.图形界面</h4><pre class=" language-shell"><code class="language-shell">用户管理器窗口。如果没有则先安装：yum install system-config-users</code></pre><p><img src="https://s3.jpg.cm/2021/07/06/I5ub4O.png"></p><p><img src="https://s3.jpg.cm/2021/07/06/I5uUuU.png"></p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><pre class=" language-shell"><code class="language-shell">使用文件系统遵循的一般过程：分区、格式化、挂载</code></pre><h4 id="添加虚拟硬盘"><a href="#添加虚拟硬盘" class="headerlink" title="添加虚拟硬盘"></a>添加虚拟硬盘</h4><p><img src="https://s3.jpg.cm/2021/07/06/I5uH88.png"></p><p><img src="https://s3.jpg.cm/2021/07/06/I5uSQe.png"></p><p><img src="https://s3.jpg.cm/2021/07/06/I5ut9k.png"></p><p><img src="https://s3.jpg.cm/2021/07/06/I5uYSy.png"></p><p><img src="https://s3.jpg.cm/2021/07/06/I5uJki.png"></p><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><p>1.查看系统中的硬盘</p><p><img src="https://s3.jpg.cm/2021/07/06/I5umOR.png"></p><p>2.查看硬盘分区</p><p><img src="https://s3.jpg.cm/2021/07/06/I5ukBt.png"></p><p>3.创建主分区</p><p><img src="https://s3.jpg.cm/2021/07/06/I5uFuC.png"></p><p>4.创建扩展分区</p><p><img src="https://s3.jpg.cm/2021/07/06/I5ur3r.png"></p><p>5.创建逻辑分区</p><p><img src="https://s3.jpg.cm/2021/07/06/I5uER5.png"></p><p>6.查看创建好的分区</p><p><img src="https://s3.jpg.cm/2021/07/06/I5uwmu.png"></p><p>7.保存退出</p><p><img src="https://s3.jpg.cm/2021/07/06/I5uv8z.png"></p><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><pre class=" language-shell"><code class="language-shell">使用mkfs 命令来格式化硬盘mkfs -t ext4 /dev/sdb1</code></pre><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><pre class=" language-shell"><code class="language-shell">mount   挂载创建的分区1.创建挂载目录mkdir /mnt/userfile2.使用mount 命令挂载刚刚创建的分区mount /dev/sdb1 /mnt/userfile3.输出mount查看挂载是否成功mount在文件最小面有 /dev/sdb1 on /mnt/userfile type ext4 (rw,relatime,seclabel,data=ordered) 表示成功自动挂载修改/etc/fstab文件，在最后一行添加:/dev/sdb1        /mnt/userfile        ext3               defaults                   0  0要挂载的分区名      要挂载的目录     挂载分区用的文件系统      挂载时的选项，采用默认值    备份和检查文件，默认两个0修改完成后重启计算机目录将自动挂载</code></pre><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h4 id="1-命令行方式-1"><a href="#1-命令行方式-1" class="headerlink" title="1.命令行方式"></a>1.命令行方式</h4><pre class=" language-shell"><code class="language-shell">1.查看网络运行情况ifconfig说明:eth0:网络适配器（网卡）的网络接口，如果系统中有多个网卡，则以eth1、eth2…递增编号inet:网卡的IP地址mask:显示网卡的子网掩码2.为网络接口eth0配置IP地址ifconfig eth0 192.168.1.1(要配置成的IP地址)将网络接口eth0设置为动态获取IP地址ifconfig eth0 dynamic3.激活网络接口eth0ifconfig eth0 up关闭网络接口eth0ifconfig eth0 down4.为系统添加缺省网关192.168.1.254route add default gw 192.168.1.254</code></pre><h4 id="2-直接修改配置文件"><a href="#2-直接修改配置文件" class="headerlink" title="2.直接修改配置文件"></a>2.直接修改配置文件</h4><pre class=" language-shell"><code class="language-shell">通过命令可以快捷地进行网络参数的配置，但系统重新启动后，所设置的网络参数将丢失。直接修改配置文件可以解决该问题该方法略</code></pre><h4 id="3-图形界面"><a href="#3-图形界面" class="headerlink" title="3.图形界面"></a>3.图形界面</h4><pre class=" language-shell"><code class="language-shell">在图形界面下配置网络参数实际上是直接对配置文件进行修改为使得所做的改动生效，可以重启网络服务service network restart一组参考IP地址：192.168.53.x（x为1～253）子网掩码：255.255.255.0网关：192.168.53.254</code></pre><p><img src="https://s3.jpg.cm/2021/07/06/I51TwR.png"></p><p><img src="https://s3.jpg.cm/2021/07/06/I51yGC.png"></p><p><img src="https://s3.jpg.cm/2021/07/06/I519ct.png"></p><h4 id="考试常考网络题"><a href="#考试常考网络题" class="headerlink" title="考试常考网络题"></a>考试常考网络题</h4><p>请写出你在机房里每次上机实验时都需要进行的<strong>配置网络的基本步骤</strong>，<strong>每个关键步骤请截图并配以说明</strong></p><pre class=" language-shell"><code class="language-shell">这道题分步骤来回答1.选择连接方式可以选择NAT方式，也可以选择桥接的方式2.网络参数的配置（上面三种配置方法，如没有要求，推荐使用图形界面）选择NAT方式可以直接选择自动获取网络参数选择桥接方式要根据具体的网络环境设置，及IP和机房电脑同一个网段3.查看IP并测试连通性用到3条命令systemctl restart networkifconfigping www.baidu.com4.客户端远程连接服务器用SecureCRT来远程连接虚拟机</code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>花了2，3天写完该指南，祝我在后天的linux考试中取得好的成绩，同时希望这份指南能帮助到有缘人。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像期末指南</title>
      <link href="/blog/2021/06/26/19.tu-xiang-qi-mo-zhi-nan/"/>
      <url>/blog/2021/06/26/19.tu-xiang-qi-mo-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="Matlab图像基础"><a href="#Matlab图像基础" class="headerlink" title="Matlab图像基础"></a>Matlab图像基础</h2><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 读图片</span><span class="token comment" spellcheck="true">% 方法1   </span><span class="token string">'路径'</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'路径'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 方法2</span><span class="token punctuation">[</span>filename<span class="token punctuation">,</span>filepath<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">uigetfile</span><span class="token punctuation">(</span><span class="token string">'*.*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token punctuation">[</span>filepath<span class="token punctuation">,</span>filename<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 彩转灰，3为彩，2为灰</span><span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span>    im<span class="token operator">=</span><span class="token function">rgb2gray</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">%方法1</span>    im<span class="token operator">=</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">%方法2，通过提取R分量</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">% 彩转灰的另一种判断方法,3为彩，2为灰</span><span class="token keyword">if</span> <span class="token function">ndims</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token keyword">end</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 写图片，即保存到文件中</span><span class="token function">imwirte</span><span class="token punctuation">(</span>im<span class="token punctuation">,</span><span class="token string">'e:/1.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 添加噪声的函数 imnoise 具体使用看帮助文档</span><span class="token comment" spellcheck="true">% </span><span class="token string">''</span>中可以填入  gaussian  salt <span class="token operator">&amp;</span> pepper  等等<span class="token comment" spellcheck="true">% 注意imnoise处理图片的灰度值的类型为uint8或0~1的double型</span>im<span class="token operator">=</span><span class="token function">imnoise</span><span class="token punctuation">(</span>im<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">% 指数函数</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">% 自然对数ln</span><span class="token function">log2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">% 以二为底</span><span class="token function">log10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">% 以十为底</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    与 <span class="token function">im2double</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 的区别<span class="token function">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    会把图像的灰度值从uint8转为double型<span class="token function">im2double</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 对图像做的是归一化，会把图像的灰度值除以<span class="token number">255</span>，在把图像的灰度值从uint8转为double型，因此图像此时的灰度值范围为<span class="token number">0</span><span class="token operator">~</span><span class="token number">1</span>数据类型为double时，imshow的处理范围是<span class="token number">0</span><span class="token operator">~</span><span class="token number">1</span>数据类型为uint8时，imshow的处理范围是<span class="token number">0</span><span class="token operator">~</span><span class="token number">255</span>因此，数据类型为double且范围是<span class="token number">0</span><span class="token operator">~</span><span class="token number">255</span>，用imshow来显示图片会把大于<span class="token number">1</span>的都当作<span class="token number">1</span>，因此为一片白解决办法：figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>im<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">uint8</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>注<span class="token operator">:</span> 图像处理时用double，不会丢失精度，显示图片时用uint8型<span class="token function">zeros</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 构造值全为<span class="token number">0</span>的矩阵，注意类型为double<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 使用法<span class="token comment" spellcheck="true">% 针对一维</span>如 nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>temp<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>temp的值为<span class="token number">3</span>另一种语法<span class="token punctuation">[</span>temp<span class="token punctuation">,</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>temp的值为<span class="token number">3</span>，index的为<span class="token number">2</span>       <span class="token comment" spellcheck="true">% temp存储的为最大值，index存储的为下标</span><span class="token comment" spellcheck="true">% 针对多维，及矩阵,三个点的作用为在下一行接着写</span>nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">...</span>      <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">...</span>      <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>temp<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>temp的值为<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true">% 注意是每一列的最大值</span><span class="token punctuation">[</span>temp<span class="token punctuation">,</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>temp的值为<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index的值为<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% min()的用法与之同理</span></code></pre><h2 id="图像增强"><a href="#图像增强" class="headerlink" title="图像增强"></a>图像增强</h2><h4 id="空域点运算"><a href="#空域点运算" class="headerlink" title="空域点运算"></a>空域点运算</h4><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 点处理，作用于单个像素的空间域处理方法</span><span class="token comment" spellcheck="true">% 点运算是一种像素的逐点运算，是灰度到灰度的映射过程</span></code></pre><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 灰度变化增强（线性点运算、分段线性点运算、非线性点运算）</span><span class="token comment" spellcheck="true">% 线性点运算，给出一个线性方程f(x)=ax+b，对每个像素进行该方程的处理,看下面的例子(***注意以下是针对灰度图像***)</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">1.2</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">% a>1,图像的对比度增加(图像变亮);0&lt;a&lt;1,图像对比度减少（图像变暗）</span>b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>im<span class="token operator">=</span>a<span class="token operator">*</span>im<span class="token operator">+</span>b<span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 上述程序另一中写法</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">1.2</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span>a<span class="token operator">*</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 分段线性点运算,给出的方程为一个线性的分段的函数,例如0&lt;=灰度值&lt;150执行f1，150&lt;灰度值&lt;=200执行f2,200&lt;灰度值&lt;255执行f3</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>im<span class="token operator">=</span><span class="token function">im2double</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">% 这把图片的灰度值转为0~1，使运算更合理,精度不会丢失，得到图片的效果更好</span>                        <span class="token comment" spellcheck="true">% 转为0~1后，下面的范围都要除去255</span>res<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        <span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">&lt;=</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">150</span><span class="token operator">/</span><span class="token number">255</span>            <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">*</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">%f1(x)=x</span>        <span class="token keyword">elseif</span> <span class="token number">150</span><span class="token operator">/</span><span class="token number">255</span> <span class="token operator">&lt;</span> <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token operator">/</span><span class="token number">255</span>            <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">%f2(x)=2x+0.5</span>        <span class="token keyword">else</span>            <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">%f3(x)=-3x+9</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 非线性点运算，给出的方程为非线性的(都有通过循环的方式来做运算)</span><span class="token comment" spellcheck="true">% 反转变换</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>im<span class="token operator">=</span><span class="token function">im2double</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>im<span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span>im<span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 对数变换</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>im<span class="token operator">=</span><span class="token function">im2double</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>im<span class="token operator">=</span><span class="token number">0.5</span><span class="token operator">*</span><span class="token function">log</span><span class="token punctuation">(</span>im<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 幂次变化</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>im<span class="token operator">=</span><span class="token function">im2double</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>im<span class="token operator">=</span><span class="token number">0.2</span><span class="token operator">*</span><span class="token punctuation">(</span>im<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">% 注意是.^</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 另一种写法</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>im<span class="token operator">=</span><span class="token function">im2double</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0.2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">% 注意针对到每个像素时，用^</span>    <span class="token keyword">end</span><span class="token keyword">end</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 基于直方图的图像增强法(直方图均衡化、直方图规定化)</span><span class="token comment" spellcheck="true">% 直方图均衡化</span>步骤：<span class="token number">1</span>、读入一张灰度图像<span class="token number">2</span>、统计每个灰度的数目<span class="token number">3</span>、计算概率<span class="token number">4</span>、计算累积概率<span class="token number">5</span>、确定映射im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imhist</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 统计每个灰度的数目</span>count<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        <span class="token function">count</span><span class="token punctuation">(</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">% 计算概率</span>p<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">256</span>    <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>row<span class="token operator">*</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">% 计算累积概率</span>s<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">256</span>    <span class="token keyword">if</span> <span class="token number">i</span><span class="token operator">==</span><span class="token number">1</span>        <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">% 确定映射</span>s<span class="token operator">=</span><span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">.*</span>s<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">%进行累积分布取整</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imhist</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 直方图规定化</span><span class="token comment" spellcheck="true">% 规定化的实现有两种映射方式，单映射和组映射。这两者的区别在于映射的规则不同，之前的步骤大同小异。</span>步骤：<span class="token number">1</span>、读入原图像和标准图像<span class="token number">2</span>、统计原图和标准图的灰度个数<span class="token number">3</span>、计算两者的概率<span class="token number">4</span>、计算累积概率<span class="token number">5</span>、确定映射<span class="token number">6</span>、根据映射得到新图片单映射：单映射为原图当前灰度级的累积概率减去标准图片的所有灰度级的累积概率，取其中差值的绝对值最小的组成映射关系组映射：组映射为标准图片的当前灰度级的累积概率（概率为<span class="token number">0</span>时跳向下一灰度级）减去原图的所有累积概率，取其中差值的绝对值最小的灰度级做一个标志，与之前的灰度级组成一个范围。重复这个过程<span class="token comment" spellcheck="true">% 单映射</span><span class="token comment" spellcheck="true">% 读入原图像和标准图像</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>im_st<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row_st<span class="token punctuation">,</span>col_st<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>im_st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 统计每个灰度的数目</span>count<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count_st<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        <span class="token function">count</span><span class="token punctuation">(</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row_st    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col_st        <span class="token function">count_st</span><span class="token punctuation">(</span><span class="token function">im_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">count_st</span><span class="token punctuation">(</span><span class="token function">im_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">% 计算分布概率（可以使用和上面直方图均衡化中的循环来做，这演示另一中不通过循环的做法）</span>p<span class="token operator">=</span>count<span class="token operator">/</span><span class="token punctuation">(</span>row<span class="token operator">*</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>p_st<span class="token operator">=</span>count_st<span class="token operator">/</span><span class="token punctuation">(</span>row_st<span class="token operator">*</span>col_st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 计算累积概率</span>s<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s_st<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">256</span>    <span class="token keyword">if</span> <span class="token number">i</span><span class="token operator">==</span><span class="token number">1</span>        <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">s_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">p_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">s_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">s_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">p_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">% 确定映射</span>index<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">256</span>    values<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">256</span>        <span class="token comment" spellcheck="true">% 注意：原图减去标准图</span>        <span class="token function">values</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">s_st</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>temp<span class="token punctuation">,</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">% 看min()的用法</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">% 根据映射得到新图片</span>res<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">%注意zeros生成的矩阵默认类型为double</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token function">im_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">% 先加1是把灰度值+1与数组下标相映射，后减1是把index中存的下标转为灰度</span>    <span class="token keyword">end</span><span class="token keyword">end</span>res<span class="token operator">=</span><span class="token function">uint8</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imhist</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 组映射</span><span class="token comment" spellcheck="true">% 读入原图像和标准图像</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>im_st<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row_st<span class="token punctuation">,</span>col_st<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>im_st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 统计每个灰度的数目</span>count<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count_st<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        <span class="token function">count</span><span class="token punctuation">(</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row_st    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col_st        <span class="token function">count_st</span><span class="token punctuation">(</span><span class="token function">im_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">count_st</span><span class="token punctuation">(</span><span class="token function">im_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">% 计算分布概率</span>p<span class="token operator">=</span>count<span class="token operator">/</span><span class="token punctuation">(</span>row<span class="token operator">*</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>p_st<span class="token operator">=</span>count_st<span class="token operator">/</span><span class="token punctuation">(</span>row_st<span class="token operator">*</span>col_st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 计算累积概率</span>s<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s_st<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">256</span>    <span class="token keyword">if</span> <span class="token number">i</span><span class="token operator">==</span><span class="token number">1</span>        <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">s_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">p_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">s_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">s_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">p_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">% 确定映射</span>end1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>end2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>index<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">256</span>    values<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token function">s_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">256</span>            <span class="token comment" spellcheck="true">% 标准图减去原图</span>            <span class="token function">values</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">s_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span>temp<span class="token punctuation">,</span>end2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span>end1<span class="token operator">:</span>end2        <span class="token function">index</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">i</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    end1<span class="token operator">=</span>end2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">% 根据映射得到新图片</span>res<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">%注意zeros生成的矩阵默认类型为double</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token function">im_st</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>res<span class="token operator">=</span><span class="token function">uint8</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imhist</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="空域滤波"><a href="#空域滤波" class="headerlink" title="空域滤波"></a>空域滤波</h4><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 模板处理,作用于像素邻域的处理方法</span><span class="token comment" spellcheck="true">% 模板，本质为矩阵方块，其数学含义是一种卷积运算</span><span class="token comment" spellcheck="true">% 卷积运算，图像的在模板区域里的每个像素的灰度值和模板对应的数值相乘，在把这些值求和</span>针对卷积运算，有边界处理问题，有三种解决办法<span class="token number">1</span>、丢失边缘信息<span class="token number">2</span>、保留边缘信息<span class="token number">3</span>、扩展图像，根据模板大小扩行扩列</code></pre><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 平滑：模糊处理,去除图像中一些不重要的细节;减小噪声</span><span class="token comment" spellcheck="true">% 平滑滤波器(线性滤波器、非线性滤波器)</span><span class="token comment" spellcheck="true">% 线性滤波器(常用线性模板,均值滤波器)</span><span class="token comment" spellcheck="true">% 常用线性模板会给出了，用模板来做卷积运算</span>如模板为 <span class="token operator">:</span>   <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">1</span>                      <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">1</span>                      <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>im<span class="token operator">=</span><span class="token function">im2double</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token operator">=</span>im<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">%保留边缘信息</span><span class="token comment" spellcheck="true">% res=zeros(row,col);    丢失边缘信息</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>row<span class="token number">-1</span>            <span class="token comment" spellcheck="true">% 设n为模板大小，当前模板的大小为3，及n=3</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>col<span class="token number">-1</span>        <span class="token comment" spellcheck="true">% 2和row-1的1的算法:起始点=(n+1)/2;终止点=(n-1)/2</span>        <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">...</span>                 <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">...</span>                 <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">res</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">%均值滤波器 模板就是上面演示的模板</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 非线性滤波器</span><span class="token comment" spellcheck="true">% 统计排序滤波器(中值滤波器、最大值滤波器、最小值滤波器)</span>演示中值滤波器<span class="token punctuation">(</span>用像素领域内的中值来代替中间像素值<span class="token punctuation">)</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>row<span class="token number">-1</span>    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>col<span class="token number">-1</span>        nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">...</span>              <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">...</span>              <span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token operator">=</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">nums</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">%res(i,j)=nums(1);    最小值滤波器</span>        <span class="token comment" spellcheck="true">%res(i,j)=nums(9);    最大值滤波器</span>    <span class="token keyword">end</span><span class="token keyword">end</span>res<span class="token operator">=</span><span class="token function">uint8</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 锐化：加强图像的细节边缘和轮廓，增强模糊的细节</span><span class="token comment" spellcheck="true">% 锐化滤波器 -- 水平方向的一阶锐化、垂直方向的一阶锐化、Roberts算子、Sobel算子、Priwitt算子、Laplacian算子、Wallis算子</span>这些都是给定一个模板，让原图像和模板做卷积运算在处理过程中，有些像素的灰度值会变为负的，处理办法如下：<span class="token number">1</span>、给处理后的图片加上一个正整数，结果是获得类似浮雕效果<span class="token number">2</span>、所有像素取绝对值，结果是获得对边缘的有效提取</code></pre><h4 id="频域图像处理"><a href="#频域图像处理" class="headerlink" title="频域图像处理"></a>频域图像处理</h4><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 频域的作用：简化运算（在频域的乘法运算在空域中为卷积运算）</span>频域增强的步骤：<span class="token number">1</span>、读入一张图片，并进行频域变化  （一般为傅里叶变化）<span class="token number">2</span>、通过变化将频域移至中心<span class="token number">3</span>、构造转移函数（核心为转移函数的构造，其余步骤均为相同的格式化写法）<span class="token number">4</span>、转移函数和频域相乘<span class="token number">5</span>、反频域变化<span class="token number">6</span>、对图像的值取实部<span class="token number">7</span>、输出图片<span class="token comment" spellcheck="true">% 频域滤波分类（低通滤波器、高通滤波器、带通带阻滤波器）</span><span class="token comment" spellcheck="true">% 低通滤波器（理想低通滤波器、Butterworth低通滤波器、高斯低通滤波器）</span></code></pre><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 理想低通滤波器（完整过程，剩余的只注重于转移函数的构造）</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 步骤前两步</span>s<span class="token operator">=</span><span class="token function">fft2</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token function">fftshift</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 显示频谱</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">% s此时类型为double型，且值有负，因此取绝对值并加了一个[]</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">% 对频谱进行log运算后显示</span><span class="token comment" spellcheck="true">% 构造转移函数</span>d0<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>h<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        dis<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>row<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span>col<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> dis<span class="token operator">&lt;</span>d0            <span class="token function">h</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">h</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span>s<span class="token operator">=</span>h<span class="token operator">.*</span>s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 反频域变化</span>s<span class="token operator">=</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token function">ifft2</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 取实部</span>s<span class="token operator">=</span><span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% Butterworth低通滤波器</span><span class="token comment" spellcheck="true">% 构造转移函数</span>d0<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>h<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        dis<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>row<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span>col<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span>dis<span class="token operator">/</span>d0<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>s<span class="token operator">=</span>h<span class="token operator">.*</span>s<span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 高斯低通滤波器</span><span class="token comment" spellcheck="true">% 构造转移函数</span>d0<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>h<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        dis<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>row<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span>col<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>dis<span class="token operator">^</span><span class="token number">2</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>d0<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>s<span class="token operator">=</span>h<span class="token operator">.*</span>s<span class="token punctuation">;</span></code></pre><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 高通滤波器（理想高通滤波器、Butterworth高通滤波器、高斯高通滤波器）</span>高通滤波器和低通的区别为：高通让高频信息通过，低通让低频信息通过，因此，核心同样在与转移函数的构造上，可以直接取反低通滤波器来得到高通滤波器<span class="token punctuation">,</span>看下面的列子<span class="token operator">:</span><span class="token comment" spellcheck="true">% 高斯高通滤波器</span><span class="token comment" spellcheck="true">% 构造转移函数</span>d0<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>h<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        dis<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>row<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span>col<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>dis<span class="token operator">^</span><span class="token number">2</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>d0<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span>h<span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span>h<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">% 对低通滤波取反</span>s<span class="token operator">=</span>h<span class="token operator">.*</span>s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 或者是按照高斯高通的公式来完成</span>d0<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>h<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        dis<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>row<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span>col<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>dis<span class="token operator">^</span><span class="token number">2</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>d0<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">% 按照公式的方式</span>    <span class="token keyword">end</span><span class="token keyword">end</span>s<span class="token operator">=</span>h<span class="token operator">.*</span>s<span class="token punctuation">;</span></code></pre><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 带通带阻滤波器</span><span class="token comment" spellcheck="true">% 演示理想带阻和巴特沃斯带阻，带通取反即可</span><span class="token comment" spellcheck="true">% 构造转移函数</span>d0<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>w<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">% w表示带宽的大小</span>h<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        dis<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>row<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span>col<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> dis<span class="token operator">&lt;</span>d0<span class="token operator">-</span>w<span class="token operator">/</span><span class="token number">2</span>            <span class="token function">h</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">elseif</span> dis<span class="token operator">&lt;=</span>d0<span class="token operator">+</span>w<span class="token operator">/</span><span class="token number">2</span>            <span class="token function">h</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">h</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>d0<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>w<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>h<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>row    <span class="token keyword">for</span> <span class="token number">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>col        dis<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span>row<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">-</span>col<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dis<span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>dis<span class="token operator">^</span><span class="token number">2</span><span class="token operator">-</span>d0<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span></code></pre><h4 id="彩色图像处理"><a href="#彩色图像处理" class="headerlink" title="彩色图像处理"></a>彩色图像处理</h4><pre class=" language-matlab"><code class="language-matlab">彩色模型（彩色空间）：按照某种标准来指定颜色，为了便于硬件实现或便于对颜色的控制彩色空间有：RGB，CMY和CMYK，HSI，YUV，YCbCr等等</code></pre><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% RGB  (***注意以下是针对彩色图像***)</span>im<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% RGB彩色图三原色的分解</span>R<span class="token operator">=</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>G<span class="token operator">=</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>B<span class="token operator">=</span><span class="token function">im</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">% 由R、G、B分量合成彩色图片</span>res<span class="token operator">=</span><span class="token function">cat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>R<span class="token punctuation">,</span>G<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 判断读入的图像是否为彩色并作处理</span><span class="token keyword">if</span> <span class="token function">numel</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span>   <span class="token comment" spellcheck="true">% 或者  numel(size(im))==2 </span>    <span class="token function">disp</span><span class="token punctuation">(</span><span class="token string">'你输入的图片不是彩色图片'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">% 要有，直接退出程序，防止后续代码执行</span><span class="token keyword">end</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 彩色空间的转换</span>举例：RGB 转为 <span class="token function">YIQ</span> <span class="token punctuation">(</span>会给出转换的公式，根据公式来做<span class="token punctuation">)</span>Y<span class="token operator">=</span><span class="token number">0.299</span><span class="token operator">*</span>R<span class="token operator">+</span><span class="token number">0.587</span><span class="token operator">*</span>G<span class="token operator">+</span><span class="token number">0.114</span><span class="token operator">*</span>B<span class="token punctuation">;</span>I<span class="token operator">=</span><span class="token number">0.596</span><span class="token operator">*</span>R<span class="token number">-0.274</span><span class="token operator">*</span>G<span class="token number">-0.322</span><span class="token operator">*</span>B<span class="token punctuation">;</span>Q<span class="token operator">=</span><span class="token number">0.211</span><span class="token operator">*</span>R<span class="token operator">+</span><span class="token number">0.523</span><span class="token operator">*</span>G<span class="token operator">+</span><span class="token number">0.312</span><span class="token operator">*</span>B<span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 伪彩色图片处理（强度/密度分层技术、灰度-彩色变换法、频域滤波法）</span>根据一定的规则将灰度图像转化为彩色图像或将单色图像变换成给定彩色分布的图像<span class="token comment" spellcheck="true">% 强度/密度分层技术（要用到grayslice和jet函数）</span><span class="token comment" spellcheck="true">% 灰度-彩色变换法(对新建的R、G、B分量按照原图的灰度值分布来做空域相关处理，处理后合成为彩色图片)</span><span class="token comment" spellcheck="true">% 频域滤波法</span>步骤：<span class="token number">1</span>、对原图像做傅里叶变化<span class="token number">2</span>、构造出不同或相同的转移函数<span class="token number">3</span>、让这些转移函数和原图像的频谱相乘得到R，G，B三个灰度图片<span class="token number">4</span>、对三个分量做反傅里叶变化<span class="token number">5</span>、最后合成为彩色图片<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 全彩色图像处理</span>分类：<span class="token number">1</span>、对每个分量处理，最后三个分量合成为一张新的彩色图片     <span class="token comment" spellcheck="true">% 处理就是空域和频域中对灰度图像那些处理方法</span><span class="token number">2</span>、直接对彩色分量来处理<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>对彩色图像处理的一般步骤<span class="token number">1</span>、读入一张彩色图片<span class="token number">2</span>、分解三原色<span class="token number">3</span>、（可选）根据需要将RGB转到其他彩色空间<span class="token number">4</span>、对图像进行相应处理<span class="token number">5</span>、（可选）将处理结果转回RGB空间<span class="token number">6</span>、合并三个分量，输出图片</code></pre><h2 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h2><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 边缘提取</span>步骤：<span class="token number">1</span>、抑制噪声（低通、平滑、模糊、去噪）<span class="token number">2</span>、增强边缘信息（高通、锐化）<span class="token number">3</span>、定位边缘（边缘检测）<span class="token number">4</span>、边缘连接</code></pre><pre class=" language-matlab"><code class="language-matlab"><span class="token comment" spellcheck="true">% 边缘检测（点检测、线检测、霍夫直线检测）</span><span class="token comment" spellcheck="true">% 点检测</span><span class="token number">1</span>、通过算子（给定的模板）对图像进行处理<span class="token number">2</span>、设立阈值（单阈值或双阈值）<span class="token number">3</span>、单阈值：按要求来弄，如提取边缘的图像的当前灰度值超过设定的阈值，就赋值为<span class="token number">255</span>，反之，赋值为<span class="token number">0</span><span class="token number">4</span>、多阈值：一样，按照要求弄<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 线检测</span>给定一些方向模板（上、下、<span class="token number">45</span>度斜线、<span class="token operator">-</span><span class="token number">45</span>度斜线），用方向模板和经算子处理后的图片做卷积运算，得到的结果值最小的就是近似代表这个边缘的方向<span class="token comment" spellcheck="true">% 霍夫直线检测（难，略）</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% 边缘连接</span>在边缘检测后，通过梯度算子的响应强度和梯度方向确定两个点是否属于同一条边，是，就将两点之间的灰度赋值为<span class="token number">255</span>（一个数）<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token comment" spellcheck="true">% Canny算子（边缘提取目前最优算子，步骤较复杂，略）</span></code></pre><h2 id="图像复原"><a href="#图像复原" class="headerlink" title="图像复原"></a>图像复原</h2><pre class=" language-matlab"><code class="language-matlab">对图像的复原方法有空域处理、频域处理、其他方法对于空域的，考试不会超过图像增强中空域处理的办法，对于频域同理故，图像复原就水掉了</code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>此总结当作我学习图像的记录，花了两三天完成吧，期间还帮舍友补课。经过图像的学习，对于图片有了更多的理解，以及对于在计算机中坐标系的认识更加深入，后续如果我对于图像处理有更多的兴趣，我应该会在学一学计算机图形学吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>90后性生活图鉴</title>
      <link href="/blog/2021/05/25/18.90-hou-xing-sheng-huo-tu-jian/"/>
      <url>/blog/2021/05/25/18.90-hou-xing-sheng-huo-tu-jian/</url>
      
        <content type="html"><![CDATA[<p>最近看到一篇不错的科普文，是关于性相关的科普。</p><p>跳转链接为：<a href="https://www.163.com/dy/article/G4E1ALFM0518BOJ3.html#">https://www.163.com/dy/article/G4E1ALFM0518BOJ3.html#</a></p><h2 id="主体内容"><a href="#主体内容" class="headerlink" title="主体内容"></a>主体内容</h2><p><img src="https://img.maocdn.cn/img/2021/05/25/24.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/25.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/26.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/27.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/28.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/29.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/30.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/31.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/32.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/33.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/34.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/35.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/36.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/37.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/38.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/25/39.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跌倒的危害</title>
      <link href="/blog/2021/05/22/17.die-dao-de-wei-hai/"/>
      <url>/blog/2021/05/22/17.die-dao-de-wei-hai/</url>
      
        <content type="html"><![CDATA[<p>最近一阵因意外导致更新频率变慢（<del>话说没意外也会鸽的</del>），正如标题所述，本文将科普<strong>跌倒的危害</strong>。</p><h2 id="我的经历"><a href="#我的经历" class="headerlink" title="我的经历"></a>我的经历</h2><p>记得那是要放51劳动假的前几日，地面因昨晚下了雨是湿的，走的地方具有一定的坡度，倒霉的我经过时踩滑了，向后跌倒了，无意识下用手去撑地，结果就是手不能上下左右扭动，我以为不是什么大伤，心想过一会儿就好了，中午和晚上还喷了喷云南白药。第二天手还不见好，就去医院挂号、验伤。结果为三角骨骨折，打上石膏，右手基本不能用。</p><p><a href="https://img.wang/image/18.bFzzF"><img src="https://img.maocdn.cn/img/2021/05/22/18.jpg"></a></p><p><del>上图为我的右手被封印的样子</del></p><p>对于右手不能用之事，确有诸多不便之处。现为第4周，还需再等2周就可以去医院复查。在这段时间中，确实令人感受非凡，我也从中领悟了一些道？具体不便多说，话题还是转回跌倒。</p><p>我的这种状况我自己分析了下，我发现这专吃惯用手，在来不及思考的状况下，基于身体的本能用手去撑地，那股冲击力手是承受不了的，结果就如同我这般，轻则扭伤，重则骨折。这次的跌倒实属出乎我的识，说起来，我在这个学校里跌倒过4次，无疑这第4次是最严重的，对比前3次，都是向后滑，不同处为手的应激反应，之前3次跌倒都成手脚朝天的模样，属实丢脸，受伤状况为屁股疼。因此，此结论为<strong>不要小看跌倒</strong>，跌倒造成的危害我亲身经历过，我有发言权。</p><h2 id="跌倒危害之科普"><a href="#跌倒危害之科普" class="headerlink" title="跌倒危害之科普"></a>跌倒危害之科普</h2><p>跌倒是我国伤害死亡的第四位原因，在65岁以上的老年人中则为首位。每年大约30% 以上的老年人发生过跌倒。老年人一旦跌倒会造成很多不良后果，如骨折，尤其是髋关节骨折最常见，其次是皮肤擦伤、软组织损伤、脑震荡、脑挫裂伤、撞伤或开放伤、关节损伤等，甚至会引起脑出血等更加严重的后果，最终可导致老年人死亡，而更多的则是导致了跌倒的老年人产生了各种身体残疾！</p><h3 id="1-什么是跌倒"><a href="#1-什么是跌倒" class="headerlink" title="1.什么是跌倒"></a>1.什么是跌倒</h3><p>跌倒是指突发、不自主的、非故意的体位改变，倒在地上或更低的平面，是威胁患者安全的重要问题，病房患者治疗期间受病情、药物毒副作用的影响，跌倒发生的风险高，因此跌倒的预防尤为重要。</p><h3 id="2-跌倒高危人群"><a href="#2-跌倒高危人群" class="headerlink" title="2.跌倒高危人群"></a>2.跌倒高危人群</h3><p><img src="https://img.maocdn.cn/img/2021/05/22/22.jpg"></p><h3 id="3-跌倒原因"><a href="#3-跌倒原因" class="headerlink" title="3.跌倒原因"></a>3.跌倒原因</h3><p><img src="https://img.maocdn.cn/img/2021/05/22/19.jpg"></p><h3 id="4-跌倒的危害"><a href="#4-跌倒的危害" class="headerlink" title="4.跌倒的危害"></a>4.跌倒的危害</h3><p><img src="https://img.maocdn.cn/img/2021/05/22/20.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/05/22/21.jpg"></p><h3 id="5-跌倒的预防"><a href="#5-跌倒的预防" class="headerlink" title="5.跌倒的预防"></a>5.跌倒的预防</h3><p>1.长期卧床者，起床时动作缓慢，循序渐进，应遵循<strong>“三部曲”平卧30秒 ，坐起30秒，站立30秒</strong>。即第一个30秒:醒来后，勿立即起床，在床上躺30秒;第二个30秒:起来后，在床沿两腿下垂坐30秒;第三个30秒:下地后，靠床站30秒再行走。</p><p>2.在行走时，避免突然改变体位，引起体位性低血压，特别是夜间。</p><p>3.如您出现双眼发黑，下肢无力，行走不稳时，应立即原地坐（蹲）下或靠墙，并呼叫帮助。</p><p>4.请穿合适尺码的衣裤，不应穿拖鞋行走，鞋子的大小要刚好，注意防滑警示牌，发现地面潮湿时，请绕行。</p><p>5.行动不便，老年体弱，生活不能自理者，请在家属或陪护的陪伴下活动，不要自行离床活动。</p><p>6.如您在服用特殊药物：镇静安神药，降压药，降糖药，利尿药等，勿随意离床活动，应在陪同下行走。</p><p>7.在经常活动的地方，不要堆放杂物，保持走道通畅。</p><p>8.加强照明，卧室留夜灯，室内光线柔和，方便您行动。</p><p>9.卫生间做好<strong>地面防滑处理</strong>，避免发生滑倒事件。</p><p>10.日常生活用品不宜放置过高或过低，放在容易取到的地方。</p><p>11.室内家具摆放位置要合理，保持地面平坦无障碍。</p><p>在医院中，有跌倒10知，看下图</p><p><img src="https://img.maocdn.cn/img/2021/05/22/23.jpg"></p><h3 id="6-不幸跌倒"><a href="#6-不幸跌倒" class="headerlink" title="6.不幸跌倒"></a>6.不幸跌倒</h3><p>自己跌倒怎么起身？</p><p>按照一个原则：不要贸然起身，先评估受伤情况，只有在没受伤的情况下、感到自己有足够力量时，才应考虑站起来。</p><p>遇见别人（特别为老人）跌倒，该如何做？</p><p>切不可急于将老人扶起，应先观察老人的表情、神态，询问摔倒的原因，如遇到昏迷或有语言障碍的病人，即打急救电话；见呕吐病人，应将其头部侧向一边，以防呕吐物返回流入呼吸道引起窒息。如可以交流的老人，视情况给予帮助。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>大致科普了下跌倒，希望能给大家带来收获，还希望大家能对此引起重视。写下此文，故以记录，勿悲，勿忘，勿怒，勿现，吸取，向前，将，有义。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USB科普</title>
      <link href="/blog/2021/04/24/16.usb-ke-pu/"/>
      <url>/blog/2021/04/24/16.usb-ke-pu/</url>
      
        <content type="html"><![CDATA[<p>USB，<strong>U</strong>niversal <strong>S</strong>erial <strong>B</strong>us，<strong>通用串行总线</strong>，是连接计算机系统与外部设备的一种串口总线标准，被广泛的应用于个人电脑和移动设备等通讯产品。</p><h2 id="针对USB的简单科普"><a href="#针对USB的简单科普" class="headerlink" title="针对USB的简单科普"></a>针对USB的简单科普</h2><p>首先，目前常用的USB规范为USB2.0（<del>这个已经落后了</del>）、USB3.0（USB 3.1 Gen1/USB 3.2 Gen1）、USB3.1（USB 3.1 Gen2/USB 3.2 Gen2x1），<strong>传输速度</strong>是这三种规范的最大不同。USB2.0的传输速度最高为480Mbps，即60MB/s；USB3.0的理论传输速度为5.0Gbps，即500MB/s；USB3.1的理论传输速度为10Gbps，即900MB/s。对于这三者我介绍一个<strong>简单的区分方式</strong>：<strong>标识区分法</strong>（通过插口旁边的符号来区分）。</p><p><img src="https://img.maocdn.cn/img/2021/04/24/16.png"></p><p>介绍完USB的规范后，我们还应该了解USB<strong>接口的类型</strong>。同上，介绍最常见的四个类型。</p><p><strong>Type-A：标准版 USB 接口</strong></p><p>Type-A 是我们最常见的一种 USB 接口类型，在电脑上常用。但它有一些显著问题：有方向要求。必须从某个特定的方向才能将接头(公口)插入接口(母口)，但由于 USB 公口的两面外形非常接近，这个插入的过程经常出错。</p><p><strong>Type-B：打印机设备常用</strong></p><p>Type-B 是在打印机上最为常见和流行的一种数据接口类型，以及部分显示器也会被使用这样的接口。</p><p><strong>TYPE Micro-B：移动设备的 USB 标准</strong></p><p>最开始推出的安卓手机中采用的是 Micro USB 接口(即 USB Micro-B)，这种接口至今仍被广泛地应用在各种移动便携式设备上。</p><p><strong>Type-C：或将成为主流</strong></p><p>Type-C 虽然出现不久，但可以预见，随着 USB Type-C 技术的成熟，未来的各种笔记本、平板电脑甚至是智能手机都会开始普及 USB Type-C 接口。现在的Type-C基本有大一统的趋势了，基本上新出的电子设备都在将USB口设置为Type-C 接口。</p><p><img src="https://img.maocdn.cn/img/2021/04/24/17.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21Y3近况总结</title>
      <link href="/blog/2021/03/28/15.21y3-jin-kuang-zong-jie/"/>
      <url>/blog/2021/03/28/15.21y3-jin-kuang-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>还有3天3月就结束了，在这个时间段里属实不太行（<del>学习学到自闭是种什么感觉</del>）。先说说目前的自学成果，在这一个月里，重新学习了HTML，CSS。学完之后去了解了一下HTML5和CSS3的内容，进而去攻取JS，顺着JS又学习了html DOM，JSON，Ajax，JQuery和Vue。在j2ee上先自学完了servlet和jsp（这两个这学期web课要讲的），针对前端还学习了svg和canvas。写到这儿我都有点想吐槽自己了，越是学越能感觉到自己能力上的不足，学习的这些内容在规则上是很简单的，有些都是想通的，但到了我这里就尽显自闭气氛。总结为一句话，<strong>不熟练，很不熟练！</strong>针对这一点的解决办法为在后几个月主要为练习，多敲多敲总是有益的。</p><p>近来比较常玩的游戏为<strong>noita</strong>，针对游戏的感悟及理解会放在后面的总结里。</p><p>最后，分享一下我目前常用的两个学习网站。</p><p><a href="https://www.twle.cn/">简单教程</a></p><p><a href="https://how2j.cn/">How2j</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扣图指南</title>
      <link href="/blog/2021/03/14/14.kou-tu-zhi-nan/"/>
      <url>/blog/2021/03/14/14.kou-tu-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p>今天闲来无事，扣了扣图，一共扣了四张图，共计时间50分钟。本人使用的是PS（并未系统学习过），用的是钢笔扣图（<del>今天才学的</del>），之前只会用快速选择等等方法。下图是今日的成果：</p><p><img src="https://img.maocdn.cn/img/2021/03/14/PSlx1.png"></p><p>在今天的扣图之旅中，学习到的内容为：钢笔扣图，按键盘上<strong>P键</strong>将工具变为钢笔工具，用钢笔将图的外扩勾好后，按下<strong>ctrl+Enter</strong>键将勾好的内容变为选区。在扣图的途中，按下<strong>空格键</strong>会将工具变为抓取工具，方便拖动图像；按下<strong>ctrl+shift+i键</strong>会反选选区。扣图完成后，我不禁思考起一个问题，如何高效的扣图？</p><h2 id="画图3D"><a href="#画图3D" class="headerlink" title="画图3D"></a>画图3D</h2><p>这是我在知乎上看到的一个方法，挺不错的。使用的是<strong>win10自带的画图3D</strong>，对于我这等小白来说，不需要多专业的去操作，很简单就可以实现。打开软件后，按下左上角的<strong>神奇选择</strong>按钮，将要扣的东西选择好，之后按照需求增加选区的范围就行了（用这个方法，除了可以扣图外，还可以<strong>去水印</strong>）。对于图片的拖动，可以按着<strong>alt键</strong>后用鼠标拖动。</p><h2 id="扣图网站"><a href="#扣图网站" class="headerlink" title="扣图网站"></a>扣图网站</h2><p>不想自己动手扣图的话，可以选择去扣图网站，简单方便。我在这里就不推荐，如有需求可以利用搜索引擎去寻找。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>对于非专业者，上述的两种方法是十分实用且简单高效的。如果想要进阶的话，是需要自己去系统的学习。对于我而言，纯属些许兴趣罢了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql自学笔记</title>
      <link href="/blog/2021/03/08/9.mysql-zi-xue-bi-ji/"/>
      <url>/blog/2021/03/08/9.mysql-zi-xue-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库的基本操作"><a href="#数据库的基本操作" class="headerlink" title="数据库的基本操作"></a>数据库的基本操作</h2><pre class=" language-mysql"><code class="language-mysql">在cmd(以管理员身份运行)中:开启服务net start mysql57停止服务net stop mysql57#mysql57是下载mysql时的默认服务名显示数据库show databases;创建数据库create database if not exists school;创建数据库并设置字符编码为gbk(utf8)create database if not exists school charset=gbk;删除数据库drop database if exists school;查看创建的数据库show create database school;修改数据库 设置字符编码为utf8alter database school charset=utf8;使用school数据库use school;</code></pre><h2 id="表的基本操作"><a href="#表的基本操作" class="headerlink" title="表的基本操作"></a>表的基本操作</h2><pre class=" language-mysql"><code class="language-mysql">显示表show tables;最为简单的创建表create table if not exists student(    id int,    name varchar(30),    age int);标准的创建create table if not exists student(    id int(4) auto_increment primary key comment 'id',    name varchar(30) not null comment '名字',    address varchar(30) default '未知' comment '地址',    age int(3))engine=innodb;# auto_increment 自动增长# primary key    主键# comment ''     内注释# not null       填写时非空# default ''     设置默认值# engine=innodb  引擎(后面内容)查看表的结构desc student;删除表drop table if exists student;删除多张表,用逗号隔开drop table if exists stu,ooo,jjj;修改表，增加一个字段alter table student add phone varchar(10);修改表，在id后面加入一个字段alter table student add sex varchar(2) after id;修改表，加一个字段在开头alter table student add gender varchar(2) first;修改表，删除字段alter table student drop gender;修改表，修改表中的字段alter table student change sex gender varchar(4);修改表，只修改表中字段的类型alter table student modify phone varchar(1);修改表，把表重命名alter table student rename to person;</code></pre><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><pre class=" language-mysql"><code class="language-mysql">插入数据insert into teacher(id,name,phone,address) values(1,'Frank','1888888','上海');insert into teacher values(2,'Tom','000000','北京');   #teacher这个表后面的括号可以省略不写，省略后必须按照表的顺序来填写数据insert into teacher values(null,'jerry',null,null);#id字段为自动增长，写入 null时就会自动增长//name字段设置为 not null，因此性质决定不能为空#address字段可以写 null和 default，写入 default后会按照默认值存入insert into teacher(name,phone,address) values('haichao',null,null);#对于插入数据还可以这样写 插入多条数据insert into teacher values(null,'tom',null,null),(null,'jerry',null,null);删除数据delete from teacher where id=9;#删除 从 teacher表  在哪儿 -> id=9;#删除要按照唯一确定的来删，如不能以name来删，如删除name='张三'的，这样会把name为张三的全部删除delete from teachar where age>30;#删除age>30的数据清空表delete from teacher;#删除所有的数据，不推荐的写法#delete是遍历方式，性能不好，并且key值及会接着自动增长（如删除数据后新插入数据的id会为id=10这种）truncate table student;#清空表，过程为将整个表干掉，再重新创建删除的表更新数据update teacher set name='frank' where id=1;#更新 teacher表 在id=1的地方 重设置name为frank#where后的语句注意唯一性update teacher set name='frank',address='beijing' where id=1;#当没有 where时，会将所有的数据都修改update teacher set name='frank' where id=1 or id=2;#多条件的写法查数据（基本）select id,phone,address from teacher;#查id，phone，address这三个字段select * from teacher;#查所有字段从teacher这张表中#不推荐使用，性能有缺陷SQL语句区分DDL(data definition language)数据库定义语言(针对数据库) create alter drop showDML(data manipulation language)数据库操纵语言(针对数据) insert update delete selectDCL(data control language)数据控制语言(针对用户的)字符编码问题show variables like 'character_set_%';#在win10下，要显示中文必须使 character_set_client和character_set_results的值为gbkset character_set_client=gbk;#修改的方式#在实际开发中，character_set_%的值一定为utf8(遵循国际化),目前练习阶段可以为gbk。</code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>int 类型实际操作和注意事项</strong></p><pre class=" language-mysql"><code class="language-mysql">像人类年龄这种，就可以应用 tinyint unsigned因为年龄是不可能为负数，所有采用 unsigned ,并且年龄值不会超过255，所以采用 tinyint建表时 如: id int(4) auto_increment primary key comment 'id',int(4) 表示id采用的是int类型，(4)表示的是宽度，在插入数据时超过这个宽度也是可以的，但不能超过int类型的范围。</code></pre><p><strong>浮点数</strong></p><pre class=" language-mysql"><code class="language-mysql">用法:number_1 float(4,1)  (4,1)表示总长度有4位，小数位有1位。number_2 double(4,2) (4,2)表示总长度有4位，小数位有2位。在应用时:insert into test values(1.9,1.99999999); 当小数位超过定义的小数位宽度时，会四舍五入。有时也会发生精度丢失,如 values(1.9,1.111111)时，存入的值可能会变成1.10这种</code></pre><p><strong>定点数</strong></p><pre class=" language-mysql"><code class="language-mysql">用法:money decimal(20,19) (20,19)表示总长度有20位，小数位有19位。在 money 的存储中就可以用 decimal。decimal 存储的小数不会发生精度丢失，原因在于 decimal 的整数部分和小数部分是分开存储的。decimal 存储的小数当超过定义的宽度时同样会发生四舍五入。</code></pre><p><img src="https://img.maocdn.cn/img/2021/02/05/1.png"></p><p><strong>字符串和文本</strong></p><pre class=" language-mysql"><code class="language-mysql">char    定长字符串varchar 变长字符串 常用的字符串，会回收没有用到的空间，效率没有 char 高。text 常文本数据 如博客文章数据很多，就可以用这个。</code></pre><p><img src="https://img.maocdn.cn/img/2021/02/05/2.png"></p><p><strong>布尔</strong></p><pre class=" language-mysql"><code class="language-mysql">boolean 布尔类型用法:flag boolean,insert into test values(false);  boolean 值有 false 和 true, true 保存为1, false 保存为0。</code></pre><p><strong>枚举</strong></p><pre class=" language-mysql"><code class="language-mysql">用法:gender enum('man','woman','?','nothing')  对于这4个数据是以1，2，3，4进行管理的insert into test values('man'),(1)        存入的两个数据都是字符串man对于枚举里没有的数据写入会报错，如('www'),(5)这种好处:节省空间（存储的是数字，一个占2个字节），速度快，限制数据。</code></pre><p><strong>集合set</strong></p><pre class=" language-mysql"><code class="language-mysql">用法:hobby set('哲学','数学','IT','NBA','动漫')insert into test values('哲学,数学,IT,动漫')    注意 set和 enum的区别为选多个内容，并且是放在一起，用逗号分开错误列子为: insert into test values('哲学','数学','动漫','IT')</code></pre><p><strong>时间日期类型</strong></p><pre class=" language-mysql"><code class="language-mysql">行业规定，每一张表都应该有一个时间日期类型，表示这个数据是什么时候插入，删除等等。常用的时间日期类型为 datetime用法:createTime datetime insert into test values('2021-2-5 20:13:00')   这个一般都是由程序来建立准确的时间日期</code></pre><p><img src="https://img.maocdn.cn/img/2021/02/05/3.png"></p><h2 id="列属性完整性"><a href="#列属性完整性" class="headerlink" title="列属性完整性"></a>列属性完整性</h2><ul><li><strong>sql内注释和代码注释</strong></li></ul><p>单行注释</p><pre class=" language-mysql"><code class="language-mysql">-- 注释内容#注释内容</code></pre><p>多行注释</p><pre class=" language-mysql"><code class="language-mysql">/*注释内容*/</code></pre><p>内注释</p><p>字段后面加 **comment ‘注释内容’**，好处：可以给操作人员一个好的提示。</p><ul><li><strong>数据库完整性（理论，自己学）</strong></li></ul><p>①保证字段完整，要有一个主键来唯一标识</p><p>②数据类型要正确，有些字段可以为空，有些不能为空，有些字段应有default</p><p>③可能需要对外部的引用</p><p>④自定义约束</p><ul><li><strong>default</strong></li></ul><p>设置默认值，一个例子：在高考时，有个学生没有来，此时插入数据（考试成绩）不能填为0或null，此时应填为default（设置为缺考）。</p><ul><li><strong>auto_increment</strong></li></ul><p>自增。填了auto_increment必须是primary key，而primary key不一定是auto_increment。</p><ul><li><strong>primary key</strong></li></ul><p>主键，绝对唯一，能够区分大众数据，而且是当中最重要的一块，且具有唯一性，且能够确认数据的唯一性，存在性，不可重复性，</p><p>且有可能与其他的表产生关系。简单来说，primary key唯一的，不可重复的，必须要有，能被其他表引用。在插入数据时，主键值不能为null，当设置了auto_increment后可以将主键值设为null。</p><p>选择主键：最少情况选一个字段为主键，尽可能选更新改动少的，如id，身份证号。用一个主键就可以了，两个不好维护，用数字来作为主键（字符串不好处理）。</p><p>设置主键的好处：①保证数据的完整性②加快查询某种数据的速度</p><p><strong>后期（建完表之后）添加主键与删除主键</strong></p><pre class=" language-mysql"><code class="language-mysql">alter table teacher add primary key (id);alter table teacher drop primary key;</code></pre><ul><li><strong>组合键</strong></li></ul><p>一个表里不能有多个主键，但是能有多个字段组成的一个组合键，也可称为复合主键（依旧是一个主键）。</p><p>一个极端的使用案例：网站，id唯一，有些网站的昵称不可重复，可以这样使用组合键，但会出现问题——&gt;在查询时无法确定是以id还是name为准，及扩展性不好。</p><p><strong>设置组合键</strong></p><p>①在创建表时直接给</p><p>②后期添加</p><pre class=" language-mysql"><code class="language-mysql">alter table teacher add primary key (id,name);</code></pre><ul><li><strong>唯一键</strong></li></ul><p>唯一的，不可重复，且可以为null，与主键不同的是不能区分数据。在一个表中可以有多个唯一键，唯一键的作用：保证数据的不可重复性。在上述组合键的那个极端案例中就应使用唯一键。</p><p><strong>添加唯一键</strong></p><p>①在创建表时加入    使用<strong>unique</strong>关键字</p><p>②后期添加与删除</p><pre class=" language-mysql"><code class="language-mysql">alter table teacher add unique (name);alter table teacher drop index name;</code></pre><p>③添加多个唯一键</p><p>创建表时在需要的字段后面写入关键字 <strong>unique</strong></p><p>后期添加</p><pre class=" language-mysql"><code class="language-mysql">alter table teacher add unique (name,phone);</code></pre><ul><li><strong>外键</strong></li></ul><p>当两个表中有公共字段时，字段名不一定相同，此时可以使用外键来进行关联（如食堂交易表会使用到学生表的id）。<strong>外键只是学习用，实际开发中，对于并发的项目的处理禁止使用外键。</strong></p><p><strong>添加外键</strong></p><p>①在创建表时</p><pre class=" language-mysql"><code class="language-mysql">stuId int(4),     #定义的数据类型要和主表中的一致foreign key (stuId) references student (id),设置一个外键   是谁       它从哪张表来   从student表中的id字段</code></pre><p>②后期添加</p><pre class=" language-mysql"><code class="language-mysql">alter table teacher add foreign key (stuId) references student (id);</code></pre><p>③删除外键</p><pre class=" language-mysql"><code class="language-mysql">alter table teacher drop foreign key teacher_ibfk_1;#teacher_ibfk_1是这个外键的别名，删除外键不能通过字段来直接删除，要删除外键的别名#查看外键别名show create table teacher;</code></pre><p><strong>针对外键的操作</strong></p><p>置空操作：主表中id=5的人的数据被删除后，从表中对应的外键值会被设置为null。</p><p>级联操作：主表中id=5的人的数据被更新后（如id变为9），从表中对应的外键值会相应的变化。</p><p>置空操作一般是留给外界删除数据用的，级联操作一般是留给外界更新数据的。</p><pre class=" language-mysql"><code class="language-mysql">#在创建表，添加外键时foreign key (stuId) references student (id) on delete set null on update cascade# on delete set null 为置空操作# on update cascade  为级联操作</code></pre><h2 id="数据库设计思维"><a href="#数据库设计思维" class="headerlink" title="数据库设计思维"></a>数据库设计思维</h2><p>关系？  关系型数据库  两张表的公有字段去确定数据的完整性</p><p>行？  一条数据  一条数据记录  实体</p><p>列？  一个字段   属性</p><p>注意<strong>避免字段冗余</strong>，例如：总分这个字段，大学期末成绩考试的成绩不重视于总分，因此不需要这个字段；对于高考成绩来说，虽说总分可以由其余分数之和可得，但还是需要这个字段，原因在于高考查询人数很多，对于总分的权重更高。</p><p><strong>实体和实体之间的关系</strong>：1、一对一（一个家教指导一个学生）2、一对多（一个学生对于食堂的多条消费）3、多对一（多个程序员干一个项目）4、多对多（多个程序员完成多个项目）</p><p>遵循Codd六种范式，<strong>尽可能遵守</strong>，事实情况下，能用三个就不错了。</p><p>第一范式，确保每列字段的原子性（及<strong>保证每列字段不可再分</strong>）。拆分主要看：需要统计就要拆分，不需要统计时就不拆分。例：地区人口普查，按什么什么省，什么什么市来拆分，及省和市这有两个字段；而填写家庭地址时，就一个address字段，不需要拆分成省和市。</p><p>第二范式，非键字段必须依赖于键字段（及<strong>在该表中的字段要符合</strong>，如不能够在学生表中加一个总财产的字段，这显然不合理）。</p><p>第三范式，消除传递依赖（及<strong>多余的字段要考虑去掉</strong>）。</p><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><pre class=" language-mysql"><code class="language-mysql">select # select 可以做计算select 2*7;select '你好' as '世界';# as 取别名   '世界'作为字段名from# from ?? 来自哪张表select * from t1,t2;      # 查询所有数据从t1和t2表中，这个会出现笛卡尔积的现象dual# 默认伪表select 2*7;本质上是 select 2*7 from dual;where# 条件筛选用的。有< <= = >= > and or notinselect * from t4 where address in('beijing','shanghai');等价于select * from t4 where address='beijing' or address='shanghai';# in前可以加一个not，表示不包含这些数据的。between  and# 在...之间select * from t4 where age between 15 and 20;# 这个区间为[15,20]# between 前可以加not，表示取反is null# 是不是为空select * from t4 where age is null;# null 前可加 not,表示非空聚合函数（作统计用）# 求一张成绩表中所有语文成绩的和select sum(chinese) from score;# chinese 为score表中字段# 求平均值select avg(chinese) from score;# 求该列最大最小值max() / min()# 统计次数count()like 模糊查询select * from student where name like '张%';# 查性张的所有人，%表示一个或多个字符select * from student where name like '张_';# _(下划线)表示一个字符order by 排序查询select * from score order by math asc;# 从score表中查所有数据通过math升序排# asc 升序  desc  降序group by 分组查询# 求一个表中男性的平均年龄和女性的平均年龄select avg(age) as '年龄' , gender as '性别' from student group by gender;# 记住，要使用group by, 查询的字段必须是分组字段和聚合函数group_concat# 使数据聚合显示select group_concat(name),gender from student group by gender;having# 用于查询后的表（如分组查询后构成的虚拟表）的条件筛选# 而 where是用作原来的表（及查询前有的表）作条件筛选select avg(age) as 'age', address as 'address' from student group by address having age>24;distinct / all# distinct 去重select distinct address from student;select address from student; 本质上是 select all address from student;</code></pre><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><pre class=" language-mysql"><code class="language-mysql">union 联合查询select name,age from student union (这里本质上有 all,可换为 distinct) select name,age from teacher;inner join# 内连接,一定要有公共字段select name,score from student inner join score on student.id=score.stuId;# 一张学生表，一张学生的成绩表，两者有个公共字段# student inner join score ,将student表和score表进行内连接# on student.id=score.stuId,通过两张表中的公共字段作为连接依据left join# 左连接，以左表为基准（基准含义为:当基准表中有的而非基准表中没有的会将基准表中的显示出来）right join# 右连接，以右表为基准cross join# 交叉连接select * from t1 cross join t3;# 会返回一个笛卡尔积natural join# 自然内连接，会以同名字段作为两张表的连接依据natural left join / natural right join    自然左/右连接# 当无同名字段时，会返回笛卡尔积# 当自然连接时有两个或两个以上的同名字段，会返回空表回来# 当自然连接时有两个或两个以上的同名字段，会返回空表回来using# 用来指定连接的字段（当两张表有同名字段时）select * from t1 inner join t3 using(id);# 实际上不常用自然连接和using，一般用inner join 进行内连接并写全代码</code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><pre class=" language-mysql"><code class="language-mysql">基本语法# 查询分数表中分数大于85分的学生在学生表中的所有信息select * from student where id in(select stuId from score where score>=85);# not in 取反  in 可理解为相同，等于exists/not exists  存在/不存在select * from student where exists(select stuId from score where score>=85);# 如果有人分数>=85就查询全班所有人的信息</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21Y1-2游戏总结</title>
      <link href="/blog/2021/02/28/13.21y1-2-you-xi-zong-jie/"/>
      <url>/blog/2021/02/28/13.21y1-2-you-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>如标题所言，本篇文章是对于我在2021年1至2月所游玩的游戏的一个总结。为什么要做一个总结呢？我想记录一下在这个时间段里我游玩的游戏以及这些游戏带给我的<del>感动</del>。</p><h2 id="HADES"><a href="#HADES" class="headerlink" title="HADES"></a>HADES</h2><p>作为<strong>2020年的年度最佳独立游戏</strong>，由制作过《堡垒》《晶体管》的制作组<strong>Supergiant Game</strong>开发，一款上手门槛较低，令人眼前一亮，又极易上瘾的<strong>Roguelike</strong>游戏。早在预购阶段，我就关注到了这个游戏，碍于时间原因，我直到1-2这个时间段才完整的通关（<del>将王子老妈带回来了</del>），目前对于这款游戏还有一些目标，如全好感度的卡通物收集，后续剧情的打通（众神宴）和高热度的挑战等等。</p><p>在我刚开始玩这款游戏时，我被其剧情和画面所震撼，话不多说，先放几张游戏截图。</p><p><img src="https://img.maocdn.cn/img/2021/03/01/hades1.png"></p><p><img src="https://img.maocdn.cn/img/2021/03/01/hades2.png"></p><p><img src="https://img.maocdn.cn/img/2021/03/01/hades3.png"></p><p><img src="https://img.maocdn.cn/img/2021/03/01/hades4.png"></p><p><img src="https://img.maocdn.cn/img/2021/03/01/hades5.png"></p><p><img src="https://img.maocdn.cn/img/2021/03/01/hades6.png"></p><p>从上至下6张截图分别是游戏里<strong>塔耳塔罗斯</strong>的景色、<strong>水仙花平原</strong>的景色、<strong>至福乐土</strong>的景色、打败哈迪斯后前往希腊途中看见的<strong>日升</strong>的景色、<strong>冥府殿</strong>的蝙蝠视角图、母亲归来解锁的画像。</p><p>对于剧情部分，我只能这样说，本作的<strong>文本量十分大</strong>，在我的映象里，到接老妈回家的一次次挑战中，与人物的对白很少有重复的。对于每一局的战斗，一个字，爽。但容易发生按坏键的问题（<del>我电脑的空格键就有点失灵的感觉</del>）和手按酸的问题。关于HADES，我说说我体验到的不好的地方：资源的获取太少了，在前期还好，主要出现在中期，武器形态的解锁和升级所需的泰坦血、人物好感度提升所需的蜜酒和仙酒、买歌和部分家具所需的钻石和宝石、提升天赋需要的黑暗。那么我们开一局（非新热度的挑战）所能获得的资源为泰坦血和钻石2选1（这还是一局里省金币才能买到），对于这点来说还是太费肝了（<del>我选择改游戏源码来调资源</del>）。</p><p>最后，感谢HADES伴我度过了50h的开心时光，下次空闲的时候在见吧！</p><h2 id="姬恋"><a href="#姬恋" class="headerlink" title="姬恋"></a>姬恋</h2><p>在1月末玩的，本想玩后就写一篇来纪念的，没想到拖到了今天。。。这个游戏怎么说呢，首先是游戏类型，我不太清楚详细的游戏类型的区别，就姬恋而言我不知ADV和galgame这两个标签哪一个对于这个游戏来说更好，我就以我的主观来选择，我选<strong>ADV</strong>（<del>少敲4次键盘</del>）。</p><p>姬恋，完整的全名为<strong>姬恋~缚羽的欠片</strong>，玩的版本为v1.04。<strong>有R18内容</strong>，请按照游戏一开始的警告：未成年请在家长的陪同下游玩。不开玩笑了，先聊聊这个游戏的剧情，百合作，一共有4条线，游戏简述为从小分离的姐妹再次相逢后的的<strong>恋爱故事</strong>。作为<strong>我玩的第一款百合作</strong>，两条坏线太伤我心了。其他先不多说，先来认识认识本作的两位主角。</p><p><img src="https://img.maocdn.cn/img/2021/03/01/jl1.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/03/01/jl2.jpg"></p><p>游玩体验：最满意的是姐姐拥抱妹妹及<strong>结婚</strong>这条线（第一次打出的就是这条），对于妹妹拥抱姐姐这条<strong>私奔线</strong>来说也还行，剩下的两条坏线可真难受，一个是姐姐病娇化，一个是妹妹病娇化，可谓是心痛，这难道就是传闻中的心意不相通造成的结果吗，我还是没法接受这两条线，想起来就难受。对于本作游玩过程中体验不好的地方也有，就是在新开推妹妹主导的线路时剧情没有太多的变化，咱都是一路快进跳过看的，感觉就是在几个关键的选择后就导向结局一样。下面，分享一些截图，有一张是结婚线最后结局（<del>瑟瑟的图片是不能发滴</del>）。</p><p><img src="https://img.maocdn.cn/img/2021/03/01/jl3.png"></p><p><img src="https://img.maocdn.cn/img/2021/03/01/jl4.png"></p><p>最后，作为我入门的第一款百合作，成功的让我有了兴趣去推其他作品，感谢姬恋伴我度过的时光。</p><h2 id="夏日狂想曲"><a href="#夏日狂想曲" class="headerlink" title="夏日狂想曲"></a>夏日狂想曲</h2><p>完整的全称为夏日狂想曲+ 乡间难忘的回忆，玩的版本为v2.02。游戏类型为<strong>SLG</strong>，嗯，又是一部具有<strong>R18</strong>内容的游戏，大致简述一下开头剧情吧，在这个夏天，你的父母因为工作忙，将你寄托在了堂姐的家中，无论对堂姐一家人做多么奇妙的事情都可以被原谅，只要你撒撒娇，就可以享受大姐姐和阿姨全心全意的爱意，那么赶紧去度过一个难忘的夏天吧。总结一下，<strong>小马拉大车</strong>的一部作品。</p><p>游戏内是你作为主角度过30天，每天结束的时候男主会将今日最难忘的事情作一个绘图日记（绘图日记的收集数一共有92页，这个挺难全收集的），在这30天里留下难忘的回忆。第一周目完成后，可选择将属性<strong>继承</strong>到第二周目（常规模式）。主线是和家里的3位亲人提升好感度，其还有5条支线，通过支线完成任务后可以提升与各位支线女主的好感度。唔姆，在这儿就不说H相关的内容，单单谈论一下这个游戏里面内置的小游戏，说实话，小游戏还挺好玩的。这些小游戏都要需要控制好<strong>计量条</strong>，如和结衣姐姐的四则运算，帮帮美雪姑姑洗碗，钓鱼，玩拍拍卡，和镜姐姐训练跑步这些，其他的就不多说了，放一些截图（<del>瑟瑟的图是不可能传的</del>）。</p><p><img src="https://img.maocdn.cn/img/2021/03/01/xr1.png"></p><p><img src="https://img.maocdn.cn/img/2021/03/01/xr2.png"></p><p><img src="https://img.maocdn.cn/img/2021/03/01/xr3.png"></p><p><img src="https://img.maocdn.cn/img/2021/03/01/xr4.png"></p><p>第四张图片是我将各个女主A在一起用来回忆回忆用的。</p><p>最后，我相信男主留下了无数宝贵的回忆（<del>29日的特殊回想，让我心痛姑父一秒，同时我还想说一句，姑父，您那顶新帽子可真好看</del>），而我在这个游戏里也度过了一段不错的时光，我不禁回想，夏日的时光，可能我已经体会不到如同游戏里那种纯粹的快乐，但我在游玩的这段时间里，我无疑是体会到了夏日的感觉，这种感觉，有点不错的。感谢夏日伴我度过的20h，那阵阵蝉叫（<del>蝉在叫，人坏掉</del>）不会使我忘却本人玩过这款游戏滴。</p><h2 id="总谈"><a href="#总谈" class="headerlink" title="总谈"></a>总谈</h2><p>其余还有5款游戏，就不 一 一 记录了。可能有人会问我（<del>我自问自答的</del>），好好的假期被游戏所荒废，你不心痛吗？我肯定的回答到，不心痛。流逝的时间不会因我心痛不心痛而回来，何况我在这些时间里体验？经历？那种都好，我以第三人称的视角去见证他们的物语（故事），我这人啊，就是喜欢看故事，爱幻想，那么，在我如今如此佛系的境况下，时常感到无聊，在极度无聊的状况下啥事都不想干，什么也不去妄想，无意义无意义无意义。。。最终会如何变化呢？总之，感谢伴我度过的时光，OVER。（<del>有种写公开日记的感觉，好羞耻啊，我博客部署在码云上，应该没人看吧，应该吧</del>）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游后感 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/blog/2021/02/19/10.kuai-su-pai-xu/"/>
      <url>/blog/2021/02/19/10.kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序的介绍"><a href="#快速排序的介绍" class="headerlink" title="快速排序的介绍"></a>快速排序的介绍</h2><p>快速排序是由冒泡排序演变而来的算法，同冒泡排序一样，快速排序也属于<strong>交换排序</strong>（通过元素之间的比较和交换位置来达到排序的目的），快速排序比冒泡排序要高效很多，这主要是快速排序采用了[<strong>分治法</strong>]，及<strong>快速排序在每一轮挑选一个基准元素，并让其他比它大的元素移动到数列的一边，比它小的元素移动到数列的另一边，从而把数列拆解成了两个部分，这两个部分在下一轮中又同理分别被拆解为两个部分，直至不可在拆解</strong>。对比于冒泡排序在每一轮只把一个元素移动到数列的一端来说，效率更高，因此被称作快速排序。</p><h2 id="基准元素的选择"><a href="#基准元素的选择" class="headerlink" title="基准元素的选择"></a>基准元素的选择</h2><p>最为常见的方式是<strong>选择数列的第一个元素</strong>。这种选择在大部分情况下都没问题，但是当一个逆序数列要排序成顺序数列，这时整个数列在每一轮中并不会分为两部分，在每一轮中仅仅是确定了基准元素的位置，在这种情况下效率就和冒泡排序差不多。</p><p>解决上述问题的办法很简单，及选择基准元素时<strong>随机选择一个元素作为基准元素</strong>，这样选的话同样有极小的机率选到数列的最大值或最小值，同样会影响到分治的效果。</p><p>因此，快速排序的平均时间复杂度是O(nlogn)，最坏情况下的时间复杂度是O(n^2)，所以，快速排序是一种不稳定排序。</p><h2 id="元素的移动"><a href="#元素的移动" class="headerlink" title="元素的移动"></a>元素的移动</h2><p>对于元素的移动有两种方式。</p><ul><li><p><strong>挖坑法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//递归结束条件的判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>startIndex <span class="token operator">&lt;</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//选择的第一个元素作为基准元素</span>            <span class="token keyword">int</span> pivot<span class="token operator">=</span>nums<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//左右下标</span>            <span class="token keyword">int</span> left<span class="token operator">=</span>startIndex<span class="token punctuation">;</span>            <span class="token keyword">int</span> right<span class="token operator">=</span>endIndex<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//找出右边比基准元素小的元素</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把找出的元素填到左边的坑中，左下标向后移一位</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//找出左边比基准元素大的元素</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//把找出的元素填到右边的坑中，右下标向前移一位</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//上述循环完成后,left=right，将基准元素填入坑中</span>            nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>pivot<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将拆分的两部分递归执行上述操作</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>startIndex<span class="token punctuation">,</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>指针交换法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//递归结束条件的判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>startIndex <span class="token operator">&lt;</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//选择的第一个元素作为基准元素</span>            <span class="token keyword">int</span> pivot<span class="token operator">=</span>nums<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//左右下标</span>            <span class="token keyword">int</span> left<span class="token operator">=</span>startIndex<span class="token punctuation">;</span>            <span class="token keyword">int</span> right<span class="token operator">=</span>endIndex<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//找出右边比基准元素小的元素</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//找出左边比基准元素大的元素,注意这两个循环的顺序，不能颠倒</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将找到的两个元素交换</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> t<span class="token punctuation">;</span>                    t<span class="token operator">=</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//上述循环完成后,left=right，将基准元素和两下标重合的元素交换</span>            <span class="token comment" spellcheck="true">//注意此处的startIndex是以基准元素的选择为准，及随着基准元素选择的改变而改变</span>            <span class="token comment" spellcheck="true">/* 一个列子，当选择中间数为基准元素时                int pivot=nums[(startIndex+endIndex)/2];                nums[(startIndex+endIndex)/2]=nums[left];                nums[left]=pivot;            */</span>            nums<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>pivot<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将拆分的两部分递归执行上述操作</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>startIndex<span class="token punctuation">,</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>指针交换法和挖坑法相比较，元素的交换次数更少。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在上述内容中我所介绍的快速排序是十分基础的，对于快速排序还有很多改进的版本，我在这里说明一下：在选择基准元素的时候可以采用<strong>三数取中法</strong>；当排序序列的长度拆分到一定大小后，可以在其中<strong>使用插入排序</strong>（对于很小和部分有序的序列来说，快排没有插排好）； 对于在代码段的后面有两次递归操作，对于递归操作也可以<strong>通过栈来实现非递归操作</strong>。</p><p>总之，有兴趣的话可以深入的研究研究，对于我来说，目前对于快排的学习到达这个地步就行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于微信公众号的研究(后日谈)</title>
      <link href="/blog/2021/02/13/12.dui-yu-wei-xin-gong-zhong-hao-de-yan-jiu-hou-ri-tan/"/>
      <url>/blog/2021/02/13/12.dui-yu-wei-xin-gong-zhong-hao-de-yan-jiu-hou-ri-tan/</url>
      
        <content type="html"><![CDATA[<p>就在今天晚上我照常更新公众号的时候，群发完今日的ACG杂图后，等了5，6分钟，我收到了公众平台安全助手发来的通知，说是我的公众号因违反规则被<strong>永封</strong>了(警告都没有直接永封，这作法太……)。</p><img src="https://img.maocdn.cn/img/2021/02/13/15.jpg" height="800px" width="600px"><p>对于<strong>永封</strong>这个事件，<strong>标志着我对于公众号的研究走到了尽头</strong>。那我就总结一下我这近一个月的公众号更新的心得吧。</p><p>在这一个多月里，开头几天的更新算是比较耗时间，因为对于公众号本身的不熟悉。在干了几天后，轻车熟路了起来，更新所花费的时间变得少了，找素材的时间照旧，从中得出了一个道理，<strong>做同一件事做的多了，会得到名为技巧的东西。</strong>我对于技巧的理解为:<strong>技巧是那种前3成靠时间累积，中3成靠知识沉淀，后4成靠思维创新。</strong></p><p>最后，总结一下吧，对于公众号的研究已经完结了，永封的解除很难，在这个事件中我所吸取的教训为：身处一个平台时，应熟读当前平台的规则，在适合的情况下钻漏洞，别像我这样傻不拉几的因<strong>触犯规则</strong>(<del>咱们没有打破规则的能力，只能在边缘游走</del>)而被封号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吃瓜之lex事件整理</title>
      <link href="/blog/2021/02/08/11.chi-gua-zhi-lex-shi-jian-zheng-li/"/>
      <url>/blog/2021/02/08/11.chi-gua-zhi-lex-shi-jian-zheng-li/</url>
      
        <content type="html"><![CDATA[<p>对于一般性质的吃瓜事件我都是秉承着<strong>让子弹多飞一会儿</strong>的态度并且以<strong>观测者</strong>的身份入围，但我今天吃瓜竞吃到自己待的圈子上了，作为<strong>动漫爱好者</strong>(就一臭看动漫的)，因追番列表中有无职转生竞沦落为某知名UP主口中的人下人Σ(ﾟﾛﾟ;)。</p><h2 id="吃瓜指引"><a href="#吃瓜指引" class="headerlink" title="吃瓜指引"></a>吃瓜指引</h2><p>论如何举报B站UP主[LexBurner] ？- 知乎</p><p><a href="https://www.zhihu.com/question/443128396/answer/1717972242">https://www.zhihu.com/question/443128396/answer/1717972242</a></p><p>指路</p><p>2.1号蕾皇地图炮观众:<br><a href="https://www.bilibili.com/video/BV1ef4y167ZT">二次元教父之《无职转生》圣经</a></p><p>2.2号蕾皇直播辱骂无职长评作者:<br><a href="https://www.bilibili.com/video/BV1gK4y1Q741">LexBurner2月2日录播删减片段(带弹幕版)</a></p><p>2.3号蕾皇回复无职转生事件:<br><a href="https://www.bilibili.com/video/BV1nf4y1r7Vd">Lex对无职转生一事的回复</a></p><p>2.3号蕾皇直播cue泛式和瓶子:<br><a href="https://www.bilibili.com/video/BV1xX4y1N7Rj">雷皇yygq泛式和瓶子，不愧是人上人</a></p><p>2.4号蕾皇直播间吞钱:<br><a href="https://www.bilibili.com/video/BV1VK4y1Q7c4">【冲蕾战报】2.4录播片段 一万sc秒删事件</a><br><a href="https://b23.tv/rgNnTb">https://b23.tv/rgNnTb</a><br>2.5号蕾皇在王者峡谷道歉:<br><a href="https://b23.tv/vNMNPz">https://b23.tv/vNMNPz</a><br>无职转生作者的回应:<br><a href="https://b23.tv/He4fKg">https://b23.tv/He4fKg</a></p><h2 id="相关讨论"><a href="#相关讨论" class="headerlink" title="相关讨论"></a>相关讨论</h2><p>事件发生后，花了一些时间浏览了AB站、知乎、贴吧等等，收集了一些有意思的。</p><p>「泛式/录播」<strong>2月6日</strong>例行新番杂谈回   转自知乎 陈子浩<br>去看了泛式昨晚的录播，有点小感慨 ，链接我放评论区在第3分p。泛式从日本深夜动画的属性和中日差异，到互联网和现实界限模糊，再承认很多剧情的确恶心，肯定了动画制作组的作画和改编水平，并从创作者的角度去分析制作组哪里做得好，思考争议的第四集如何提高。真的，泛式讲的非常全面了，也算是非常客观。期间，他的妻子竹鱼一直想岔开他的话题，最后急了说道：“你说的话，和你对立的观众根本听不进去，他们只会把你说的话当做攻击你的武器”。泛式沉默了，说“难道我以后只能说观众爱听的东西了吗？”，又是一段沉默。<strong>果然，很快微博和豆瓣都有大量言论开始讨伐泛式，指责他为无职洗地，再到他不听老婆劝告，最后开始称呼他为“公狗”，诅咒他们离婚，把竹鱼对泛式的担心曲解为泛式洗地出轨把她气哭 。</strong><br>想说很多，咽下去了，就说三句吧：<br><strong>①泛式无愧于他的学历，逻辑和思考能力都是up中的一流。</strong><br><strong>②某些微博和豆瓣用户“围泛救蕾”的稍微要点脸。</strong><br><strong>③泛式竹鱼真是神仙爱情，祝白头偕老。</strong></p><p><img src="https://img.maocdn.cn/img/2021/02/08/6.png"></p><p><strong>对于无职(B站国区)下架的相关评论</strong></p><p>这波何止是双赢，这是<strong>五赢</strong>啊。</p><p>想看《无职转生》的观众不用当人下人。</p><p>讨厌《无职转生》的踢出了讨厌的动画。</p><p>蕾丝粉丝成功守护了自己最喜欢的哥哥。</p><p>蕾丝再次证明了自己二次元皇帝的实力。</p><p>叔叔再次保护了B站不受辣鸡动画的荼毒。</p><p>最重要的是，阿宅们终于听到了叔叔的真心话。</p><p><strong>“这里是BILIBILI，该滚的是你们二次元吧。”</strong> </p><hr><p>这次因为舆论导向，随意下架，。不把保护会员权益，只考虑自己问题，。，。太没原则了 </p><p><strong>B站的一些评论:</strong></p><p>一个被霸凌过的人，在直播带粉丝去霸凌其他动漫爱好者。<br>一个靠二次元起家恰饭的人，现在是急着与他的二次元的粉丝与历史迅速割裂。所谓吃奶骂娘不过如此。  </p><hr><p>几年前：<br>“本人在南京长大 由于父母是外来务工人员 也就是俗称的农民工” “原来快乐不是下班回家看动漫玩游戏这么简单啊 我也好想和他们一样去现充 去嗨 去逛这里逛那里 去各种以前想都不敢想的场合 然后猛然回首 还是看动漫玩游戏适合老子”<br>几年后：<br>“我对一个废物的心理成长是完全没有兴趣的”<br>“那种人属于或许我一辈子不会多看一眼的类型，我为什么要去了解他的生平”<br>“你要是成功人士看这种动画的心情就是体恤底层人士的那种感觉”<br>“如果你是人生赢家，你根本没必要去体会一个比你阶级低比你品行意志力都差的这么一个人的感受”<br>“像你们这种人只能在下水道里度过一个相对比较失败的人生” </p><hr><p>典型的小布尔乔亚的优越感逻辑<br>实际上不过是比上不足比下有余，本身靠平凡者的供养来生活<br>却因为对“上流阶层”的“崇拜”，不断放低身段去捡“上层”留下的残渣，可悲的希望得到“上层”的认同感<br>同时出于内心深处的自卑，不断想通过贬低平凡者来否认自己曾经也是平凡者一员的现实<br>他们的内心中渴望着通过这种方式达成“精神上的升层”，并借着“精神的升层”达成现实阶层的提升<br>实际上却忘记了精神的层次与现实的阶层并无太多关系<br>他们往往将自我的成功归结为个人奋斗的产物，而实际上这个阶级不乏大量以运气为主要成功因素的人<br>他们内心意识到也隐隐这点，而由此产生的自卑，使他们常常喜欢将大量的精力鼓吹自己的努力，殊不知将这些经历真正投入奋斗的人往往已超越了他们。（转发）</p><p><strong>贴吧的评论</strong></p><p><img src="https://img.maocdn.cn/img/2021/02/07/4.jpg"></p><p>近日，有国内的网友把lexburner吐槽《无职转生》的那些争议性言论放到了外网上，甚至直接传给了《无职转生》的小说原作者理不尽な孫の手。在看到作品被这么评价之后，理不尽な孫の手也是忍不住出来发声。</p><p><img src="https://img.maocdn.cn/img/2021/02/08/7.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/02/08/8.jpg"></p><p><strong>lex新瓜速递，为了看这瓜，大半夜我冒着猝死的风险大概整理了一下</strong></p><p>①：lex在微博道歉，控评控住了。</p><p>②：lex一看微博情况不错，就去b站把微博的东西复制过去了，结果评论区没控制住，全是骂lex的。</p><p>③：不到一个小时，lex就以百万浏览夺得b站热搜第一，情况不容乐观。</p><p>④：b站不想把这个九百万粉丝的大流量舍弃掉，于是随机应变，偷梁换柱，把lex的热搜第一换成了“合成北大”（合成大西瓜的翻版，被b站随便找来当挡箭牌）</p><p>⑤：有人在这个挡箭牌up主的评论区说“只要你把b站删了，尴尬的就是陈睿，这瓜吃起来就好玩了”（原话见图），结果这个up主真把视频删了，留下来的热搜第一什么也搜不到。</p><p>⑥：过了二十几分钟，b站后知后觉，为了防止lex再回到热搜第一，b站强行把已经在周三更新过了的刺客伍六七拉到热搜第一，做lex的挡箭牌。</p><p>⑦：刺客伍六七的所有热门相关视频都被利用顶替lex相关内容。</p><p>⑧：lex被曝0级粉丝占比65.18％，b站转发区已经被控评；洗白评论往往只有一百赞，却有近千转发（因为每个号都可以转发很多次，所以可以请水军大规模转发以此置顶）</p><p>⑨：lex现在每分钟掉500粉丝，但是与此同时也有很多吃瓜群众和0级号在关注lex，如果不算刷的僵尸粉，lex现在的粉丝大概只有200w左右</p><p>有很多没有侮辱性词汇的评论和转发莫名消失，懂得都懂</p><p><img src="https://img.maocdn.cn/img/2021/02/08/10.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/02/08/9.jpg"></p><p>【已排雷，请随意复制】<br>网爆路人只字不提，五年坚持头像抄袭。<br>天大错事言语过激，归根到底无职垃圾，<br>岔开话题便于洗地，假意道歉实则游戏。<br>一切录播都是曲解，所有截图都是放p，<br>三.十.打.赏.怎配提及，钱财至上三观成迷<br>网爆路人只字不提，五年坚持头像抄袭。<br>天大错事言语过激，归根到底无职垃圾，<br>岔开话题便于洗地，假意道歉实则游戏。<br>录播都是曲解，截图都是放p，<br>我们蕾皇永远没错，微博妈妈永远爱你。<br>请随意复制扩散下去<br>改良版本防jio本[吃瓜]<br>Iè×·事·件·真·正·的·痛·点，其·实·是·2·月·叁日·凌·晨·直·播·时，“有·本·事·上·个·總，都·再·来·说·话”，以·及·粉·丝·的“才·叁，，拾原·s·c·还·好·意·思·说·话”，这·些·已·经·可·以·去·举·报·诱·导·消·费·了。而·叔·術·也·很·聪·明，刷·的·圣·经·从·来·不·shan，只·shan·这·些·说·到·点·子·上·的·评·论扩散下去，大伙可以来试试[吃瓜]兄弟们，这条评论是被秒shan的，但是敌人惧怕什么我们就要拥护什么，刷起来开沖！兄弟们，这货不竟，天理难容！<br>又到了我最喜欢的算旧账时间[喜欢]：<br>①雷.黃之前和ka咪大媽起冲突，扬言要砍对方。后对方报警，雷.皇悻悻shan掉微博<br>②之前有次直播，雷.黄老婆说被被猫抓了，ta说太好了，你得狂犬病我就能再取一个了<br>③雷..晃头像是无授权二改p站画师作品，原画师受不了雷.斯粉丝ky注销账号<br>④雷.煌yy王者♀英雄，说“只要你 乖乖翘起皮.谷，我就让你懷，☁”之类的污言禾.岁语兄弟们，这条评论是被秒shan的，但是敌人惧怕什么我们就要拥护什么，刷起来开沖!</p><p>一个九百多万粉丝的up主，在直播的时候点进别人辛辛苦苦写的长评，甚至都懒得多看，就和自己的粉丝一起嘲笑他取乐。他粉丝现在居然还有脸说他被人网络暴力……（转）<br>这是他团队发布的<br>vvvvvvvvv<br>发布这条信息的时候，他王者荣耀开局8分钟 耀开局8分钟这是他团123八。，。，</p><p><img src="https://img.maocdn.cn/img/2021/02/08/11.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/02/08/14.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/02/08/12.jpg"></p><p><img src="https://img.maocdn.cn/img/2021/02/08/13.jpg"></p><h2 id="蕾丝黑点整理"><a href="#蕾丝黑点整理" class="headerlink" title="蕾丝黑点整理"></a>蕾丝黑点整理</h2><p>早期抄的gigguk和the anime man的文案，轮了这么多年了还没个清楚的解释，gigguk满分文案能被你抄成零分甚至负分，gigguk也满暴论，但是人比你高的地方就是说得出“anime is trash, and so am I”，成为油管大物也没像你一样做切割反踩一脚前受众，反而出资出力帮助建设海外动漫讨论社区，也不摆一副领头人的架子。</p><p>头像抄袭别人还说是原创 实锤(头像是抄的，当年被发现了。一群粉丝还去这个画师那里ky，把画师气的直接注销账号了。之后他就一直主张是一方，但其实是抄的)</p><p><img src="https://img.maocdn.cn/img/2021/02/07/5.jpg"></p><p>以前的视频里对社会主义口嗨 实锤</p><p>侮辱刘胡兰 打LOL时把乐芙兰称为刘胡兰“一会你们看我怎么打爆这个刘胡兰” 实锤</p><p>侮辱花木兰从军 “她一个女人去军营里能干什么 当军ji吗？“ 实锤</p><p>玩VR黄色游戏 实锤</p><p>微博里直接发猥琐内容 实锤</p><p>做动漫杂谈时造谣 实锤</p><p>骂虚拟角色破鞋 有争议</p><p>挑起阶级矛盾 看不起社会底层 有争议</p><p>诅咒写漫评的人被卡车撞死 实锤</p><p>点名嘲讽其他up主 实锤</p><p>然后他的粉丝做的事就不说了 不算在他头上</p><p><strong>对于这些年他所诋毁的作品</strong></p><p>1.银魂:lex本人诋毁空知英秋人品，明明是完结吐槽吐着吐着搞到作者人品上去了。暗自揣测编辑部与作者之间的关系。并且对于结尾也仅仅是马拉松一句带过丝毫不在乎完结篇的小玉线；对于剧情人物方面也有强硬找槽点的嫌疑；其文案也缝合了贴吧黑粉的言论</p><p>2.re0:在漫评中两次提到486不孝子(出门在外多想想你的父母，你这个不孝子)，并且在过了段时间后又出了期视频来夸re0，不曾想仅是为了恰饭而做此举</p><p>3.fate:直播中说蘑菇有破鞋癖，并指名道姓点到樱以下是他的原话:那个键同音啊，你们还说间桐樱啊，我，我就是因为有间桐樱，还有空之境界里的有一个那个，蘑菇就是喜欢有这种破鞋癖。且之后还恰了fgo的饭(听说他是个月黑，但其他黑点我不怎么清楚)</p><p>4.花木兰(不是王者荣耀的):打王者的时候，对线花木兰，说什么穿着还挺性感，你还替父从军，以为军中的男人性生活很丰富吗。然后底下有人抱怨他，蕾丝打完那一把之后有点生气的说什么那些人是钓鱼的，让房管禁言，说什么要及时互动，然后他点了好几个，说这事的人都没有关注过，他说你要关注我，给我打过钱，你说倒无所谓(这件事知乎上还有详细的回答)</p><p>5.魔法少女小圆:将剧情全部复述了一遍，但一直在抖机灵，没有理清故事的原委，还碰瓷石头门，最后“心不甘情不愿”的恰了口硬饭</p><p>6.死神:他说死神的完结烂尾烂的最彻底作品，并放言不会被动画化。然而事实却打了他狠狠的一巴掌，然后他在直播中也曾提到此事，但他并不在意，底下的骑士团便围攻死神评论区，开始血洗评论区(删评，拉黑)</p><p>7.国家队:说国家队媚宅程度太高(然而很多二次元作品都有这样的毛病)引得一群内鬼趁机举报国家队，并甩锅给蕾丝(有一说一，你蕾丝还是带了节奏，就算事情不是你能控制的了的，不是你的本意，但是此事由你而起)</p><p>8.夏洛特烦恼，美人鱼:吐槽过于尖锐有夺人眼球之嫌，说电影烂的一无是处，太过于绝对了，以他的逻辑就没有好的电影了，所有套路都能用语言表达，又有什么特别之处呢？(16年的蕾丝过于哗众取宠)</p><p>10.罪恶王冠:他说女主“花瓶”。认为网管中二至极。还因为作画失误的鬼畜镜头说制作组不尊重女主。。。然后以后的视频里都会时不时拉出来鞭尸，之后还恰了网管的饭，一点节操都没有，呸！</p><p>11.无职转生：这个不用我多说，懂得都懂，我们都是《底层人士》</p><p>转自B站</p><p><strong>上述黑点可以总结为:</strong></p><p><strong>《蕾神演义》</strong></p><p>第一回：黑王冠蕾丝初成功 评春物误导新人众</p><p>第二回：阴阳怪气石头门 配角只配工具人</p><p>第三回：广告甲方喜登场 蕾电法王恰饭忙</p><p>第四回：夏洛特逻辑太不好 EVA弹幕惹人恼</p><p>第五回：小圆硬饭太难咽 视频不如看简介</p><p>第六回：死神缝纫贴吧观点 fate直指间桐破鞋</p><p>第七回：银魂众人齐惋惜 蕾皇一人逆风评</p><p>第八回：“486不孝” “国家队瑟情”</p><p>第九回：Re0评分狂跌 空知英秋被污蔑</p><p>第十回：死神动画惊天逆转 新Re0洗刷污名</p><p>第十一回：银魂辟谣终面世 小将举报引痛斥</p><p>第十二回：无心漫评转型生活 饭圈初成忙立人设 </p><p>lex现在的更新经典语录“成功人士看啥无职呀” 那些都陈年往事辽，但仍记忆犹新</p><p>快给我蕾皇磕头，拜见一下2次元教父呀，哄直播间小姐姐开心。</p><h2 id="对这个事件的感悟"><a href="#对这个事件的感悟" class="headerlink" title="对这个事件的感悟"></a>对这个事件的感悟</h2><p>lex在B站作为拥有900W粉的UP主，其拥有很大的影响力，在这种情况下仍口无遮拦，自顾自的口嗨，甚至上升到攻击其他UP主（人家辛苦写的长评他看都没看完就评为一坨狗屎，甚至说出<strong>你也被大卡车撞过</strong>的NC言论）以及地图炮所有追番人（呵呵，我这个人下人不配和您这种成功人士相提并论）。</p><p>况且，此人黑点如上述列出的那样。魔禁、死神、王冠等等的粉丝对他可是恨的要死，就拿银魂来举例，他造谣倒是造的爽，甚至那期文案是抄来的在加些许缝合，可怜那些辟谣者辛苦辟谣，就因他，败坏了多少被他黑过的作品的路人源。</p><p>最后，总结一下，作为拥有一定影响力的公众人物，应当对自己的粉丝负责，不要传播不健康、不积极的东西，管好自己那张嘴，没事别瞎BB，有这空还不如去学习，多看看书，增强自身的修养，提高自己的眼界。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 吃瓜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Processing语言介绍</title>
      <link href="/blog/2021/01/28/8.processing-yu-yan-jie-shao/"/>
      <url>/blog/2021/01/28/8.processing-yu-yan-jie-shao/</url>
      
        <content type="html"><![CDATA[<p>最近了解到了一门语言，名叫Processing，这是一个开放原始码的程序语言及开发环境，提供给那些想要对<strong>影像和动画及声音</strong>进行程序编辑的工作者。此外，学生、艺术家、设计师、建筑师、研究员以及有兴趣的人，也可以用来学习，开发原型及制作。简单来说，Processing可以称作为一门画画的编程语言，面向的人群为艺术家和设计师。</p><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><strong>链接：</strong><a href="https://processing.org/">https://processing.org/</a></p><p>点击链接，点击Download Processing跳转，选择合适的版本下载，及下及用，不需要配置烦人的开发环境。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Processing 是用 <strong>Java</strong> 编程语言写的，所以 Processing 应用程序是翻译成 Java 代码执行，基于java特性，Processing<strong>多平台支持</strong>。同时，这门语言对新手友好，这一点来源于其<strong>图形交户</strong>，如果您熟悉 C 或 Java 语言，Processing 将很容易学。简单来说，Processing 就是 Java + 一些库。</p><p>那么，Processing主要的应用场景，及Processing能干吗？</p><ul><li><p>生成艺术</p></li><li><p>2D游戏</p></li><li><p>交互式物理系统</p></li><li><p>数据可视化</p></li><li><p>UI</p></li><li><p>大热的计算机视觉和machine learning （通过Open-CV）</p></li><li><p>声音可视化 （外接MIDI做音乐）</p></li></ul><p>以下是Processing的作品。</p><p><img src="http://iprocessing.cn/wp-content/uploads/2020/09/gif-2.gif"></p><p><img src="https://mc.dfrobot.com.cn/data/attachment/forum/201701/03/125214m2d9n284z828iooz.gif"><br><img src="https://mc.dfrobot.com.cn/data/attachment/forum/201701/03/125241a7hhk33321kd8n1u.gif"><br>最后，介绍一个交流Processing的网站。</p><p>网站名：Processing编程艺术，链接：<a href="http://iprocessing.cn/">http://iprocessing.cn/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对波士顿机器人の观后感</title>
      <link href="/blog/2021/01/26/7.dui-bo-shi-dun-ji-qi-ren-noguan-hou-gan/"/>
      <url>/blog/2021/01/26/7.dui-bo-shi-dun-ji-qi-ren-noguan-hou-gan/</url>
      
        <content type="html"><![CDATA[<p> 前一段时间，我看了一个关于机器人的视频，观后直呼NB。</p><h2 id="视频链接"><a href="#视频链接" class="headerlink" title="视频链接"></a>视频链接</h2><p><strong>观看地址:</strong> <a href="https://www.bilibili.com/video/BV1nz4y1r7vt">https://www.bilibili.com/video/BV1nz4y1r7vt</a></p><p>网站：B站                UP主：柚子木字幕组</p><p>在B站看了一圈，这个链接下的视频完整并且评论区讨论和谐（<del>点都不像隔壁观网的评论区</del>）。</p><h2 id="观后感"><a href="#观后感" class="headerlink" title="观后感"></a>观后感</h2><p>很早以前对于波士顿的机器人我看过一个在地上跑步的视频，当时并没觉得那么震撼，而这个视频我看后感到深深的震惊，怎么说呢，动作太流畅了，据我考证，这个视频<strong>并非CG</strong>，而有个相关的恶搞视频是CG，其地址为：<a href="https://www.bilibili.com/video/BV1x4411V7oh">https://www.bilibili.com/video/BV1x4411V7oh?</a>，有些人没分清楚，就以为波士顿动力发的视频都是CG做的，我再强调一次，<strong>这个视频并非CG</strong>。那么，具体看完后，除了卧槽还是卧槽。总的来说，时间在流逝，科技在进步，这预示着未来的发展，就如同现在街上的汽车，人手一个的智能手机。期待的同时又对于新事物有些许恐惧，毕竟我这等佛系老人早已没了动力。最后，怎么说呢，期待未来越来越美好吧！<del>（那么，在我有生之年里能看到VR和人脑神经相结合的技术吗）</del></p><p><img src="https://img.maocdn.cn/img/2021/01/27/-1.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音频驱动失效(代码19)</title>
      <link href="/blog/2021/01/24/6.yin-pin-qu-dong-shi-xiao-dai-ma-19/"/>
      <url>/blog/2021/01/24/6.yin-pin-qu-dong-shi-xiao-dai-ma-19/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在个别情况下，比如说使用CamtasiaStudio软件后没给予权限，使得电脑没有声音，并在设备管理器中提示：</p><p>“由于其配置信息(注册表中的)不完整或已损坏，Windows 无法启动这个硬件设备。 (代码 19)。”</p><img src="https://exp-picture.cdn.bcebos.com/3c42a5ea3e86304807178b61c33104ebf7a752e9.jpg?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_500%2Climit_1%2Fformat%2Cf_jpg%2Fquality%2Cq_80"><p>对于这种问题，该如何解决呢？</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h4 id="重置系统"><a href="#重置系统" class="headerlink" title="重置系统"></a>重置系统</h4><p>这是最简单粗暴的办法，俗话说的好，大部分的电脑问题靠重启就可以解决，解决不了的靠重置系统，要是重置系统都解决不了，还有一个最终手段，新买一台电脑。</p><p>步骤：1、打开设置并点击更新和安全。</p><p><img src="https://s3.jpg.cm/2021/01/24/o94zH.png"></p><p>2、点击恢复。</p><p><img src="https://s3.jpg.cm/2021/01/24/o9fIL.png"></p><p>3、点击开始。</p><p><img src="https://s3.jpg.cm/2021/01/24/o9gcf.png"></p><p>4、按照自己的需求点击。</p><p><img src="https://s3.jpg.cm/2021/01/24/o9oJ2.png"></p><h4 id="注册表方式"><a href="#注册表方式" class="headerlink" title="注册表方式"></a>注册表方式</h4><p>1、按下windows键+R键，输入regedit，打开注册表编辑器。</p><img src="https://exp-picture.cdn.bcebos.com/5e4e9c2b74ee1c32244c0d9907f1d8a727334be9.jpg?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_500%2Climit_1%2Fformat%2Cf_jpg%2Fquality%2Cq_80"><p>2、在注册表中定位到：</p><p>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Class{4d36e96c-e325-11ce-bfc1-08002be10318}</p><p><strong>解释一下{4d36e96c-e325-11ce-bfc1-08002be10318}为出问题设备的类 Guid的值。</strong></p><p><img src="https://s3.jpg.cm/2021/01/24/o90iO.png"></p><p><strong><em>注意：这一类有很多，不要找错了，检查右侧class项是否为MEDIA\</em></strong></p><p><img src="https://exp-picture.cdn.bcebos.com/d9e638334884cde33d780a5bf07f860e7d7542e9.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80"></p><p>3、双击UpperFilters项，删除其中的内容。</p><p><img src="https://exp-picture.cdn.bcebos.com/874f6275e5f4fcf59359667b21d7726b0de2bde9.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80"></p><p>4、确保UpperFilters项数值为空后，关闭注册表编辑器。</p><p><img src="https://exp-picture.cdn.bcebos.com/3b8fb4d7726b0ce2e7b368baef781423bfb9b6e9.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80"></p><p>5、计算机→右键→管理</p><p><img src="https://exp-picture.cdn.bcebos.com/354e7a781423beb9f16a7d7730d6e1d06ce8b3e9.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80"></p><p>6、在设备管理器中，找到音频设备，右键→禁用</p><p><img src="https://exp-picture.cdn.bcebos.com/bff8683e21c2bbd66b84315d116186254093aee9.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80"></p><p>7、禁用后再启用。即手动重启该设备。然后就可以正常启用设备了。如果不能立即生效记得重启电脑。</p><p><img src="https://exp-picture.cdn.bcebos.com/6ca984618625419341bcecb1df1bd10ff326abe9.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80"></p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>最后，我说一下我遇到这个问题的解决思路。我遇到这个问题2次了，第一次我搜索无果后，就直接重置系统，简单粗暴。在今天我又遇到了这个问题，因在家无聊，就在互联网上找了很久，并逐一实践，最终找到了解决办法。因此，当遇到问题时，善用搜索引擎，能够解决大部分的问题，当然，主要还是你得实践，毕竟实践出真知。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java notes</title>
      <link href="/blog/2021/01/23/5.java-notes/"/>
      <url>/blog/2021/01/23/5.java-notes/</url>
      
        <content type="html"><![CDATA[<p>在我上一学期的时候，因自己不想作笔记，就在互联网上嫖了一份笔记，并做成一份网页的形式。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><strong>java notes:</strong> <a href="http://hai-chao.gitee.io/java-notes">http://hai-chao.gitee.io/java-notes</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>这份笔记是关于<strong>java基础</strong>的。</li><li>不建议没有学过java基础的人看，这份笔记更多是用来给学过的人<strong>回顾</strong>及<strong>巩固</strong>知识用的。</li><li>里面没有GUI的内容。</li></ul><h2 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h2><p>java基础是十分重要的，我自身对于java基础的掌握算是一般水平，还有网络编程、多线程、反射等知识没有学习。故在这个寒假中我将学习这三方面的内容。在学习的过程中会以博文的形式记录学习笔记，在学习完成之后会作一个关于java基础的总结。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10我常用的快捷键</title>
      <link href="/blog/2021/01/21/4.win10-wo-chang-yong-de-kuai-jie-jian/"/>
      <url>/blog/2021/01/21/4.win10-wo-chang-yong-de-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<p>今天我记录的是自己常用的win10快捷键。</p><hr><h2 id="快速显示桌面"><a href="#快速显示桌面" class="headerlink" title="快速显示桌面"></a>快速显示桌面</h2><p><strong>Win键+D</strong></p><p>快速显示桌面，很有用的一个快捷键，懂的都懂(≧ω≦) ，我也不过多赘述。</p><hr><h2 id="打开文件管理器"><a href="#打开文件管理器" class="headerlink" title="打开文件管理器"></a>打开文件管理器</h2><p><strong>Win键+E</strong></p><p>打开文件管理器，及打开我的电脑，学会这个快捷键，再也不用傻乎乎的用鼠标来点了。</p><p>对于文件管理器，里面也有一些常用的键盘操作，我同样举例我最常用的。</p><h4 id="关闭当前的“文件资源管理器”窗口"><a href="#关闭当前的“文件资源管理器”窗口" class="headerlink" title="关闭当前的“文件资源管理器”窗口"></a>关闭当前的“文件资源管理器”窗口</h4><p><strong>Ctrl + W</strong></p><h4 id="在界面的各个部分之间循环"><a href="#在界面的各个部分之间循环" class="headerlink" title="在界面的各个部分之间循环"></a>在界面的各个部分之间循环</h4><p><strong>Tab键</strong></p><h4 id="反向循环"><a href="#反向循环" class="headerlink" title="反向循环"></a>反向循环</h4><p><strong>Shift + Tab</strong></p><p>在选择主内容窗格的情况下，用这个快捷键就会聚焦到左侧边栏。</p><h4 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h4><p><strong>F2键</strong></p><p>在选中文件的时候按F2，修改完成后按Enter键确定，按Escape键取消重命名。</p><h4 id="打开上下文菜单"><a href="#打开上下文菜单" class="headerlink" title="打开上下文菜单"></a>打开上下文菜单</h4><p><strong>Shift + F10</strong></p><p>在选中文件的时候按下这个快捷键，将会弹出上下文的菜单。</p><hr><p>以上，是针对文件资源管理器窗口的一些常用操作，我没有列举完，像新建一个文件夹，快速聚焦到搜索栏、窗口顶部这些操作，若你感兴趣，可以自行去了解。</p><hr><h2 id="打开Windows-10设置"><a href="#打开Windows-10设置" class="headerlink" title="打开Windows 10设置"></a>打开Windows 10设置</h2><p><strong>Win键+I</strong></p><p>这个快捷键的作用就是打开win10的设置。</p><hr><h2 id="锁定屏幕"><a href="#锁定屏幕" class="headerlink" title="锁定屏幕"></a>锁定屏幕</h2><p><strong>Win键+L</strong></p><p>很好用，使用场景为你稍微要离开你的电脑一会，就可以用这个快捷键。</p><hr><h2 id="虚拟桌面"><a href="#虚拟桌面" class="headerlink" title="虚拟桌面"></a>虚拟桌面</h2><h4 id="创建一个新的虚拟桌面"><a href="#创建一个新的虚拟桌面" class="headerlink" title="创建一个新的虚拟桌面"></a>创建一个新的虚拟桌面</h4><p><strong>Win键+Ctrl+D</strong></p><h4 id="关闭最近使用的虚拟桌面"><a href="#关闭最近使用的虚拟桌面" class="headerlink" title="关闭最近使用的虚拟桌面"></a>关闭最近使用的虚拟桌面</h4><p><strong>Win键+Ctrl+F4</strong></p><h4 id="切换虚拟桌面"><a href="#切换虚拟桌面" class="headerlink" title="切换虚拟桌面"></a>切换虚拟桌面</h4><p><strong>Win键+Ctrl+左/右</strong></p><hr><p>这个我说实话，我不常用这一组关于虚拟桌面的快捷键。</p><hr><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><h4 id="移动应用窗口"><a href="#移动应用窗口" class="headerlink" title="移动应用窗口"></a>移动应用窗口</h4><p><strong>Win键+左/右/上/下</strong></p><h4 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h4><p><strong>Alt+Tap</strong></p><h4 id="最大化窗口"><a href="#最大化窗口" class="headerlink" title="最大化窗口"></a>最大化窗口</h4><p><strong>Alt+空格+X</strong></p><hr><p>对于桌面双频操作，这一组快捷键是基础。</p><hr><h2 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h2><p><strong>Ctrl+Shift+ESC</strong></p><p>打开任务管理器的最快方式，也是我最常用的。</p><hr><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><strong>Win+Shift+S</strong></p><p>我最常用的方式，截图保存在剪贴板中。</p><hr><h2 id="剪贴板"><a href="#剪贴板" class="headerlink" title="剪贴板"></a>剪贴板</h2><p><strong>Windows+V</strong></p><p>剪贴板的快捷键，剪贴板能够保存25条历史记录。</p><hr><h2 id="关机-amp-关闭窗口"><a href="#关机-amp-关闭窗口" class="headerlink" title="关机&amp;关闭窗口"></a>关机&amp;关闭窗口</h2><p><strong>Alt+F4</strong></p><p>关机的快捷键还有其他的方式，我常用的这个是在桌面使用的，在桌面使用这个快捷键会弹出一个关机的窗口，注意，<strong>若不是在桌面使用，而是在应用窗口中使用，效果会变成关闭当前的应用窗口。</strong></p><hr><h2 id="F1-F12的作用"><a href="#F1-F12的作用" class="headerlink" title="F1~F12的作用"></a>F1~F12的作用</h2><p>相信对于小白来说有可能不知道F1到F12的作用，我在这里就简单的科普一下。</p><h4 id="F1"><a href="#F1" class="headerlink" title="F1"></a>F1</h4><p>打开帮助窗口。</p><p>在win10系统下的软件打开后按F1会打开帮助窗口界面。</p><h4 id="F2"><a href="#F2" class="headerlink" title="F2"></a>F2</h4><p>更改文件名字。</p><p>在选中文件的时候，按下F2会重命名。</p><h4 id="F3"><a href="#F3" class="headerlink" title="F3"></a>F3</h4><p>搜索。</p><p>按下F3，会聚焦到当前应用的搜索栏上。</p><h4 id="F4"><a href="#F4" class="headerlink" title="F4"></a>F4</h4><p>定位地址。</p><p>在浏览器中按下F4，会定位到地址栏上。</p><h4 id="F5"><a href="#F5" class="headerlink" title="F5"></a>F5</h4><p>快速刷新页面。</p><h4 id="F6"><a href="#F6" class="headerlink" title="F6"></a>F6</h4><p>恢复。</p><p>在按下F3或F4出现在搜索或在地址栏上的时候，按下F6就会恢复到刚开始的界面。</p><h4 id="F7"><a href="#F7" class="headerlink" title="F7"></a>F7</h4><p>选择dos命令。</p><p>在cmd中按下F7就会弹出记录刚刚录入的dos命令。</p><h4 id="F8"><a href="#F8" class="headerlink" title="F8"></a>F8</h4><p>系统启动方式。</p><p>在win10系统启动时按下F8，会进入选择什么方式启动系统界面。</p><h4 id="F9"><a href="#F9" class="headerlink" title="F9"></a>F9</h4><p>提高音量。</p><p>F9能提高windows media的音量。</p><h4 id="F10"><a href="#F10" class="headerlink" title="F10"></a>F10</h4><p>快捷键导航。</p><p>在一个文件夹下按F10，会出现快捷键导航。</p><h4 id="F11"><a href="#F11" class="headerlink" title="F11"></a>F11</h4><p>最大化。</p><p>按下F11可以使窗口最大化，再按一次会恢复到原来的大小。</p><h4 id="F12"><a href="#F12" class="headerlink" title="F12"></a>F12</h4><p>调试用。</p><p>浏览器中按下F12会出现开发者使用的模式，用于调试网页程序用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于微信公众号的研究</title>
      <link href="/blog/2021/01/20/3.dui-yu-wei-xin-gong-zhong-hao-de-yan-jiu/"/>
      <url>/blog/2021/01/20/3.dui-yu-wei-xin-gong-zhong-hao-de-yan-jiu/</url>
      
        <content type="html"><![CDATA[<p>最近几天无所事事，就去研究了一下公众号，我所选择的平台是微信，创建的是微信订阅号。</p><h2 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h2><p>新注册一个公众号，需注意的是一个身份证可以注册一个帐号，一个营业执照可以注册两个。大体上没有其他的难点了。</p><p>注册地址是在：<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p><p>在创建过程中还有一个需要注意的是公众号的命名。命名尽可能的不要重复，当命名检测到有相同的词时，创建是不会成功的。</p><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><p>那么，对于我创建一个微信公众号有什么好处呢？具体的好处有以下几点：</p><ul><li><p><strong>锻炼写文章的能力</strong><br>写文章是一个很重要的一个技能点，可以借由这个机会来锻炼自身对于文章的把控，你可能会说自己不是新闻、媒体中文等相关专业的，不适合写公众号文章，但是作为个人公众号来说你需要注重的是你表达的内容，而且文采也是通过不断练习来达到的。我作为计科的学生，学校规划的路线是java，那么写公众号文章对于我以后写文档是有着一定帮助的。</p></li><li><p><strong>变现</strong><br>写公众号文章是可以赚点小钱的。公众号的变现方式也有不少，我在这里着重介绍一下对于公众号的变现方式。<br>1、<strong>流量主</strong>。流量主不同于广告主，是不需要微信认证（个人微信公众号是不能微信认证）的，只需简单申请，即可成为流量主，申请的条件也很简单，只要有<strong>500个粉丝</strong>，就可以申请。申请成功后可以按月获取广告收入，简单说，只要别人，点了你的文章看，你就有收入，及写了文章，就可以躺着收钱了。<br>2、<strong>打赏</strong>。这个很简单，当你的文章写得足够好，就会有人给你打赏。<br>3、<strong>卖公众号</strong>。当你不想在运营的时候，就可以选择卖号。这个具体要看你号的质量，一般一个十万粉丝的质量号，能够卖三十万左右，这个操作的本质是卖粉丝，这也是一种重要的变现方式。<br>4、<strong>引流</strong>。这个操作是当你有一定的粉丝基础后，你可以通过一些方式将这个公众号上的粉丝引到其他地方，如你在其他平台建的号啊等等。</p></li></ul><h2 id="发展前景"><a href="#发展前景" class="headerlink" title="发展前景"></a>发展前景</h2><p>在我发这一篇博文的时候，其实公众号的热潮已经退去，现在是短视频的时代，2020年短视频带货，直播带货遍地走，那我为什么要来经营一个微信公众号呢？其原因是为了第一个好处，锻炼写文章的能力同时如果没人关注的话就相当于建立了一个私人的图库。目前我对于我的那个公众号的规划是，先转载后原创。建立好了一个公众号之后，最为重要的是每日的更新，贵在坚持。</p><hr><p>最后，我建立的公众号是与ACG相关的，希望大家<strong>多多支持</strong>。</p><img src="http://img.wwery.com/washen/c95570123051820.jpg">]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站收录</title>
      <link href="/blog/2021/01/14/2.wang-zhan-shou-lu/"/>
      <url>/blog/2021/01/14/2.wang-zhan-shou-lu/</url>
      
        <content type="html"><![CDATA[<p>近两天闲来无事，在互联网上冲浪了一把，发现了很多有趣的网站，故记录下来。</p><h2 id="小霸王"><a href="#小霸王" class="headerlink" title="小霸王"></a>小霸王</h2><p><strong>链接 :</strong> <a href="https://www.yikm.net/">https://www.yikm.net/</a></p><p>找回童年的快乐，内置很多FC，街机游戏。</p><h2 id="ZType"><a href="#ZType" class="headerlink" title="ZType"></a>ZType</h2><p><strong>链接 :</strong> <a href="https://zty.pe/">https://zty.pe/</a></p><p>这是一个关于打字的小游戏，可以用作打字练习。</p><h2 id="萌码"><a href="#萌码" class="headerlink" title="萌码"></a>萌码</h2><p><strong>链接 :</strong> <a href="https://mengma.moe/">https://mengma.moe/</a></p><p>包含常用的颜文字(￣▽￣)。</p><h2 id="Yandex"><a href="#Yandex" class="headerlink" title="Yandex"></a>Yandex</h2><p><strong>链接 :</strong> <a href="https://yandex.com/">https://yandex.com/</a></p><p>俄罗斯的搜索引擎，支持中文搜索，可搜到一些有趣的东西(｡･ω･｡)。</p><h2 id="Indienova"><a href="#Indienova" class="headerlink" title="Indienova"></a>Indienova</h2><p><strong>链接 :</strong> <a href="https://indienova.com/">https://indienova.com/</a></p><p>独立游戏相关，可以了解到独立游戏的很多咨询。</p><h2 id="HelloGitHub"><a href="#HelloGitHub" class="headerlink" title="HelloGitHub"></a>HelloGitHub</h2><p><strong>链接 :</strong> <a href="https://hellogithub.com/">https://hellogithub.com/</a></p><p>分享GitHub上有趣、入门级的开源项目。</p><h2 id="网易云游戏平台"><a href="#网易云游戏平台" class="headerlink" title="网易云游戏平台"></a>网易云游戏平台</h2><p><strong>链接 :</strong> <a href="https://cg.163.com/">https://cg.163.com/</a></p><p>支持在网页上游玩手机，PC上的游戏，免费游玩的时间有限，需每日签到领取游玩时间，经测试，游戏卡顿明显，不知道充钱成为会员开启的高速游玩的速度如何。</p><h2 id="书签地球"><a href="#书签地球" class="headerlink" title="书签地球"></a>书签地球</h2><p><strong>链接 :</strong> <a href="https://www.bookmarkearth.com/">https://www.bookmarkearth.com/</a></p><p>分享个人书签的网站，能从别人分享的书签中找到自己需要的网站。</p><h2 id="四海吧"><a href="#四海吧" class="headerlink" title="四海吧"></a>四海吧</h2><p><strong>链接 :</strong> <a href="https://sihaiba.com/">https://sihaiba.com/</a></p><p>挺不错的一个网站，在里面能够找到一些好玩的，是一个互联网内容的资源分享平台。</p><h2 id="LearningMusic"><a href="#LearningMusic" class="headerlink" title="LearningMusic"></a>LearningMusic</h2><p><strong>链接 :</strong> <a href="https://learningmusic.ableton.com/zh-Hans/">https://learningmusic.ableton.com/zh-Hans/</a></p><p>能学习到音乐创作的基础知识，无需任何经验或设备， 在浏览器中可完成所有工作。</p><h2 id="自由钢琴"><a href="#自由钢琴" class="headerlink" title="自由钢琴"></a>自由钢琴</h2><p><strong>链接 :</strong> <a href="https://www.autopiano.cn/">https://www.autopiano.cn/</a></p><p>无聊时可来听听各个乐器的声音，定能治愈心灵。</p><hr><p>最后，分享一个发现的黑科技。</p><p><strong>万能书签</strong></p><p>在任意的 URL 前添加 <code>wn.run/</code> 能看到该网页支持哪些神奇有意思的功能，比如网页翻译，PC模拟，视频下载解析等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown学习记录</title>
      <link href="/blog/2021/01/12/1.markdown-xue-xi-ji-lu/"/>
      <url>/blog/2021/01/12/1.markdown-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>Markdown是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown编写的文档的后缀名为<code>.md</code>。下面我将记录Markdown的常用语法。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>用#来表示1~6级标题，几级标题对应有几个#号，例如:</p><pre class=" language-java"><code class="language-java"># 一级标题### 三级标题</code></pre><p>注意事项:#号后面要加一个<strong>空格</strong>。</p><h2 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h2><p><strong>换行</strong><br>两个空格加一个回车。<br><strong>分割线</strong><br>三个及三个以上的减号（-）号。<br><strong>删除线</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">~</span><span class="token operator">~</span>删除的内容<span class="token operator">~</span><span class="token operator">~</span></code></pre><p><strong>下划线</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>u<span class="token operator">></span>加下划线的内容<span class="token operator">&lt;</span><span class="token operator">/</span>u<span class="token operator">></span></code></pre><p><strong>脚注</strong></p><pre class=" language-java"><code class="language-java">内容<span class="token punctuation">[</span><span class="token operator">^</span>test<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">^</span>text<span class="token punctuation">]</span><span class="token operator">:</span>内容的意思</code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>无序列表</strong><br>用星号(<code>*</code>)、加号(<code>+</code>)或是减号(<code>-</code>)作为列表标记，后面加一个<strong>空格</strong>。<br><strong>有序列表</strong><br>数字1加一个点（.）。<br><strong>列表嵌套</strong><br>子列表前加4个空格。</p><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p><code>&gt;</code>加一个空格。</p><pre class=" language-java"><code class="language-java"><span class="token operator">></span> 区块引用<span class="token operator">></span> 今天天气真好！</code></pre><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p><strong>`代码`</strong><br><strong>```<br>代码段<br>```</strong></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>用法如下:</p><pre class=" language-java"><code class="language-java">用法一<span class="token operator">:</span><span class="token punctuation">[</span>链接名称<span class="token punctuation">]</span><span class="token punctuation">(</span>链接地址<span class="token punctuation">)</span>  或  <span class="token operator">&lt;</span>链接地址<span class="token operator">></span>用法二<span class="token operator">:</span>通过变量来设置一个链接，变量赋值在文档末尾进行这个链接用 <span class="token number">1</span> 作为网址变量 <span class="token punctuation">[</span>Google<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>这个链接用 runoob 作为网址变量 <span class="token punctuation">[</span>Runoob<span class="token punctuation">]</span><span class="token punctuation">[</span>runoob<span class="token punctuation">]</span>然后在文档的结尾为变量赋值（网址）  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>  <span class="token punctuation">[</span>runoob<span class="token punctuation">]</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token operator">/</span></code></pre><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre class=" language-java"><code class="language-java"><span class="token operator">!</span><span class="token punctuation">[</span>alt 属性文本<span class="token punctuation">]</span><span class="token punctuation">(</span>图片地址<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>alt 属性文本<span class="token punctuation">]</span><span class="token punctuation">(</span>图片地址 <span class="token string">"可选标题"</span><span class="token punctuation">)</span></code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre class=" language-java"><code class="language-java"><span class="token operator">|</span>  表头   <span class="token operator">|</span> 表头  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token operator">--</span><span class="token operator">--</span>  <span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span>  <span class="token operator">|</span><span class="token operator">|</span> 单元格  <span class="token operator">|</span> 单元格 <span class="token operator">|</span><span class="token operator">|</span> 单元格  <span class="token operator">|</span> 单元格 <span class="token operator">|</span></code></pre><p>说明:可以设置表格的对齐方式</p><pre class=" language-java"><code class="language-java"><span class="token operator">|</span> 左对齐 <span class="token operator">|</span> 右对齐 <span class="token operator">|</span> 居中对齐 <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">:</span> <span class="token operator">|</span> <span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">:</span> <span class="token operator">|</span><span class="token operator">|</span> 单元格 <span class="token operator">|</span> 单元格 <span class="token operator">|</span> 单元格 <span class="token operator">|</span><span class="token operator">|</span> 单元格 <span class="token operator">|</span> 单元格 <span class="token operator">|</span> 单元格 <span class="token operator">|</span></code></pre><p><code>:-</code>表示左对齐，<code>:-:</code>表示居中对齐,<code>:-</code>表示右对齐。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
